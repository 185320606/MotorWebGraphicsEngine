{"version":3,"file":"createVerticesFromQuantizedTerrainMesh.js","sources":["../../../../Source/WorkersES6/createVerticesFromQuantizedTerrainMesh.js"],"sourcesContent":["import AttributeCompression from '../Core/AttributeCompression.js';\r\nimport AxisAlignedBoundingBox from '../Core/AxisAlignedBoundingBox.js';\r\nimport BoundingSphere from '../Core/BoundingSphere.js';\r\nimport Cartesian2 from '../Core/Cartesian2.js';\r\nimport Cartesian3 from '../Core/Cartesian3.js';\r\nimport Cartographic from '../Core/Cartographic.js';\r\nimport defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport EllipsoidalOccluder from '../Core/EllipsoidalOccluder.js';\r\nimport IndexDatatype from '../Core/IndexDatatype.js';\r\nimport CesiumMath from '../Core/Math.js';\r\nimport Matrix4 from '../Core/Matrix4.js';\r\nimport OrientedBoundingBox from '../Core/OrientedBoundingBox.js';\r\nimport Rectangle from '../Core/Rectangle.js';\r\nimport TerrainEncoding from '../Core/TerrainEncoding.js';\r\nimport TerrainProvider from '../Core/TerrainProvider.js';\r\nimport Transforms from '../Core/Transforms.js';\r\nimport WebMercatorProjection from '../Core/WebMercatorProjection.js';\r\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\r\nimport materem from '../ThirdParty/Workers/materem.js';\r\nimport CreatePhysicalArray from '../Extension/Source/Worker/CreatePhysicalArray.js';\r\n\r\nvar maxShort = 32767;\r\n\r\nvar cartesian3Scratch = new Cartesian3();\r\nvar scratchMinimum = new Cartesian3();\r\nvar scratchMaximum = new Cartesian3();\r\nvar cartographicScratch = new Cartographic();\r\nvar toPack = new Cartesian2();\r\nvar scratchNormal = new Cartesian3();\r\nvar scratchToENU = new Matrix4();\r\nvar scratchFromENU = new Matrix4();\r\nvar physical;\r\nvar lbSpaMgr;\r\n\r\nfunction createVertices(parameters, transferableObjects) {\r\n    var quantizedVertices = parameters.quantizedVertices;\r\n    var quantizedVertexCount = quantizedVertices.length / 3;\r\n    var octEncodedNormals = parameters.octEncodedNormals;\r\n    var edgeVertexCount = parameters.westIndices.length + parameters.eastIndices.length +\r\n                          parameters.southIndices.length + parameters.northIndices.length;\r\n    var includeWebMercatorT = parameters.includeWebMercatorT;\r\n\r\n    var rectangle = Rectangle.clone(parameters.rectangle);\r\n    var west = rectangle.west;\r\n    var south = rectangle.south;\r\n    var east = rectangle.east;\r\n    var north = rectangle.north;\r\n\r\n    var ellipsoid = Ellipsoid.clone(parameters.ellipsoid);\r\n\r\n    var exaggeration = parameters.exaggeration;\r\n    var minimumHeight = parameters.minimumHeight * exaggeration;\r\n    var maximumHeight = parameters.maximumHeight * exaggeration;\r\n\r\n    var center = parameters.relativeToCenter;\r\n    var fromENU = Transforms.eastNorthUpToFixedFrame(center, ellipsoid);\r\n    var toENU = Matrix4.inverseTransformation(fromENU, new Matrix4());\r\n\r\n    var southMercatorY;\r\n    var oneOverMercatorHeight;\r\n    if (includeWebMercatorT) {\r\n        southMercatorY = WebMercatorProjection.geodeticLatitudeToMercatorAngle(south);\r\n        oneOverMercatorHeight = 1.0 / (WebMercatorProjection.geodeticLatitudeToMercatorAngle(north) - southMercatorY);\r\n    }\r\n\r\n    var uBuffer = quantizedVertices.subarray(0, quantizedVertexCount);\r\n    var vBuffer = quantizedVertices.subarray(quantizedVertexCount, 2 * quantizedVertexCount);\r\n    var heightBuffer = quantizedVertices.subarray(quantizedVertexCount * 2, 3 * quantizedVertexCount);\r\n    var hasVertexNormals = defined(octEncodedNormals);\r\n\r\n    var uvs = new Array(quantizedVertexCount);\r\n    var heights = new Array(quantizedVertexCount);\r\n    var positions = new Array(quantizedVertexCount);\r\n    var webMercatorTs = includeWebMercatorT ? new Array(quantizedVertexCount) : [];\r\n\r\n    var minimum = scratchMinimum;\r\n    minimum.x = Number.POSITIVE_INFINITY;\r\n    minimum.y = Number.POSITIVE_INFINITY;\r\n    minimum.z = Number.POSITIVE_INFINITY;\r\n\r\n    var maximum = scratchMaximum;\r\n    maximum.x = Number.NEGATIVE_INFINITY;\r\n    maximum.y = Number.NEGATIVE_INFINITY;\r\n    maximum.z = Number.NEGATIVE_INFINITY;\r\n\r\n    var minLongitude = Number.POSITIVE_INFINITY;\r\n    var maxLongitude = Number.NEGATIVE_INFINITY;\r\n    var minLatitude = Number.POSITIVE_INFINITY;\r\n    var maxLatitude = Number.NEGATIVE_INFINITY;\r\n\r\n    for (var i = 0; i < quantizedVertexCount; ++i) {\r\n        var rawU = uBuffer[i];\r\n        var rawV = vBuffer[i];\r\n\r\n        var u = rawU / maxShort;\r\n        var v = rawV / maxShort;\r\n        var height = CesiumMath.lerp(minimumHeight, maximumHeight, heightBuffer[i] / maxShort);\r\n\r\n        cartographicScratch.longitude = CesiumMath.lerp(west, east, u);\r\n        cartographicScratch.latitude = CesiumMath.lerp(south, north, v);\r\n        cartographicScratch.height = height;\r\n\r\n        minLongitude = Math.min(cartographicScratch.longitude, minLongitude);\r\n        maxLongitude = Math.max(cartographicScratch.longitude, maxLongitude);\r\n        minLatitude = Math.min(cartographicScratch.latitude, minLatitude);\r\n        maxLatitude = Math.max(cartographicScratch.latitude, maxLatitude);\r\n\r\n        var position = ellipsoid.cartographicToCartesian(cartographicScratch);\r\n\r\n        uvs[i] = new Cartesian2(u, v);\r\n        heights[i] = height;\r\n        positions[i] = position;\r\n\r\n        if (includeWebMercatorT) {\r\n            webMercatorTs[i] = (WebMercatorProjection.geodeticLatitudeToMercatorAngle(cartographicScratch.latitude) - southMercatorY) * oneOverMercatorHeight;\r\n        }\r\n\r\n        Matrix4.multiplyByPoint(toENU, position, cartesian3Scratch);\r\n\r\n        Cartesian3.minimumByComponent(cartesian3Scratch, minimum, minimum);\r\n        Cartesian3.maximumByComponent(cartesian3Scratch, maximum, maximum);\r\n    }\r\n\r\n    var westIndicesSouthToNorth = copyAndSort(parameters.westIndices, function (a, b) {\r\n        return uvs[a].y - uvs[b].y;\r\n    });\r\n    var eastIndicesNorthToSouth = copyAndSort(parameters.eastIndices, function (a, b) {\r\n        return uvs[b].y - uvs[a].y;\r\n    });\r\n    var southIndicesEastToWest = copyAndSort(parameters.southIndices, function (a, b) {\r\n        return uvs[b].x - uvs[a].x;\r\n    });\r\n    var northIndicesWestToEast = copyAndSort(parameters.northIndices, function (a, b) {\r\n        return uvs[a].x - uvs[b].x;\r\n    });\r\n\r\n    var orientedBoundingBox;\r\n    var boundingSphere;\r\n\r\n    if (exaggeration !== 1.0) {\r\n        // Bounding volumes need to be recomputed since the tile payload assumes no exaggeration.\r\n        boundingSphere = BoundingSphere.fromPoints(positions);\r\n        orientedBoundingBox = OrientedBoundingBox.fromRectangle(rectangle, minimumHeight, maximumHeight, ellipsoid);\r\n    }\r\n\r\n    var occludeePointInScaledSpace;\r\n    if (exaggeration !== 1.0 || minimumHeight < 0.0) {\r\n        // Horizon culling point needs to be recomputed since the tile payload assumes no exaggeration.\r\n        var occluder = new EllipsoidalOccluder(ellipsoid);\r\n        occludeePointInScaledSpace = occluder.computeHorizonCullingPointPossiblyUnderEllipsoid(center, positions, minimumHeight);\r\n    }\r\n\r\n    var hMin = minimumHeight;\r\n    hMin = Math.min(hMin, findMinMaxSkirts(parameters.westIndices, parameters.westSkirtHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum));\r\n    hMin = Math.min(hMin, findMinMaxSkirts(parameters.southIndices, parameters.southSkirtHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum));\r\n    hMin = Math.min(hMin, findMinMaxSkirts(parameters.eastIndices, parameters.eastSkirtHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum));\r\n    hMin = Math.min(hMin, findMinMaxSkirts(parameters.northIndices, parameters.northSkirtHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum));\r\n\r\n    var aaBox = new AxisAlignedBoundingBox(minimum, maximum, center);\r\n    var encoding = new TerrainEncoding(aaBox, hMin, maximumHeight, fromENU, hasVertexNormals, includeWebMercatorT);\r\n    var vertexStride = encoding.getStride();\r\n    var size = quantizedVertexCount * vertexStride + edgeVertexCount * vertexStride;\r\n    var vertexBuffer = new Float32Array(size);\r\n\r\n    var bufferIndex = 0;\r\n    for (var j = 0; j < quantizedVertexCount; ++j) {\r\n        if (hasVertexNormals) {\r\n            var n = j * 2.0;\r\n            toPack.x = octEncodedNormals[n];\r\n            toPack.y = octEncodedNormals[n + 1];\r\n\r\n            if (exaggeration !== 1.0) {\r\n                var normal = AttributeCompression.octDecode(toPack.x, toPack.y, scratchNormal);\r\n                var fromENUNormal = Transforms.eastNorthUpToFixedFrame(positions[j], ellipsoid, scratchFromENU);\r\n                var toENUNormal = Matrix4.inverseTransformation(fromENUNormal, scratchToENU);\r\n\r\n                Matrix4.multiplyByPointAsVector(toENUNormal, normal, normal);\r\n                normal.z *= exaggeration;\r\n                Cartesian3.normalize(normal, normal);\r\n\r\n                Matrix4.multiplyByPointAsVector(fromENUNormal, normal, normal);\r\n                Cartesian3.normalize(normal, normal);\r\n\r\n                AttributeCompression.octEncode(normal, toPack);\r\n            }\r\n        }\r\n\r\n        bufferIndex = encoding.encode(vertexBuffer, bufferIndex, positions[j], uvs[j], heights[j], toPack, webMercatorTs[j]);\r\n    }\r\n\r\n    var edgeTriangleCount = Math.max(0, (edgeVertexCount - 4) * 2);\r\n    var indexBufferLength = parameters.indices.length + edgeTriangleCount * 3;\r\n    var indexBuffer = IndexDatatype.createTypedArray(quantizedVertexCount + edgeVertexCount, indexBufferLength);\r\n    indexBuffer.set(parameters.indices, 0);\r\n\r\n    var percentage = 0.0001;\r\n    var lonOffset = (maxLongitude - minLongitude) * percentage;\r\n    var latOffset = (maxLatitude - minLatitude) * percentage;\r\n    var westLongitudeOffset = -lonOffset;\r\n    var westLatitudeOffset = 0.0;\r\n    var eastLongitudeOffset = lonOffset;\r\n    var eastLatitudeOffset = 0.0;\r\n    var northLongitudeOffset = 0.0;\r\n    var northLatitudeOffset = latOffset;\r\n    var southLongitudeOffset = 0.0;\r\n    var southLatitudeOffset = -latOffset;\r\n\r\n    // Add skirts.\r\n    var vertexBufferIndex = quantizedVertexCount * vertexStride;\r\n    addSkirt(vertexBuffer, vertexBufferIndex, westIndicesSouthToNorth, encoding, heights, uvs, octEncodedNormals, ellipsoid, rectangle, parameters.westSkirtHeight, exaggeration, southMercatorY, oneOverMercatorHeight, westLongitudeOffset, westLatitudeOffset);\r\n    vertexBufferIndex += parameters.westIndices.length * vertexStride;\r\n    addSkirt(vertexBuffer, vertexBufferIndex, southIndicesEastToWest, encoding, heights, uvs, octEncodedNormals, ellipsoid, rectangle, parameters.southSkirtHeight, exaggeration, southMercatorY, oneOverMercatorHeight, southLongitudeOffset, southLatitudeOffset);\r\n    vertexBufferIndex += parameters.southIndices.length * vertexStride;\r\n    addSkirt(vertexBuffer, vertexBufferIndex, eastIndicesNorthToSouth, encoding, heights, uvs, octEncodedNormals, ellipsoid, rectangle, parameters.eastSkirtHeight, exaggeration, southMercatorY, oneOverMercatorHeight, eastLongitudeOffset, eastLatitudeOffset);\r\n    vertexBufferIndex += parameters.eastIndices.length * vertexStride;\r\n    addSkirt(vertexBuffer, vertexBufferIndex, northIndicesWestToEast, encoding, heights, uvs, octEncodedNormals, ellipsoid, rectangle, parameters.northSkirtHeight, exaggeration, southMercatorY, oneOverMercatorHeight, northLongitudeOffset, northLatitudeOffset);\r\n\r\n    TerrainProvider.addSkirtIndices(westIndicesSouthToNorth, southIndicesEastToWest, eastIndicesNorthToSouth, northIndicesWestToEast, quantizedVertexCount, indexBuffer, parameters.indices.length);\r\n\r\n    var physicalArray = CreatePhysicalArray.createPhysicalArrayFromTerrain(physical, lbSpaMgr, parameters.relativeToCenter, positions, parameters.indices);\r\n    transferableObjects.push(vertexBuffer.buffer, indexBuffer.buffer, physicalArray.buffer);\r\n\r\n    return {\r\n        vertices: vertexBuffer.buffer,\r\n        indices: indexBuffer.buffer,\r\n        westIndicesSouthToNorth: westIndicesSouthToNorth,\r\n        southIndicesEastToWest: southIndicesEastToWest,\r\n        eastIndicesNorthToSouth: eastIndicesNorthToSouth,\r\n        northIndicesWestToEast: northIndicesWestToEast,\r\n        vertexStride: vertexStride,\r\n        center: center,\r\n        minimumHeight: minimumHeight,\r\n        maximumHeight: maximumHeight,\r\n        boundingSphere: boundingSphere,\r\n        orientedBoundingBox: orientedBoundingBox,\r\n        occludeePointInScaledSpace: occludeePointInScaledSpace,\r\n        encoding: encoding,\r\n        indexCountWithoutSkirts: parameters.indices.length,\r\n        physicalArray: physicalArray\r\n    };\r\n}\r\n\r\nfunction findMinMaxSkirts(edgeIndices, edgeHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum) {\r\n    var hMin = Number.POSITIVE_INFINITY;\r\n\r\n    var north = rectangle.north;\r\n    var south = rectangle.south;\r\n    var east = rectangle.east;\r\n    var west = rectangle.west;\r\n\r\n    if (east < west) {\r\n        east += CesiumMath.TWO_PI;\r\n    }\r\n\r\n    var length = edgeIndices.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        var index = edgeIndices[i];\r\n        var h = heights[index];\r\n        var uv = uvs[index];\r\n\r\n        cartographicScratch.longitude = CesiumMath.lerp(west, east, uv.x);\r\n        cartographicScratch.latitude = CesiumMath.lerp(south, north, uv.y);\r\n        cartographicScratch.height = h - edgeHeight;\r\n\r\n        var position = ellipsoid.cartographicToCartesian(cartographicScratch, cartesian3Scratch);\r\n        Matrix4.multiplyByPoint(toENU, position, position);\r\n\r\n        Cartesian3.minimumByComponent(position, minimum, minimum);\r\n        Cartesian3.maximumByComponent(position, maximum, maximum);\r\n\r\n        hMin = Math.min(hMin, cartographicScratch.height);\r\n    }\r\n    return hMin;\r\n}\r\n\r\nfunction addSkirt(vertexBuffer, vertexBufferIndex, edgeVertices, encoding, heights, uvs, octEncodedNormals, ellipsoid, rectangle, skirtLength, exaggeration, southMercatorY, oneOverMercatorHeight, longitudeOffset, latitudeOffset) {\r\n    var hasVertexNormals = defined(octEncodedNormals);\r\n\r\n    var north = rectangle.north;\r\n    var south = rectangle.south;\r\n    var east = rectangle.east;\r\n    var west = rectangle.west;\r\n\r\n    if (east < west) {\r\n        east += CesiumMath.TWO_PI;\r\n    }\r\n\r\n    var length = edgeVertices.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        var index = edgeVertices[i];\r\n        var h = heights[index];\r\n        var uv = uvs[index];\r\n\r\n        cartographicScratch.longitude = CesiumMath.lerp(west, east, uv.x) + longitudeOffset;\r\n        cartographicScratch.latitude = CesiumMath.lerp(south, north, uv.y) + latitudeOffset;\r\n        cartographicScratch.height = h - skirtLength;\r\n\r\n        var position = ellipsoid.cartographicToCartesian(cartographicScratch, cartesian3Scratch);\r\n\r\n        if (hasVertexNormals) {\r\n            var n = index * 2.0;\r\n            toPack.x = octEncodedNormals[n];\r\n            toPack.y = octEncodedNormals[n + 1];\r\n\r\n            if (exaggeration !== 1.0) {\r\n                var normal = AttributeCompression.octDecode(toPack.x, toPack.y, scratchNormal);\r\n                var fromENUNormal = Transforms.eastNorthUpToFixedFrame(cartesian3Scratch, ellipsoid, scratchFromENU);\r\n                var toENUNormal = Matrix4.inverseTransformation(fromENUNormal, scratchToENU);\r\n\r\n                Matrix4.multiplyByPointAsVector(toENUNormal, normal, normal);\r\n                normal.z *= exaggeration;\r\n                Cartesian3.normalize(normal, normal);\r\n\r\n                Matrix4.multiplyByPointAsVector(fromENUNormal, normal, normal);\r\n                Cartesian3.normalize(normal, normal);\r\n\r\n                AttributeCompression.octEncode(normal, toPack);\r\n            }\r\n        }\r\n\r\n        var webMercatorT;\r\n        if (encoding.hasWebMercatorT) {\r\n            webMercatorT = (WebMercatorProjection.geodeticLatitudeToMercatorAngle(cartographicScratch.latitude) - southMercatorY) * oneOverMercatorHeight;\r\n        }\r\n\r\n        vertexBufferIndex = encoding.encode(vertexBuffer, vertexBufferIndex, position, uv, cartographicScratch.height, toPack, webMercatorT);\r\n    }\r\n}\r\n\r\nfunction copyAndSort(typedArray, comparator) {\r\n    var copy;\r\n    if (typeof typedArray.slice === 'function') {\r\n        copy = typedArray.slice();\r\n        if (typeof copy.sort !== 'function') {\r\n            // Sliced typed array isn't sortable, so we can't use it.\r\n            copy = undefined;\r\n        }\r\n    }\r\n\r\n    if (!defined(copy)) {\r\n        copy = Array.prototype.slice.call(typedArray);\r\n    }\r\n\r\n    copy.sort(comparator);\r\n\r\n    return copy;\r\n}\r\n\r\nfunction createVerticesFromQuantizedTerrainMesh(event) {\r\n    var data = event.data;\r\n    var wasmConfig = data.webAssemblyConfig;\r\n    if (defined(wasmConfig)) {\r\n        fetch(wasmConfig.wasmBinaryFileES6)\r\n            .then(response => response.arrayBuffer())\r\n            .then(function (bytes) {\r\n                var WebAssemblyType = {\r\n                    wasmBinary: bytes,\r\n                    onModuleLoaded: function (currentModule) {\r\n                        physical = currentModule;\r\n                        lbSpaMgr = new physical.LBSpaMgr();\r\n                        self.onmessage = createTaskProcessorWorker(createVertices);\r\n                        self.postMessage(true);\r\n                    }\r\n                };\r\n\r\n                materem(WebAssemblyType);\r\n            });\r\n    }\r\n}\r\n\r\nexport default createVerticesFromQuantizedTerrainMesh;\r\n"],"names":["Cartesian3","Cartographic","Cartesian2","Matrix4","Rectangle","Ellipsoid","Transforms","WebMercatorProjection","defined","CesiumMath","BoundingSphere","OrientedBoundingBox","EllipsoidalOccluder","AxisAlignedBoundingBox","TerrainEncoding","AttributeCompression","IndexDatatype","TerrainProvider","CreatePhysicalArray","materem"],"mappings":"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"}