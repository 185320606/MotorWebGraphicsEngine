{"version":3,"file":"decodeDraco.js","sources":["../../../../Source/WorkersES6/decodeDraco.js"],"sourcesContent":["/* global require */\r\nimport ComponentDatatype from '../Core/ComponentDatatype.js';\r\nimport defined from '../Core/defined.js';\r\nimport IndexDatatype from '../Core/IndexDatatype.js';\r\nimport RuntimeError from '../Core/RuntimeError.js';\r\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\r\n\r\n    var draco;\r\n\r\n    function decodeIndexArray(dracoGeometry, dracoDecoder) {\r\n        var numPoints = dracoGeometry.num_points();\r\n        var numFaces = dracoGeometry.num_faces();\r\n        var faceIndices = new draco.DracoInt32Array();\r\n        var numIndices = numFaces * 3;\r\n        var indexArray = IndexDatatype.createTypedArray(numPoints, numIndices);\r\n\r\n        var offset = 0;\r\n        for (var i = 0; i < numFaces; ++i) {\r\n            dracoDecoder.GetFaceFromMesh(dracoGeometry, i, faceIndices);\r\n\r\n            indexArray[offset + 0] = faceIndices.GetValue(0);\r\n            indexArray[offset + 1] = faceIndices.GetValue(1);\r\n            indexArray[offset + 2] = faceIndices.GetValue(2);\r\n            offset += 3;\r\n        }\r\n\r\n        draco.destroy(faceIndices);\r\n\r\n        return {\r\n            typedArray : indexArray,\r\n            numberOfIndices : numIndices\r\n        };\r\n    }\r\n\r\n    function decodeQuantizedDracoTypedArray(dracoGeometry, dracoDecoder, dracoAttribute, quantization, vertexArrayLength) {\r\n        var vertexArray;\r\n        var attributeData;\r\n        if (quantization.quantizationBits <= 8) {\r\n            attributeData = new draco.DracoUInt8Array();\r\n            vertexArray = new Uint8Array(vertexArrayLength);\r\n            dracoDecoder.GetAttributeUInt8ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n        } else {\r\n            attributeData = new draco.DracoUInt16Array();\r\n            vertexArray = new Uint16Array(vertexArrayLength);\r\n            dracoDecoder.GetAttributeUInt16ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n        }\r\n\r\n        for (var i = 0; i < vertexArrayLength; ++i) {\r\n            vertexArray[i] = attributeData.GetValue(i);\r\n        }\r\n\r\n        draco.destroy(attributeData);\r\n        return vertexArray;\r\n    }\r\n\r\n    function decodeDracoTypedArray(dracoGeometry, dracoDecoder, dracoAttribute, vertexArrayLength) {\r\n        var vertexArray;\r\n        var attributeData;\r\n\r\n        // Some attribute types are casted down to 32 bit since Draco only returns 32 bit values\r\n        switch (dracoAttribute.data_type()) {\r\n            case 1: case 11: // DT_INT8 or DT_BOOL\r\n                attributeData = new draco.DracoInt8Array();\r\n                vertexArray = new Int8Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeInt8ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n            case 2: // DT_UINT8\r\n                attributeData = new draco.DracoUInt8Array();\r\n                vertexArray = new Uint8Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeUInt8ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n            case 3: // DT_INT16\r\n                attributeData = new draco.DracoInt16Array();\r\n                vertexArray = new Int16Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeInt16ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n            case 4: // DT_UINT16\r\n                attributeData = new draco.DracoUInt16Array();\r\n                vertexArray = new Uint16Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeUInt16ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n            case 5: case 7: // DT_INT32 or DT_INT64\r\n                attributeData = new draco.DracoInt32Array();\r\n                vertexArray = new Int32Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeInt32ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n            case 6: case 8: // DT_UINT32 or DT_UINT64\r\n                attributeData = new draco.DracoUInt32Array();\r\n                vertexArray = new Uint32Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeUInt32ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n            case 9: case 10: // DT_FLOAT32 or DT_FLOAT64\r\n                attributeData = new draco.DracoFloat32Array();\r\n                vertexArray = new Float32Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeFloatForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n        }\r\n\r\n        for (var i = 0; i < vertexArrayLength; ++i) {\r\n            vertexArray[i] = attributeData.GetValue(i);\r\n        }\r\n\r\n        draco.destroy(attributeData);\r\n        return vertexArray;\r\n    }\r\n\r\n    function decodeAttribute(dracoGeometry, dracoDecoder, dracoAttribute) {\r\n        var numPoints = dracoGeometry.num_points();\r\n        var numComponents = dracoAttribute.num_components();\r\n\r\n        var quantization;\r\n        var transform = new draco.AttributeQuantizationTransform();\r\n        if (transform.InitFromAttribute(dracoAttribute)) {\r\n            var minValues = new Array(numComponents);\r\n            for (var i = 0; i < numComponents; ++i) {\r\n                minValues[i] = transform.min_value(i);\r\n            }\r\n            quantization = {\r\n                quantizationBits : transform.quantization_bits(),\r\n                minValues : minValues,\r\n                range : transform.range(),\r\n                octEncoded : false\r\n            };\r\n        }\r\n        draco.destroy(transform);\r\n\r\n        transform = new draco.AttributeOctahedronTransform();\r\n        if (transform.InitFromAttribute(dracoAttribute)) {\r\n            quantization = {\r\n                quantizationBits : transform.quantization_bits(),\r\n                octEncoded : true\r\n            };\r\n        }\r\n        draco.destroy(transform);\r\n\r\n        var vertexArrayLength = numPoints * numComponents;\r\n        var vertexArray;\r\n        if (defined(quantization)) {\r\n            vertexArray = decodeQuantizedDracoTypedArray(dracoGeometry, dracoDecoder, dracoAttribute, quantization, vertexArrayLength);\r\n        } else {\r\n            vertexArray = decodeDracoTypedArray(dracoGeometry, dracoDecoder, dracoAttribute, vertexArrayLength);\r\n        }\r\n\r\n        var componentDatatype = ComponentDatatype.fromTypedArray(vertexArray);\r\n\r\n        return {\r\n            array : vertexArray,\r\n            data : {\r\n                componentsPerAttribute : numComponents,\r\n                componentDatatype : componentDatatype,\r\n                byteOffset : dracoAttribute.byte_offset(),\r\n                byteStride : ComponentDatatype.getSizeInBytes(componentDatatype) * numComponents,\r\n                normalized : dracoAttribute.normalized(),\r\n                quantization : quantization\r\n            }\r\n        };\r\n    }\r\n\r\n    function decodePointCloud(parameters) {\r\n        var dracoDecoder = new draco.Decoder();\r\n\r\n        if (parameters.dequantizeInShader) {\r\n            dracoDecoder.SkipAttributeTransform(draco.POSITION);\r\n            dracoDecoder.SkipAttributeTransform(draco.NORMAL);\r\n        }\r\n\r\n        var buffer = new draco.DecoderBuffer();\r\n        buffer.Init(parameters.buffer, parameters.buffer.length);\r\n\r\n        var geometryType = dracoDecoder.GetEncodedGeometryType(buffer);\r\n        if (geometryType !== draco.POINT_CLOUD) {\r\n            throw new RuntimeError('Draco geometry type must be POINT_CLOUD.');\r\n        }\r\n\r\n        var dracoPointCloud = new draco.PointCloud();\r\n        var decodingStatus = dracoDecoder.DecodeBufferToPointCloud(buffer, dracoPointCloud);\r\n        if (!decodingStatus.ok() || dracoPointCloud.ptr === 0) {\r\n            throw new RuntimeError('Error decoding draco point cloud: ' + decodingStatus.error_msg());\r\n        }\r\n\r\n        draco.destroy(buffer);\r\n\r\n        var result = {};\r\n\r\n        var properties = parameters.properties;\r\n        for (var propertyName in properties) {\r\n            if (properties.hasOwnProperty(propertyName)) {\r\n                var attributeId = properties[propertyName];\r\n                var dracoAttribute = dracoDecoder.GetAttributeByUniqueId(dracoPointCloud, attributeId);\r\n                result[propertyName] = decodeAttribute(dracoPointCloud, dracoDecoder, dracoAttribute);\r\n            }\r\n        }\r\n\r\n        draco.destroy(dracoPointCloud);\r\n        draco.destroy(dracoDecoder);\r\n\r\n        return result;\r\n    }\r\n\r\n    function decodePrimitive(parameters) {\r\n        var dracoDecoder = new draco.Decoder();\r\n\r\n        // Skip all parameter types except generic\r\n        var attributesToSkip = ['POSITION', 'NORMAL', 'COLOR', 'TEX_COORD'];\r\n        if (parameters.dequantizeInShader) {\r\n            for (var i = 0; i < attributesToSkip.length; ++i) {\r\n                dracoDecoder.SkipAttributeTransform(draco[attributesToSkip[i]]);\r\n            }\r\n        }\r\n\r\n        var bufferView = parameters.bufferView;\r\n        var buffer = new draco.DecoderBuffer();\r\n        buffer.Init(parameters.array, bufferView.byteLength);\r\n\r\n        var geometryType = dracoDecoder.GetEncodedGeometryType(buffer);\r\n        if (geometryType !== draco.TRIANGULAR_MESH) {\r\n            throw new RuntimeError('Unsupported draco mesh geometry type.');\r\n        }\r\n\r\n        var dracoGeometry = new draco.Mesh();\r\n        var decodingStatus = dracoDecoder.DecodeBufferToMesh(buffer, dracoGeometry);\r\n        if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\r\n            throw new RuntimeError('Error decoding draco mesh geometry: ' + decodingStatus.error_msg());\r\n        }\r\n\r\n        draco.destroy(buffer);\r\n\r\n        var attributeData = {};\r\n\r\n        var compressedAttributes = parameters.compressedAttributes;\r\n        for (var attributeName in compressedAttributes) {\r\n            if (compressedAttributes.hasOwnProperty(attributeName)) {\r\n                var compressedAttribute = compressedAttributes[attributeName];\r\n                var dracoAttribute = dracoDecoder.GetAttributeByUniqueId(dracoGeometry, compressedAttribute);\r\n                attributeData[attributeName] = decodeAttribute(dracoGeometry, dracoDecoder, dracoAttribute);\r\n            }\r\n        }\r\n\r\n        var result = {\r\n            indexArray : decodeIndexArray(dracoGeometry, dracoDecoder),\r\n            attributeData : attributeData\r\n        };\r\n\r\n        draco.destroy(dracoGeometry);\r\n        draco.destroy(dracoDecoder);\r\n\r\n        return result;\r\n    }\r\n\r\n    function decode(parameters) {\r\n        if (defined(parameters.primitive)) {\r\n            return decodePrimitive(parameters);\r\n        }\r\n        return decodePointCloud(parameters);\r\n    }\r\n\r\n    function initWorker(dracoModule) {\r\n        draco = dracoModule;\r\n        self.onmessage = createTaskProcessorWorker(decode);\r\n        self.postMessage(true);\r\n    }\r\n\r\n    function decodeDraco(event) {\r\n        var data = event.data;\r\n\r\n        // Expect the first message to be to load a web assembly module\r\n        var wasmConfig = data.webAssemblyConfig;\r\n        if (defined(wasmConfig)) {\r\n            // Require and compile WebAssembly module, or use fallback if not supported\r\n            return require([wasmConfig.modulePath], function(dracoModule) {\r\n                if (defined(wasmConfig.wasmBinaryFile)) {\r\n                    if (!defined(dracoModule)) {\r\n                        dracoModule = self.DracoDecoderModule;\r\n                    }\r\n\r\n                    dracoModule(wasmConfig).then(function (compiledModule) {\r\n                        initWorker(compiledModule);\r\n                    });\r\n                } else {\r\n                    initWorker(dracoModule());\r\n                }\r\n            });\r\n        }\r\n    }\r\nexport default decodeDraco;\r\n"],"names":["draco","decodeIndexArray","dracoGeometry","dracoDecoder","numPoints","num_points","numFaces","num_faces","faceIndices","DracoInt32Array","numIndices","indexArray","IndexDatatype","createTypedArray","offset","i","GetFaceFromMesh","GetValue","destroy","typedArray","numberOfIndices","decodeAttribute","dracoAttribute","quantization","numComponents","num_components","transform","AttributeQuantizationTransform","InitFromAttribute","minValues","Array","min_value","quantizationBits","quantization_bits","range","octEncoded","AttributeOctahedronTransform","vertexArray","vertexArrayLength","defined","attributeData","DracoUInt8Array","Uint8Array","GetAttributeUInt8ForAllPoints","DracoUInt16Array","Uint16Array","GetAttributeUInt16ForAllPoints","decodeQuantizedDracoTypedArray","data_type","DracoInt8Array","Int8Array","GetAttributeInt8ForAllPoints","DracoInt16Array","Int16Array","GetAttributeInt16ForAllPoints","Int32Array","GetAttributeInt32ForAllPoints","DracoUInt32Array","Uint32Array","GetAttributeUInt32ForAllPoints","DracoFloat32Array","Float32Array","GetAttributeFloatForAllPoints","decodeDracoTypedArray","componentDatatype","ComponentDatatype","fromTypedArray","array","data","componentsPerAttribute","byteOffset","byte_offset","byteStride","getSizeInBytes","normalized","decode","parameters","primitive","Decoder","attributesToSkip","dequantizeInShader","length","SkipAttributeTransform","bufferView","buffer","DecoderBuffer","Init","byteLength","GetEncodedGeometryType","TRIANGULAR_MESH","RuntimeError","Mesh","decodingStatus","DecodeBufferToMesh","ok","ptr","error_msg","compressedAttributes","attributeName","hasOwnProperty","compressedAttribute","GetAttributeByUniqueId","result","decodePrimitive","POSITION","NORMAL","POINT_CLOUD","dracoPointCloud","PointCloud","DecodeBufferToPointCloud","properties","propertyName","attributeId","decodePointCloud","initWorker","dracoModule","self","onmessage","createTaskProcessorWorker","postMessage","event","wasmConfig","webAssemblyConfig","require","modulePath","wasmBinaryFile","DracoDecoderModule","then","compiledModule"],"mappings":"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"}