{"version":3,"file":"Matrix4-027dd006.js","sources":["../../../../Source/Core/Matrix3.js","../../../../Source/Core/Cartesian4.js","../../../../Source/Core/Matrix4.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\n\r\n    /**\r\n     * A 3x3 matrix, indexable as a column-major order array.\r\n     * Constructor parameters are in row-major order for code readability.\r\n     * @alias Matrix3\r\n     * @constructor\r\n     *\r\n     * @param {Number} [column0Row0=0.0] The value for column 0, row 0.\r\n     * @param {Number} [column1Row0=0.0] The value for column 1, row 0.\r\n     * @param {Number} [column2Row0=0.0] The value for column 2, row 0.\r\n     * @param {Number} [column0Row1=0.0] The value for column 0, row 1.\r\n     * @param {Number} [column1Row1=0.0] The value for column 1, row 1.\r\n     * @param {Number} [column2Row1=0.0] The value for column 2, row 1.\r\n     * @param {Number} [column0Row2=0.0] The value for column 0, row 2.\r\n     * @param {Number} [column1Row2=0.0] The value for column 1, row 2.\r\n     * @param {Number} [column2Row2=0.0] The value for column 2, row 2.\r\n     *\r\n     * @see Matrix3.fromColumnMajorArray\r\n     * @see Matrix3.fromRowMajorArray\r\n     * @see Matrix3.fromQuaternion\r\n     * @see Matrix3.fromScale\r\n     * @see Matrix3.fromUniformScale\r\n     * @see Matrix2\r\n     * @see Matrix4\r\n     */\r\n    function Matrix3(column0Row0, column1Row0, column2Row0,\r\n                           column0Row1, column1Row1, column2Row1,\r\n                           column0Row2, column1Row2, column2Row2) {\r\n        this[0] = defaultValue(column0Row0, 0.0);\r\n        this[1] = defaultValue(column0Row1, 0.0);\r\n        this[2] = defaultValue(column0Row2, 0.0);\r\n        this[3] = defaultValue(column1Row0, 0.0);\r\n        this[4] = defaultValue(column1Row1, 0.0);\r\n        this[5] = defaultValue(column1Row2, 0.0);\r\n        this[6] = defaultValue(column2Row0, 0.0);\r\n        this[7] = defaultValue(column2Row1, 0.0);\r\n        this[8] = defaultValue(column2Row2, 0.0);\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Matrix3.packedLength = 9;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Matrix3} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Matrix3.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value[0];\r\n        array[startingIndex++] = value[1];\r\n        array[startingIndex++] = value[2];\r\n        array[startingIndex++] = value[3];\r\n        array[startingIndex++] = value[4];\r\n        array[startingIndex++] = value[5];\r\n        array[startingIndex++] = value[6];\r\n        array[startingIndex++] = value[7];\r\n        array[startingIndex++] = value[8];\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Matrix3} [result] The object into which to store the result.\r\n     * @returns {Matrix3} The modified result parameter or a new Matrix3 instance if one was not provided.\r\n     */\r\n    Matrix3.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Matrix3();\r\n        }\r\n\r\n        result[0] = array[startingIndex++];\r\n        result[1] = array[startingIndex++];\r\n        result[2] = array[startingIndex++];\r\n        result[3] = array[startingIndex++];\r\n        result[4] = array[startingIndex++];\r\n        result[5] = array[startingIndex++];\r\n        result[6] = array[startingIndex++];\r\n        result[7] = array[startingIndex++];\r\n        result[8] = array[startingIndex++];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Matrix3 instance.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to duplicate.\r\n     * @param {Matrix3} [result] The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter or a new Matrix3 instance if one was not provided. (Returns undefined if matrix is undefined)\r\n     */\r\n    Matrix3.clone = function(matrix, result) {\r\n        if (!defined(matrix)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            return new Matrix3(matrix[0], matrix[3], matrix[6],\r\n                               matrix[1], matrix[4], matrix[7],\r\n                               matrix[2], matrix[5], matrix[8]);\r\n        }\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n        result[4] = matrix[4];\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[6];\r\n        result[7] = matrix[7];\r\n        result[8] = matrix[8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix3 from 9 consecutive elements in an array.\r\n     *\r\n     * @param {Number[]} array The array whose 9 consecutive elements correspond to the positions of the matrix.  Assumes column-major order.\r\n     * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to first column first row position in the matrix.\r\n     * @param {Matrix3} [result] The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Create the Matrix3:\r\n     * // [1.0, 2.0, 3.0]\r\n     * // [1.0, 2.0, 3.0]\r\n     * // [1.0, 2.0, 3.0]\r\n     *\r\n     * var v = [1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0];\r\n     * var m = Cesium.Matrix3.fromArray(v);\r\n     *\r\n     * // Create same Matrix3 with using an offset into an array\r\n     * var v2 = [0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0];\r\n     * var m2 = Cesium.Matrix3.fromArray(v2, 2);\r\n     */\r\n    Matrix3.fromArray = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Matrix3();\r\n        }\r\n\r\n        result[0] = array[startingIndex];\r\n        result[1] = array[startingIndex + 1];\r\n        result[2] = array[startingIndex + 2];\r\n        result[3] = array[startingIndex + 3];\r\n        result[4] = array[startingIndex + 4];\r\n        result[5] = array[startingIndex + 5];\r\n        result[6] = array[startingIndex + 6];\r\n        result[7] = array[startingIndex + 7];\r\n        result[8] = array[startingIndex + 8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix3 instance from a column-major order array.\r\n     *\r\n     * @param {Number[]} values The column-major order array.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     */\r\n    Matrix3.fromColumnMajorArray = function(values, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('values', values);\r\n        //>>includeEnd('debug');\r\n\r\n        return Matrix3.clone(values, result);\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix3 instance from a row-major order array.\r\n     * The resulting matrix will be in column-major order.\r\n     *\r\n     * @param {Number[]} values The row-major order array.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     */\r\n    Matrix3.fromRowMajorArray = function(values, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('values', values);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(values[0], values[1], values[2],\r\n                               values[3], values[4], values[5],\r\n                               values[6], values[7], values[8]);\r\n        }\r\n        result[0] = values[0];\r\n        result[1] = values[3];\r\n        result[2] = values[6];\r\n        result[3] = values[1];\r\n        result[4] = values[4];\r\n        result[5] = values[7];\r\n        result[6] = values[2];\r\n        result[7] = values[5];\r\n        result[8] = values[8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a 3x3 rotation matrix from the provided quaternion.\r\n     *\r\n     * @param {Quaternion} quaternion the quaternion to use.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The 3x3 rotation matrix from this quaternion.\r\n     */\r\n    Matrix3.fromQuaternion = function(quaternion, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('quaternion', quaternion);\r\n        //>>includeEnd('debug');\r\n\r\n        var x2 = quaternion.x * quaternion.x;\r\n        var xy = quaternion.x * quaternion.y;\r\n        var xz = quaternion.x * quaternion.z;\r\n        var xw = quaternion.x * quaternion.w;\r\n        var y2 = quaternion.y * quaternion.y;\r\n        var yz = quaternion.y * quaternion.z;\r\n        var yw = quaternion.y * quaternion.w;\r\n        var z2 = quaternion.z * quaternion.z;\r\n        var zw = quaternion.z * quaternion.w;\r\n        var w2 = quaternion.w * quaternion.w;\r\n\r\n        var m00 = x2 - y2 - z2 + w2;\r\n        var m01 = 2.0 * (xy - zw);\r\n        var m02 = 2.0 * (xz + yw);\r\n\r\n        var m10 = 2.0 * (xy + zw);\r\n        var m11 = -x2 + y2 - z2 + w2;\r\n        var m12 = 2.0 * (yz - xw);\r\n\r\n        var m20 = 2.0 * (xz - yw);\r\n        var m21 = 2.0 * (yz + xw);\r\n        var m22 = -x2 - y2 + z2 + w2;\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(m00, m01, m02,\r\n                               m10, m11, m12,\r\n                               m20, m21, m22);\r\n        }\r\n        result[0] = m00;\r\n        result[1] = m10;\r\n        result[2] = m20;\r\n        result[3] = m01;\r\n        result[4] = m11;\r\n        result[5] = m21;\r\n        result[6] = m02;\r\n        result[7] = m12;\r\n        result[8] = m22;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a 3x3 rotation matrix from the provided headingPitchRoll. (see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles )\r\n     *\r\n     * @param {HeadingPitchRoll} headingPitchRoll the headingPitchRoll to use.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The 3x3 rotation matrix from this headingPitchRoll.\r\n     */\r\n    Matrix3.fromHeadingPitchRoll = function(headingPitchRoll, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('headingPitchRoll', headingPitchRoll);\r\n        //>>includeEnd('debug');\r\n\r\n        var cosTheta = Math.cos(-headingPitchRoll.pitch);\r\n        var cosPsi = Math.cos(-headingPitchRoll.heading);\r\n        var cosPhi = Math.cos(headingPitchRoll.roll);\r\n        var sinTheta = Math.sin(-headingPitchRoll.pitch);\r\n        var sinPsi = Math.sin(-headingPitchRoll.heading);\r\n        var sinPhi = Math.sin(headingPitchRoll.roll);\r\n\r\n        var m00 = cosTheta * cosPsi;\r\n        var m01 = -cosPhi * sinPsi + sinPhi * sinTheta * cosPsi;\r\n        var m02 = sinPhi * sinPsi + cosPhi * sinTheta * cosPsi;\r\n\r\n        var m10 = cosTheta * sinPsi;\r\n        var m11 = cosPhi * cosPsi + sinPhi * sinTheta * sinPsi;\r\n        var m12 = -sinPhi * cosPsi + cosPhi * sinTheta * sinPsi;\r\n\r\n        var m20 = -sinTheta;\r\n        var m21 = sinPhi * cosTheta;\r\n        var m22 = cosPhi * cosTheta;\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(m00, m01, m02,\r\n                m10, m11, m12,\r\n                m20, m21, m22);\r\n        }\r\n        result[0] = m00;\r\n        result[1] = m10;\r\n        result[2] = m20;\r\n        result[3] = m01;\r\n        result[4] = m11;\r\n        result[5] = m21;\r\n        result[6] = m02;\r\n        result[7] = m12;\r\n        result[8] = m22;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix3 instance representing a non-uniform scale.\r\n     *\r\n     * @param {Cartesian3} scale The x, y, and z scale factors.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Creates\r\n     * //   [7.0, 0.0, 0.0]\r\n     * //   [0.0, 8.0, 0.0]\r\n     * //   [0.0, 0.0, 9.0]\r\n     * var m = Cesium.Matrix3.fromScale(new Cesium.Cartesian3(7.0, 8.0, 9.0));\r\n     */\r\n    Matrix3.fromScale = function(scale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('scale', scale);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(\r\n                scale.x, 0.0,     0.0,\r\n                0.0,     scale.y, 0.0,\r\n                0.0,     0.0,     scale.z);\r\n        }\r\n\r\n        result[0] = scale.x;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = scale.y;\r\n        result[5] = 0.0;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = scale.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix3 instance representing a uniform scale.\r\n     *\r\n     * @param {Number} scale The uniform scale factor.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Creates\r\n     * //   [2.0, 0.0, 0.0]\r\n     * //   [0.0, 2.0, 0.0]\r\n     * //   [0.0, 0.0, 2.0]\r\n     * var m = Cesium.Matrix3.fromUniformScale(2.0);\r\n     */\r\n    Matrix3.fromUniformScale = function(scale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('scale', scale);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(\r\n                scale, 0.0,   0.0,\r\n                0.0,   scale, 0.0,\r\n                0.0,   0.0,   scale);\r\n        }\r\n\r\n        result[0] = scale;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = scale;\r\n        result[5] = 0.0;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = scale;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix3 instance representing the cross product equivalent matrix of a Cartesian3 vector.\r\n     *\r\n     * @param {Cartesian3} vector the vector on the left hand side of the cross product operation.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Creates\r\n     * //   [0.0, -9.0,  8.0]\r\n     * //   [9.0,  0.0, -7.0]\r\n     * //   [-8.0, 7.0,  0.0]\r\n     * var m = Cesium.Matrix3.fromCrossProduct(new Cesium.Cartesian3(7.0, 8.0, 9.0));\r\n     */\r\n    Matrix3.fromCrossProduct = function(vector, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('vector', vector);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(\r\n                      0.0, -vector.z,  vector.y,\r\n                 vector.z,       0.0, -vector.x,\r\n                -vector.y,  vector.x,       0.0);\r\n        }\r\n\r\n        result[0] = 0.0;\r\n        result[1] = vector.z;\r\n        result[2] = -vector.y;\r\n        result[3] = -vector.z;\r\n        result[4] = 0.0;\r\n        result[5] = vector.x;\r\n        result[6] = vector.y;\r\n        result[7] = -vector.x;\r\n        result[8] = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a rotation matrix around the x-axis.\r\n     *\r\n     * @param {Number} angle The angle, in radians, of the rotation.  Positive angles are counterclockwise.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Rotate a point 45 degrees counterclockwise around the x-axis.\r\n     * var p = new Cesium.Cartesian3(5, 6, 7);\r\n     * var m = Cesium.Matrix3.fromRotationX(Cesium.Math.toRadians(45.0));\r\n     * var rotated = Cesium.Matrix3.multiplyByVector(m, p, new Cesium.Cartesian3());\r\n     */\r\n    Matrix3.fromRotationX = function(angle, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('angle', angle);\r\n        //>>includeEnd('debug');\r\n\r\n        var cosAngle = Math.cos(angle);\r\n        var sinAngle = Math.sin(angle);\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(\r\n                1.0, 0.0, 0.0,\r\n                0.0, cosAngle, -sinAngle,\r\n                0.0, sinAngle, cosAngle);\r\n        }\r\n\r\n        result[0] = 1.0;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = cosAngle;\r\n        result[5] = sinAngle;\r\n        result[6] = 0.0;\r\n        result[7] = -sinAngle;\r\n        result[8] = cosAngle;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a rotation matrix around the y-axis.\r\n     *\r\n     * @param {Number} angle The angle, in radians, of the rotation.  Positive angles are counterclockwise.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Rotate a point 45 degrees counterclockwise around the y-axis.\r\n     * var p = new Cesium.Cartesian3(5, 6, 7);\r\n     * var m = Cesium.Matrix3.fromRotationY(Cesium.Math.toRadians(45.0));\r\n     * var rotated = Cesium.Matrix3.multiplyByVector(m, p, new Cesium.Cartesian3());\r\n     */\r\n    Matrix3.fromRotationY = function(angle, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('angle', angle);\r\n        //>>includeEnd('debug');\r\n\r\n        var cosAngle = Math.cos(angle);\r\n        var sinAngle = Math.sin(angle);\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(\r\n                cosAngle, 0.0, sinAngle,\r\n                0.0, 1.0, 0.0,\r\n                -sinAngle, 0.0, cosAngle);\r\n        }\r\n\r\n        result[0] = cosAngle;\r\n        result[1] = 0.0;\r\n        result[2] = -sinAngle;\r\n        result[3] = 0.0;\r\n        result[4] = 1.0;\r\n        result[5] = 0.0;\r\n        result[6] = sinAngle;\r\n        result[7] = 0.0;\r\n        result[8] = cosAngle;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a rotation matrix around the z-axis.\r\n     *\r\n     * @param {Number} angle The angle, in radians, of the rotation.  Positive angles are counterclockwise.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Rotate a point 45 degrees counterclockwise around the z-axis.\r\n     * var p = new Cesium.Cartesian3(5, 6, 7);\r\n     * var m = Cesium.Matrix3.fromRotationZ(Cesium.Math.toRadians(45.0));\r\n     * var rotated = Cesium.Matrix3.multiplyByVector(m, p, new Cesium.Cartesian3());\r\n     */\r\n    Matrix3.fromRotationZ = function(angle, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('angle', angle);\r\n        //>>includeEnd('debug');\r\n\r\n        var cosAngle = Math.cos(angle);\r\n        var sinAngle = Math.sin(angle);\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(\r\n                cosAngle, -sinAngle, 0.0,\r\n                sinAngle, cosAngle, 0.0,\r\n                0.0, 0.0, 1.0);\r\n        }\r\n\r\n        result[0] = cosAngle;\r\n        result[1] = sinAngle;\r\n        result[2] = 0.0;\r\n        result[3] = -sinAngle;\r\n        result[4] = cosAngle;\r\n        result[5] = 0.0;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 1.0;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates an Array from the provided Matrix3 instance.\r\n     * The array will be in column-major order.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to use..\r\n     * @param {Number[]} [result] The Array onto which to store the result.\r\n     * @returns {Number[]} The modified Array parameter or a new Array instance if one was not provided.\r\n     */\r\n    Matrix3.toArray = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return [matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5], matrix[6], matrix[7], matrix[8]];\r\n        }\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n        result[4] = matrix[4];\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[6];\r\n        result[7] = matrix[7];\r\n        result[8] = matrix[8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the array index of the element at the provided row and column.\r\n     *\r\n     * @param {Number} row The zero-based index of the row.\r\n     * @param {Number} column The zero-based index of the column.\r\n     * @returns {Number} The index of the element at the provided row and column.\r\n     *\r\n     * @exception {DeveloperError} row must be 0, 1, or 2.\r\n     * @exception {DeveloperError} column must be 0, 1, or 2.\r\n     *\r\n     * @example\r\n     * var myMatrix = new Cesium.Matrix3();\r\n     * var column1Row0Index = Cesium.Matrix3.getElementIndex(1, 0);\r\n     * var column1Row0 = myMatrix[column1Row0Index]\r\n     * myMatrix[column1Row0Index] = 10.0;\r\n     */\r\n    Matrix3.getElementIndex = function(column, row) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number.greaterThanOrEquals('row', row, 0);\r\n        Check.typeOf.number.lessThanOrEquals('row', row, 2);\r\n        Check.typeOf.number.greaterThanOrEquals('column', column, 0);\r\n        Check.typeOf.number.lessThanOrEquals('column', column, 2);\r\n        //>>includeEnd('debug');\r\n\r\n        return column * 3 + row;\r\n    };\r\n\r\n    /**\r\n     * Retrieves a copy of the matrix column at the provided index as a Cartesian3 instance.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the column to retrieve.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, or 2.\r\n     */\r\n    Matrix3.getColumn = function(matrix, index, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.number.greaterThanOrEquals('index', index, 0);\r\n        Check.typeOf.number.lessThanOrEquals('index', index, 2);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var startIndex = index * 3;\r\n        var x = matrix[startIndex];\r\n        var y = matrix[startIndex + 1];\r\n        var z = matrix[startIndex + 2];\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a new matrix that replaces the specified column in the provided matrix with the provided Cartesian3 instance.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the column to set.\r\n     * @param {Cartesian3} cartesian The Cartesian whose values will be assigned to the specified column.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, or 2.\r\n     */\r\n    Matrix3.setColumn = function(matrix, index, cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.number.greaterThanOrEquals('index', index, 0);\r\n        Check.typeOf.number.lessThanOrEquals('index', index, 2);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result = Matrix3.clone(matrix, result);\r\n        var startIndex = index * 3;\r\n        result[startIndex] = cartesian.x;\r\n        result[startIndex + 1] = cartesian.y;\r\n        result[startIndex + 2] = cartesian.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Retrieves a copy of the matrix row at the provided index as a Cartesian3 instance.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the row to retrieve.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, or 2.\r\n     */\r\n    Matrix3.getRow = function(matrix, index, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.number.greaterThanOrEquals('index', index, 0);\r\n        Check.typeOf.number.lessThanOrEquals('index', index, 2);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var x = matrix[index];\r\n        var y = matrix[index + 3];\r\n        var z = matrix[index + 6];\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a new matrix that replaces the specified row in the provided matrix with the provided Cartesian3 instance.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the row to set.\r\n     * @param {Cartesian3} cartesian The Cartesian whose values will be assigned to the specified row.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, or 2.\r\n     */\r\n    Matrix3.setRow = function(matrix, index, cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.number.greaterThanOrEquals('index', index, 0);\r\n        Check.typeOf.number.lessThanOrEquals('index', index, 2);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result = Matrix3.clone(matrix, result);\r\n        result[index] = cartesian.x;\r\n        result[index + 3] = cartesian.y;\r\n        result[index + 6] = cartesian.z;\r\n        return result;\r\n    };\r\n\r\n    var scratchColumn = new Cartesian3();\r\n\r\n    /**\r\n     * Extracts the non-uniform scale assuming the matrix is an affine transformation.\r\n     *\r\n     * @param {Matrix3} matrix The matrix.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Matrix3.getScale = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = Cartesian3.magnitude(Cartesian3.fromElements(matrix[0], matrix[1], matrix[2], scratchColumn));\r\n        result.y = Cartesian3.magnitude(Cartesian3.fromElements(matrix[3], matrix[4], matrix[5], scratchColumn));\r\n        result.z = Cartesian3.magnitude(Cartesian3.fromElements(matrix[6], matrix[7], matrix[8], scratchColumn));\r\n        return result;\r\n    };\r\n\r\n    var scratchScale = new Cartesian3();\r\n\r\n    /**\r\n     * Computes the maximum scale assuming the matrix is an affine transformation.\r\n     * The maximum scale is the maximum length of the column vectors.\r\n     *\r\n     * @param {Matrix3} matrix The matrix.\r\n     * @returns {Number} The maximum scale.\r\n     */\r\n    Matrix3.getMaximumScale = function(matrix) {\r\n        Matrix3.getScale(matrix, scratchScale);\r\n        return Cartesian3.maximumComponent(scratchScale);\r\n    };\r\n\r\n    /**\r\n     * Computes the product of two matrices.\r\n     *\r\n     * @param {Matrix3} left The first matrix.\r\n     * @param {Matrix3} right The second matrix.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.multiply = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var column0Row0 = left[0] * right[0] + left[3] * right[1] + left[6] * right[2];\r\n        var column0Row1 = left[1] * right[0] + left[4] * right[1] + left[7] * right[2];\r\n        var column0Row2 = left[2] * right[0] + left[5] * right[1] + left[8] * right[2];\r\n\r\n        var column1Row0 = left[0] * right[3] + left[3] * right[4] + left[6] * right[5];\r\n        var column1Row1 = left[1] * right[3] + left[4] * right[4] + left[7] * right[5];\r\n        var column1Row2 = left[2] * right[3] + left[5] * right[4] + left[8] * right[5];\r\n\r\n        var column2Row0 = left[0] * right[6] + left[3] * right[7] + left[6] * right[8];\r\n        var column2Row1 = left[1] * right[6] + left[4] * right[7] + left[7] * right[8];\r\n        var column2Row2 = left[2] * right[6] + left[5] * right[7] + left[8] * right[8];\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = column0Row1;\r\n        result[2] = column0Row2;\r\n        result[3] = column1Row0;\r\n        result[4] = column1Row1;\r\n        result[5] = column1Row2;\r\n        result[6] = column2Row0;\r\n        result[7] = column2Row1;\r\n        result[8] = column2Row2;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the sum of two matrices.\r\n     *\r\n     * @param {Matrix3} left The first matrix.\r\n     * @param {Matrix3} right The second matrix.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.add = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = left[0] + right[0];\r\n        result[1] = left[1] + right[1];\r\n        result[2] = left[2] + right[2];\r\n        result[3] = left[3] + right[3];\r\n        result[4] = left[4] + right[4];\r\n        result[5] = left[5] + right[5];\r\n        result[6] = left[6] + right[6];\r\n        result[7] = left[7] + right[7];\r\n        result[8] = left[8] + right[8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the difference of two matrices.\r\n     *\r\n     * @param {Matrix3} left The first matrix.\r\n     * @param {Matrix3} right The second matrix.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.subtract = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = left[0] - right[0];\r\n        result[1] = left[1] - right[1];\r\n        result[2] = left[2] - right[2];\r\n        result[3] = left[3] - right[3];\r\n        result[4] = left[4] - right[4];\r\n        result[5] = left[5] - right[5];\r\n        result[6] = left[6] - right[6];\r\n        result[7] = left[7] - right[7];\r\n        result[8] = left[8] - right[8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a column vector.\r\n     *\r\n     * @param {Matrix3} matrix The matrix.\r\n     * @param {Cartesian3} cartesian The column.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Matrix3.multiplyByVector = function(matrix, cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var vX = cartesian.x;\r\n        var vY = cartesian.y;\r\n        var vZ = cartesian.z;\r\n\r\n        var x = matrix[0] * vX + matrix[3] * vY + matrix[6] * vZ;\r\n        var y = matrix[1] * vX + matrix[4] * vY + matrix[7] * vZ;\r\n        var z = matrix[2] * vX + matrix[5] * vY + matrix[8] * vZ;\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a scalar.\r\n     *\r\n     * @param {Matrix3} matrix The matrix.\r\n     * @param {Number} scalar The number to multiply by.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.multiplyByScalar = function(matrix, scalar, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.number('scalar', scalar);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = matrix[0] * scalar;\r\n        result[1] = matrix[1] * scalar;\r\n        result[2] = matrix[2] * scalar;\r\n        result[3] = matrix[3] * scalar;\r\n        result[4] = matrix[4] * scalar;\r\n        result[5] = matrix[5] * scalar;\r\n        result[6] = matrix[6] * scalar;\r\n        result[7] = matrix[7] * scalar;\r\n        result[8] = matrix[8] * scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix times a (non-uniform) scale, as if the scale were a scale matrix.\r\n     *\r\n     * @param {Matrix3} matrix The matrix on the left-hand side.\r\n     * @param {Cartesian3} scale The non-uniform scale on the right-hand side.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     *\r\n     *\r\n     * @example\r\n     * // Instead of Cesium.Matrix3.multiply(m, Cesium.Matrix3.fromScale(scale), m);\r\n     * Cesium.Matrix3.multiplyByScale(m, scale, m);\r\n     *\r\n     * @see Matrix3.fromScale\r\n     * @see Matrix3.multiplyByUniformScale\r\n     */\r\n    Matrix3.multiplyByScale = function(matrix, scale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('scale', scale);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = matrix[0] * scale.x;\r\n        result[1] = matrix[1] * scale.x;\r\n        result[2] = matrix[2] * scale.x;\r\n        result[3] = matrix[3] * scale.y;\r\n        result[4] = matrix[4] * scale.y;\r\n        result[5] = matrix[5] * scale.y;\r\n        result[6] = matrix[6] * scale.z;\r\n        result[7] = matrix[7] * scale.z;\r\n        result[8] = matrix[8] * scale.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a negated copy of the provided matrix.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to negate.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.negate = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = -matrix[0];\r\n        result[1] = -matrix[1];\r\n        result[2] = -matrix[2];\r\n        result[3] = -matrix[3];\r\n        result[4] = -matrix[4];\r\n        result[5] = -matrix[5];\r\n        result[6] = -matrix[6];\r\n        result[7] = -matrix[7];\r\n        result[8] = -matrix[8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the transpose of the provided matrix.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to transpose.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.transpose = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var column0Row0 = matrix[0];\r\n        var column0Row1 = matrix[3];\r\n        var column0Row2 = matrix[6];\r\n        var column1Row0 = matrix[1];\r\n        var column1Row1 = matrix[4];\r\n        var column1Row2 = matrix[7];\r\n        var column2Row0 = matrix[2];\r\n        var column2Row1 = matrix[5];\r\n        var column2Row2 = matrix[8];\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = column0Row1;\r\n        result[2] = column0Row2;\r\n        result[3] = column1Row0;\r\n        result[4] = column1Row1;\r\n        result[5] = column1Row2;\r\n        result[6] = column2Row0;\r\n        result[7] = column2Row1;\r\n        result[8] = column2Row2;\r\n        return result;\r\n    };\r\n\r\n    var UNIT = new Cartesian3(1, 1, 1);\r\n\r\n    /**\r\n     * Extracts the rotation assuming the matrix is an affine transformation.\r\n     *\r\n     * @param {Matrix3} matrix The matrix.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter\r\n     */\r\n    Matrix3.getRotation = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var inverseScale = Cartesian3.divideComponents(UNIT, Matrix3.getScale(matrix, scratchScale), scratchScale);\r\n        result = Matrix3.multiplyByScale(matrix, inverseScale, result);\r\n\r\n        return result;\r\n    };\r\n\r\n    function computeFrobeniusNorm(matrix) {\r\n        var norm = 0.0;\r\n        for (var i = 0; i < 9; ++i) {\r\n            var temp = matrix[i];\r\n            norm += temp * temp;\r\n        }\r\n\r\n        return Math.sqrt(norm);\r\n    }\r\n\r\n    var rowVal = [1, 0, 0];\r\n    var colVal = [2, 2, 1];\r\n\r\n    function offDiagonalFrobeniusNorm(matrix) {\r\n        // Computes the \"off-diagonal\" Frobenius norm.\r\n        // Assumes matrix is symmetric.\r\n\r\n        var norm = 0.0;\r\n        for (var i = 0; i < 3; ++i) {\r\n            var temp = matrix[Matrix3.getElementIndex(colVal[i], rowVal[i])];\r\n            norm += 2.0 * temp * temp;\r\n        }\r\n\r\n        return Math.sqrt(norm);\r\n    }\r\n\r\n    function shurDecomposition(matrix, result) {\r\n        // This routine was created based upon Matrix Computations, 3rd ed., by Golub and Van Loan,\r\n        // section 8.4.2 The 2by2 Symmetric Schur Decomposition.\r\n        //\r\n        // The routine takes a matrix, which is assumed to be symmetric, and\r\n        // finds the largest off-diagonal term, and then creates\r\n        // a matrix (result) which can be used to help reduce it\r\n\r\n        var tolerance = CesiumMath.EPSILON15;\r\n\r\n        var maxDiagonal = 0.0;\r\n        var rotAxis = 1;\r\n\r\n        // find pivot (rotAxis) based on max diagonal of matrix\r\n        for (var i = 0; i < 3; ++i) {\r\n            var temp = Math.abs(matrix[Matrix3.getElementIndex(colVal[i], rowVal[i])]);\r\n            if (temp > maxDiagonal) {\r\n                rotAxis = i;\r\n                maxDiagonal = temp;\r\n            }\r\n        }\r\n\r\n        var c = 1.0;\r\n        var s = 0.0;\r\n\r\n        var p = rowVal[rotAxis];\r\n        var q = colVal[rotAxis];\r\n\r\n        if (Math.abs(matrix[Matrix3.getElementIndex(q, p)]) > tolerance) {\r\n            var qq = matrix[Matrix3.getElementIndex(q, q)];\r\n            var pp = matrix[Matrix3.getElementIndex(p, p)];\r\n            var qp = matrix[Matrix3.getElementIndex(q, p)];\r\n\r\n            var tau = (qq - pp) / 2.0 / qp;\r\n            var t;\r\n\r\n            if (tau < 0.0) {\r\n                t = -1.0 / (-tau + Math.sqrt(1.0 + tau * tau));\r\n            } else {\r\n                t = 1.0 / (tau + Math.sqrt(1.0 + tau * tau));\r\n            }\r\n\r\n            c = 1.0 / Math.sqrt(1.0 + t * t);\r\n            s = t * c;\r\n        }\r\n\r\n        result = Matrix3.clone(Matrix3.IDENTITY, result);\r\n\r\n        result[Matrix3.getElementIndex(p, p)] = result[Matrix3.getElementIndex(q, q)] = c;\r\n        result[Matrix3.getElementIndex(q, p)] = s;\r\n        result[Matrix3.getElementIndex(p, q)] = -s;\r\n\r\n        return result;\r\n    }\r\n\r\n    var jMatrix = new Matrix3();\r\n    var jMatrixTranspose = new Matrix3();\r\n\r\n    /**\r\n     * Computes the eigenvectors and eigenvalues of a symmetric matrix.\r\n     * <p>\r\n     * Returns a diagonal matrix and unitary matrix such that:\r\n     * <code>matrix = unitary matrix * diagonal matrix * transpose(unitary matrix)</code>\r\n     * </p>\r\n     * <p>\r\n     * The values along the diagonal of the diagonal matrix are the eigenvalues. The columns\r\n     * of the unitary matrix are the corresponding eigenvectors.\r\n     * </p>\r\n     *\r\n     * @param {Matrix3} matrix The matrix to decompose into diagonal and unitary matrix. Expected to be symmetric.\r\n     * @param {Object} [result] An object with unitary and diagonal properties which are matrices onto which to store the result.\r\n     * @returns {Object} An object with unitary and diagonal properties which are the unitary and diagonal matrices, respectively.\r\n     *\r\n     * @example\r\n     * var a = //... symetric matrix\r\n     * var result = {\r\n     *     unitary : new Cesium.Matrix3(),\r\n     *     diagonal : new Cesium.Matrix3()\r\n     * };\r\n     * Cesium.Matrix3.computeEigenDecomposition(a, result);\r\n     *\r\n     * var unitaryTranspose = Cesium.Matrix3.transpose(result.unitary, new Cesium.Matrix3());\r\n     * var b = Cesium.Matrix3.multiply(result.unitary, result.diagonal, new Cesium.Matrix3());\r\n     * Cesium.Matrix3.multiply(b, unitaryTranspose, b); // b is now equal to a\r\n     *\r\n     * var lambda = Cesium.Matrix3.getColumn(result.diagonal, 0, new Cesium.Cartesian3()).x;  // first eigenvalue\r\n     * var v = Cesium.Matrix3.getColumn(result.unitary, 0, new Cesium.Cartesian3());          // first eigenvector\r\n     * var c = Cesium.Cartesian3.multiplyByScalar(v, lambda, new Cesium.Cartesian3());        // equal to Cesium.Matrix3.multiplyByVector(a, v)\r\n     */\r\n    Matrix3.computeEigenDecomposition = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        //>>includeEnd('debug');\r\n\r\n        // This routine was created based upon Matrix Computations, 3rd ed., by Golub and Van Loan,\r\n        // section 8.4.3 The Classical Jacobi Algorithm\r\n\r\n        var tolerance = CesiumMath.EPSILON20;\r\n        var maxSweeps = 10;\r\n\r\n        var count = 0;\r\n        var sweep = 0;\r\n\r\n        if (!defined(result)) {\r\n            result = {};\r\n        }\r\n\r\n        var unitaryMatrix = result.unitary = Matrix3.clone(Matrix3.IDENTITY, result.unitary);\r\n        var diagMatrix = result.diagonal = Matrix3.clone(matrix, result.diagonal);\r\n\r\n        var epsilon = tolerance * computeFrobeniusNorm(diagMatrix);\r\n\r\n        while (sweep < maxSweeps && offDiagonalFrobeniusNorm(diagMatrix) > epsilon) {\r\n            shurDecomposition(diagMatrix, jMatrix);\r\n            Matrix3.transpose(jMatrix, jMatrixTranspose);\r\n            Matrix3.multiply(diagMatrix, jMatrix, diagMatrix);\r\n            Matrix3.multiply(jMatrixTranspose, diagMatrix, diagMatrix);\r\n            Matrix3.multiply(unitaryMatrix, jMatrix, unitaryMatrix);\r\n\r\n            if (++count > 2) {\r\n                ++sweep;\r\n                count = 0;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a matrix, which contains the absolute (unsigned) values of the provided matrix's elements.\r\n     *\r\n     * @param {Matrix3} matrix The matrix with signed elements.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.abs = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = Math.abs(matrix[0]);\r\n        result[1] = Math.abs(matrix[1]);\r\n        result[2] = Math.abs(matrix[2]);\r\n        result[3] = Math.abs(matrix[3]);\r\n        result[4] = Math.abs(matrix[4]);\r\n        result[5] = Math.abs(matrix[5]);\r\n        result[6] = Math.abs(matrix[6]);\r\n        result[7] = Math.abs(matrix[7]);\r\n        result[8] = Math.abs(matrix[8]);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the determinant of the provided matrix.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to use.\r\n     * @returns {Number} The value of the determinant of the matrix.\r\n     */\r\n    Matrix3.determinant = function(matrix) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        //>>includeEnd('debug');\r\n\r\n        var m11 = matrix[0];\r\n        var m21 = matrix[3];\r\n        var m31 = matrix[6];\r\n        var m12 = matrix[1];\r\n        var m22 = matrix[4];\r\n        var m32 = matrix[7];\r\n        var m13 = matrix[2];\r\n        var m23 = matrix[5];\r\n        var m33 = matrix[8];\r\n\r\n        return m11 * (m22 * m33 - m23 * m32) + m12 * (m23 * m31 - m21 * m33) + m13 * (m21 * m32 - m22 * m31);\r\n    };\r\n\r\n    /**\r\n     * Computes the inverse of the provided matrix.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to invert.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} matrix is not invertible.\r\n     */\r\n    Matrix3.inverse = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var m11 = matrix[0];\r\n        var m21 = matrix[1];\r\n        var m31 = matrix[2];\r\n        var m12 = matrix[3];\r\n        var m22 = matrix[4];\r\n        var m32 = matrix[5];\r\n        var m13 = matrix[6];\r\n        var m23 = matrix[7];\r\n        var m33 = matrix[8];\r\n\r\n        var determinant = Matrix3.determinant(matrix);\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (Math.abs(determinant) <= CesiumMath.EPSILON15) {\r\n            throw new DeveloperError('matrix is not invertible');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = m22 * m33 - m23 * m32;\r\n        result[1] = m23 * m31 - m21 * m33;\r\n        result[2] = m21 * m32 - m22 * m31;\r\n        result[3] = m13 * m32 - m12 * m33;\r\n        result[4] = m11 * m33 - m13 * m31;\r\n        result[5] = m12 * m31 - m11 * m32;\r\n        result[6] = m12 * m23 - m13 * m22;\r\n        result[7] = m13 * m21 - m11 * m23;\r\n        result[8] = m11 * m22 - m12 * m21;\r\n\r\n       var scale = 1.0 / determinant;\r\n       return Matrix3.multiplyByScalar(result, scale, result);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided matrices componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix3} [left] The first matrix.\r\n     * @param {Matrix3} [right] The second matrix.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Matrix3.equals = function(left, right) {\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                left[0] === right[0] &&\r\n                left[1] === right[1] &&\r\n                left[2] === right[2] &&\r\n                left[3] === right[3] &&\r\n                left[4] === right[4] &&\r\n                left[5] === right[5] &&\r\n                left[6] === right[6] &&\r\n                left[7] === right[7] &&\r\n                left[8] === right[8]);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided matrices componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix3} [left] The first matrix.\r\n     * @param {Matrix3} [right] The second matrix.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Matrix3.equalsEpsilon = function(left, right, epsilon) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('epsilon', epsilon);\r\n        //>>includeEnd('debug');\r\n\r\n        return (left === right) ||\r\n                (defined(left) &&\r\n                defined(right) &&\r\n                Math.abs(left[0] - right[0]) <= epsilon &&\r\n                Math.abs(left[1] - right[1]) <= epsilon &&\r\n                Math.abs(left[2] - right[2]) <= epsilon &&\r\n                Math.abs(left[3] - right[3]) <= epsilon &&\r\n                Math.abs(left[4] - right[4]) <= epsilon &&\r\n                Math.abs(left[5] - right[5]) <= epsilon &&\r\n                Math.abs(left[6] - right[6]) <= epsilon &&\r\n                Math.abs(left[7] - right[7]) <= epsilon &&\r\n                Math.abs(left[8] - right[8]) <= epsilon);\r\n    };\r\n\r\n    /**\r\n     * An immutable Matrix3 instance initialized to the identity matrix.\r\n     *\r\n     * @type {Matrix3}\r\n     * @constant\r\n     */\r\n    Matrix3.IDENTITY = Object.freeze(new Matrix3(1.0, 0.0, 0.0,\r\n                                                0.0, 1.0, 0.0,\r\n                                                0.0, 0.0, 1.0));\r\n\r\n    /**\r\n     * An immutable Matrix3 instance initialized to the zero matrix.\r\n     *\r\n     * @type {Matrix3}\r\n     * @constant\r\n     */\r\n    Matrix3.ZERO = Object.freeze(new Matrix3(0.0, 0.0, 0.0,\r\n                                            0.0, 0.0, 0.0,\r\n                                            0.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * The index into Matrix3 for column 0, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN0ROW0 = 0;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 0, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN0ROW1 = 1;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 0, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN0ROW2 = 2;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 1, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN1ROW0 = 3;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 1, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN1ROW1 = 4;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 1, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN1ROW2 = 5;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 2, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN2ROW0 = 6;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 2, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN2ROW1 = 7;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 2, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN2ROW2 = 8;\r\n\r\n    Object.defineProperties(Matrix3.prototype, {\r\n        /**\r\n         * Gets the number of items in the collection.\r\n         * @memberof Matrix3.prototype\r\n         *\r\n         * @type {Number}\r\n         */\r\n        length : {\r\n            get : function() {\r\n                return Matrix3.packedLength;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Duplicates the provided Matrix3 instance.\r\n     *\r\n     * @param {Matrix3} [result] The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter or a new Matrix3 instance if one was not provided.\r\n     */\r\n    Matrix3.prototype.clone = function(result) {\r\n        return Matrix3.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this matrix to the provided matrix componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix3} [right] The right hand side matrix.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    Matrix3.prototype.equals = function(right) {\r\n        return Matrix3.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Matrix3.equalsArray = function(matrix, array, offset) {\r\n        return matrix[0] === array[offset] &&\r\n               matrix[1] === array[offset + 1] &&\r\n               matrix[2] === array[offset + 2] &&\r\n               matrix[3] === array[offset + 3] &&\r\n               matrix[4] === array[offset + 4] &&\r\n               matrix[5] === array[offset + 5] &&\r\n               matrix[6] === array[offset + 6] &&\r\n               matrix[7] === array[offset + 7] &&\r\n               matrix[8] === array[offset + 8];\r\n    };\r\n\r\n    /**\r\n     * Compares this matrix to the provided matrix componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix3} [right] The right hand side matrix.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Matrix3.prototype.equalsEpsilon = function(right, epsilon) {\r\n        return Matrix3.equalsEpsilon(this, right, epsilon);\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this Matrix with each row being\r\n     * on a separate line and in the format '(column0, column1, column2)'.\r\n     *\r\n     * @returns {String} A string representing the provided Matrix with each row being on a separate line and in the format '(column0, column1, column2)'.\r\n     */\r\n    Matrix3.prototype.toString = function() {\r\n        return '(' + this[0] + ', ' + this[3] + ', ' + this[6] + ')\\n' +\r\n               '(' + this[1] + ', ' + this[4] + ', ' + this[7] + ')\\n' +\r\n               '(' + this[2] + ', ' + this[5] + ', ' + this[8] + ')';\r\n    };\r\nexport default Matrix3;\r\n","import Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\n\r\n    /**\r\n     * A 4D Cartesian point.\r\n     * @alias Cartesian4\r\n     * @constructor\r\n     *\r\n     * @param {Number} [x=0.0] The X component.\r\n     * @param {Number} [y=0.0] The Y component.\r\n     * @param {Number} [z=0.0] The Z component.\r\n     * @param {Number} [w=0.0] The W component.\r\n     *\r\n     * @see Cartesian2\r\n     * @see Cartesian3\r\n     * @see Packable\r\n     */\r\n    function Cartesian4(x, y, z, w) {\r\n        /**\r\n         * The X component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.x = defaultValue(x, 0.0);\r\n\r\n        /**\r\n         * The Y component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.y = defaultValue(y, 0.0);\r\n\r\n        /**\r\n         * The Z component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.z = defaultValue(z, 0.0);\r\n\r\n        /**\r\n         * The W component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.w = defaultValue(w, 0.0);\r\n    }\r\n\r\n    /**\r\n     * Creates a Cartesian4 instance from x, y, z and w coordinates.\r\n     *\r\n     * @param {Number} x The x coordinate.\r\n     * @param {Number} y The y coordinate.\r\n     * @param {Number} z The z coordinate.\r\n     * @param {Number} w The w coordinate.\r\n     * @param {Cartesian4} [result] The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided.\r\n     */\r\n    Cartesian4.fromElements = function(x, y, z, w, result) {\r\n        if (!defined(result)) {\r\n            return new Cartesian4(x, y, z, w);\r\n        }\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        result.w = w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Cartesian4 instance from a {@link Color}. <code>red</code>, <code>green</code>, <code>blue</code>,\r\n     * and <code>alpha</code> map to <code>x</code>, <code>y</code>, <code>z</code>, and <code>w</code>, respectively.\r\n     *\r\n     * @param {Color} color The source color.\r\n     * @param {Cartesian4} [result] The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided.\r\n     */\r\n    Cartesian4.fromColor = function(color, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('color', color);\r\n        //>>includeEnd('debug');\r\n        if (!defined(result)) {\r\n            return new Cartesian4(color.red, color.green, color.blue, color.alpha);\r\n        }\r\n\r\n        result.x = color.red;\r\n        result.y = color.green;\r\n        result.z = color.blue;\r\n        result.w = color.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Cartesian4 instance.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian to duplicate.\r\n     * @param {Cartesian4} [result] The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided. (Returns undefined if cartesian is undefined)\r\n     */\r\n    Cartesian4.clone = function(cartesian, result) {\r\n        if (!defined(cartesian)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Cartesian4(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\r\n        }\r\n\r\n        result.x = cartesian.x;\r\n        result.y = cartesian.y;\r\n        result.z = cartesian.z;\r\n        result.w = cartesian.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Cartesian4.packedLength = 4;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Cartesian4} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Cartesian4.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value.x;\r\n        array[startingIndex++] = value.y;\r\n        array[startingIndex++] = value.z;\r\n        array[startingIndex] = value.w;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Cartesian4} [result] The object into which to store the result.\r\n     * @returns {Cartesian4}  The modified result parameter or a new Cartesian4 instance if one was not provided.\r\n     */\r\n    Cartesian4.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian4();\r\n        }\r\n        result.x = array[startingIndex++];\r\n        result.y = array[startingIndex++];\r\n        result.z = array[startingIndex++];\r\n        result.w = array[startingIndex];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Flattens an array of Cartesian4s into and array of components.\r\n     *\r\n     * @param {Cartesian4[]} array The array of cartesians to pack.\r\n     * @param {Number[]} [result] The array onto which to store the result. If this is a typed array, it must have array.length * 4 components, else a {@link DeveloperError} will be thrown. If it is a regular array, it will be resized to have (array.length * 4) elements.\r\n\r\n     * @returns {Number[]} The packed array.\r\n     */\r\n    Cartesian4.packArray = function(array, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        var length = array.length;\r\n        var resultLength = length * 4;\r\n        if (!defined(result)) {\r\n            result = new Array(resultLength);\r\n        } else if (!Array.isArray(result) && result.length !== resultLength) {\r\n            throw new DeveloperError('If result is a typed array, it must have exactly array.length * 4 elements');\r\n        } else if (result.length !== resultLength) {\r\n            result.length = resultLength;\r\n        }\r\n\r\n        for (var i = 0; i < length; ++i) {\r\n            Cartesian4.pack(array[i], result, i * 4);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Unpacks an array of cartesian components into and array of Cartesian4s.\r\n     *\r\n     * @param {Number[]} array The array of components to unpack.\r\n     * @param {Cartesian4[]} [result] The array onto which to store the result.\r\n     * @returns {Cartesian4[]} The unpacked array.\r\n     */\r\n    Cartesian4.unpackArray = function(array, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        Check.typeOf.number.greaterThanOrEquals('array.length', array.length, 4);\r\n        if (array.length % 4 !== 0) {\r\n            throw new DeveloperError('array length must be a multiple of 4.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var length = array.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length / 4);\r\n        } else {\r\n            result.length = length / 4;\r\n        }\r\n\r\n        for (var i = 0; i < length; i += 4) {\r\n            var index = i / 4;\r\n            result[index] = Cartesian4.unpack(array, i, result[index]);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Cartesian4 from four consecutive elements in an array.\r\n     * @function\r\n     *\r\n     * @param {Number[]} array The array whose four consecutive elements correspond to the x, y, z, and w components, respectively.\r\n     * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to the x component.\r\n     * @param {Cartesian4} [result] The object onto which to store the result.\r\n     * @returns {Cartesian4}  The modified result parameter or a new Cartesian4 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Create a Cartesian4 with (1.0, 2.0, 3.0, 4.0)\r\n     * var v = [1.0, 2.0, 3.0, 4.0];\r\n     * var p = Cesium.Cartesian4.fromArray(v);\r\n     *\r\n     * // Create a Cartesian4 with (1.0, 2.0, 3.0, 4.0) using an offset into an array\r\n     * var v2 = [0.0, 0.0, 1.0, 2.0, 3.0, 4.0];\r\n     * var p2 = Cesium.Cartesian4.fromArray(v2, 2);\r\n     */\r\n    Cartesian4.fromArray = Cartesian4.unpack;\r\n\r\n    /**\r\n     * Computes the value of the maximum component for the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian4} cartesian The cartesian to use.\r\n     * @returns {Number} The value of the maximum component.\r\n     */\r\n    Cartesian4.maximumComponent = function(cartesian) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        //>>includeEnd('debug');\r\n\r\n        return Math.max(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\r\n    };\r\n\r\n    /**\r\n     * Computes the value of the minimum component for the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian4} cartesian The cartesian to use.\r\n     * @returns {Number} The value of the minimum component.\r\n     */\r\n    Cartesian4.minimumComponent = function(cartesian) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        //>>includeEnd('debug');\r\n\r\n        return Math.min(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\r\n    };\r\n\r\n    /**\r\n     * Compares two Cartesians and computes a Cartesian which contains the minimum components of the supplied Cartesians.\r\n     *\r\n     * @param {Cartesian4} first A cartesian to compare.\r\n     * @param {Cartesian4} second A cartesian to compare.\r\n     * @param {Cartesian4} result The object into which to store the result.\r\n     * @returns {Cartesian4} A cartesian with the minimum components.\r\n     */\r\n    Cartesian4.minimumByComponent = function(first, second, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('first', first);\r\n        Check.typeOf.object('second', second);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = Math.min(first.x, second.x);\r\n        result.y = Math.min(first.y, second.y);\r\n        result.z = Math.min(first.z, second.z);\r\n        result.w = Math.min(first.w, second.w);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares two Cartesians and computes a Cartesian which contains the maximum components of the supplied Cartesians.\r\n     *\r\n     * @param {Cartesian4} first A cartesian to compare.\r\n     * @param {Cartesian4} second A cartesian to compare.\r\n     * @param {Cartesian4} result The object into which to store the result.\r\n     * @returns {Cartesian4} A cartesian with the maximum components.\r\n     */\r\n    Cartesian4.maximumByComponent = function(first, second, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('first', first);\r\n        Check.typeOf.object('second', second);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = Math.max(first.x, second.x);\r\n        result.y = Math.max(first.y, second.y);\r\n        result.z = Math.max(first.z, second.z);\r\n        result.w = Math.max(first.w, second.w);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the provided Cartesian's squared magnitude.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian instance whose squared magnitude is to be computed.\r\n     * @returns {Number} The squared magnitude.\r\n     */\r\n    Cartesian4.magnitudeSquared = function(cartesian) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        //>>includeEnd('debug');\r\n\r\n        return cartesian.x * cartesian.x + cartesian.y * cartesian.y + cartesian.z * cartesian.z + cartesian.w * cartesian.w;\r\n    };\r\n\r\n    /**\r\n     * Computes the Cartesian's magnitude (length).\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian instance whose magnitude is to be computed.\r\n     * @returns {Number} The magnitude.\r\n     */\r\n    Cartesian4.magnitude = function(cartesian) {\r\n        return Math.sqrt(Cartesian4.magnitudeSquared(cartesian));\r\n    };\r\n\r\n    var distanceScratch = new Cartesian4();\r\n\r\n    /**\r\n     * Computes the 4-space distance between two points.\r\n     *\r\n     * @param {Cartesian4} left The first point to compute the distance from.\r\n     * @param {Cartesian4} right The second point to compute the distance to.\r\n     * @returns {Number} The distance between two points.\r\n     *\r\n     * @example\r\n     * // Returns 1.0\r\n     * var d = Cesium.Cartesian4.distance(\r\n     *   new Cesium.Cartesian4(1.0, 0.0, 0.0, 0.0),\r\n     *   new Cesium.Cartesian4(2.0, 0.0, 0.0, 0.0));\r\n     */\r\n    Cartesian4.distance = function(left, right) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        //>>includeEnd('debug');\r\n\r\n        Cartesian4.subtract(left, right, distanceScratch);\r\n        return Cartesian4.magnitude(distanceScratch);\r\n    };\r\n\r\n    /**\r\n     * Computes the squared distance between two points.  Comparing squared distances\r\n     * using this function is more efficient than comparing distances using {@link Cartesian4#distance}.\r\n     *\r\n     * @param {Cartesian4} left The first point to compute the distance from.\r\n     * @param {Cartesian4} right The second point to compute the distance to.\r\n     * @returns {Number} The distance between two points.\r\n     *\r\n     * @example\r\n     * // Returns 4.0, not 2.0\r\n     * var d = Cesium.Cartesian4.distance(\r\n     *   new Cesium.Cartesian4(1.0, 0.0, 0.0, 0.0),\r\n     *   new Cesium.Cartesian4(3.0, 0.0, 0.0, 0.0));\r\n     */\r\n    Cartesian4.distanceSquared = function(left, right) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        //>>includeEnd('debug');\r\n\r\n        Cartesian4.subtract(left, right, distanceScratch);\r\n        return Cartesian4.magnitudeSquared(distanceScratch);\r\n    };\r\n\r\n    /**\r\n     * Computes the normalized form of the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian to be normalized.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.normalize = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var magnitude = Cartesian4.magnitude(cartesian);\r\n\r\n        result.x = cartesian.x / magnitude;\r\n        result.y = cartesian.y / magnitude;\r\n        result.z = cartesian.z / magnitude;\r\n        result.w = cartesian.w / magnitude;\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (isNaN(result.x) || isNaN(result.y) || isNaN(result.z) || isNaN(result.w)) {\r\n            throw new DeveloperError('normalized result is not a number');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the dot (scalar) product of two Cartesians.\r\n     *\r\n     * @param {Cartesian4} left The first Cartesian.\r\n     * @param {Cartesian4} right The second Cartesian.\r\n     * @returns {Number} The dot product.\r\n     */\r\n    Cartesian4.dot = function(left, right) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        //>>includeEnd('debug');\r\n\r\n        return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise product of two Cartesians.\r\n     *\r\n     * @param {Cartesian4} left The first Cartesian.\r\n     * @param {Cartesian4} right The second Cartesian.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.multiplyComponents = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = left.x * right.x;\r\n        result.y = left.y * right.y;\r\n        result.z = left.z * right.z;\r\n        result.w = left.w * right.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise quotient of two Cartesians.\r\n     *\r\n     * @param {Cartesian4} left The first Cartesian.\r\n     * @param {Cartesian4} right The second Cartesian.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.divideComponents = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = left.x / right.x;\r\n        result.y = left.y / right.y;\r\n        result.z = left.z / right.z;\r\n        result.w = left.w / right.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise sum of two Cartesians.\r\n     *\r\n     * @param {Cartesian4} left The first Cartesian.\r\n     * @param {Cartesian4} right The second Cartesian.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.add = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = left.x + right.x;\r\n        result.y = left.y + right.y;\r\n        result.z = left.z + right.z;\r\n        result.w = left.w + right.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise difference of two Cartesians.\r\n     *\r\n     * @param {Cartesian4} left The first Cartesian.\r\n     * @param {Cartesian4} right The second Cartesian.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.subtract = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = left.x - right.x;\r\n        result.y = left.y - right.y;\r\n        result.z = left.z - right.z;\r\n        result.w = left.w - right.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Multiplies the provided Cartesian componentwise by the provided scalar.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian to be scaled.\r\n     * @param {Number} scalar The scalar to multiply with.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.multiplyByScalar = function(cartesian, scalar, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.number('scalar', scalar);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = cartesian.x * scalar;\r\n        result.y = cartesian.y * scalar;\r\n        result.z = cartesian.z * scalar;\r\n        result.w = cartesian.w * scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Divides the provided Cartesian componentwise by the provided scalar.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian to be divided.\r\n     * @param {Number} scalar The scalar to divide by.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.divideByScalar = function(cartesian, scalar, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.number('scalar', scalar);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = cartesian.x / scalar;\r\n        result.y = cartesian.y / scalar;\r\n        result.z = cartesian.z / scalar;\r\n        result.w = cartesian.w / scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Negates the provided Cartesian.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian to be negated.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.negate = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = -cartesian.x;\r\n        result.y = -cartesian.y;\r\n        result.z = -cartesian.z;\r\n        result.w = -cartesian.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the absolute value of the provided Cartesian.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian whose absolute value is to be computed.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.abs = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = Math.abs(cartesian.x);\r\n        result.y = Math.abs(cartesian.y);\r\n        result.z = Math.abs(cartesian.z);\r\n        result.w = Math.abs(cartesian.w);\r\n        return result;\r\n    };\r\n\r\n    var lerpScratch = new Cartesian4();\r\n    /**\r\n     * Computes the linear interpolation or extrapolation at t using the provided cartesians.\r\n     *\r\n     * @param {Cartesian4} start The value corresponding to t at 0.0.\r\n     * @param {Cartesian4}end The value corresponding to t at 1.0.\r\n     * @param {Number} t The point along t at which to interpolate.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.lerp = function(start, end, t, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('start', start);\r\n        Check.typeOf.object('end', end);\r\n        Check.typeOf.number('t', t);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        Cartesian4.multiplyByScalar(end, t, lerpScratch);\r\n        result = Cartesian4.multiplyByScalar(start, 1.0 - t, result);\r\n        return Cartesian4.add(lerpScratch, result, result);\r\n    };\r\n\r\n    var mostOrthogonalAxisScratch = new Cartesian4();\r\n    /**\r\n     * Returns the axis that is most orthogonal to the provided Cartesian.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian on which to find the most orthogonal axis.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The most orthogonal axis.\r\n     */\r\n    Cartesian4.mostOrthogonalAxis = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var f = Cartesian4.normalize(cartesian, mostOrthogonalAxisScratch);\r\n        Cartesian4.abs(f, f);\r\n\r\n        if (f.x <= f.y) {\r\n            if (f.x <= f.z) {\r\n                if (f.x <= f.w) {\r\n                    result = Cartesian4.clone(Cartesian4.UNIT_X, result);\r\n                } else {\r\n                    result = Cartesian4.clone(Cartesian4.UNIT_W, result);\r\n                }\r\n            } else if (f.z <= f.w) {\r\n                result = Cartesian4.clone(Cartesian4.UNIT_Z, result);\r\n            } else {\r\n                result = Cartesian4.clone(Cartesian4.UNIT_W, result);\r\n            }\r\n        } else if (f.y <= f.z) {\r\n            if (f.y <= f.w) {\r\n                result = Cartesian4.clone(Cartesian4.UNIT_Y, result);\r\n            } else {\r\n                result = Cartesian4.clone(Cartesian4.UNIT_W, result);\r\n            }\r\n        } else if (f.z <= f.w) {\r\n            result = Cartesian4.clone(Cartesian4.UNIT_Z, result);\r\n        } else {\r\n            result = Cartesian4.clone(Cartesian4.UNIT_W, result);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Cartesians componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian4} [left] The first Cartesian.\r\n     * @param {Cartesian4} [right] The second Cartesian.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Cartesian4.equals = function(left, right) {\r\n        return (left === right) ||\r\n               ((defined(left)) &&\r\n                (defined(right)) &&\r\n                (left.x === right.x) &&\r\n                (left.y === right.y) &&\r\n                (left.z === right.z) &&\r\n                (left.w === right.w));\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Cartesian4.equalsArray = function(cartesian, array, offset) {\r\n        return cartesian.x === array[offset] &&\r\n               cartesian.y === array[offset + 1] &&\r\n               cartesian.z === array[offset + 2] &&\r\n               cartesian.w === array[offset + 3];\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Cartesians componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian4} [left] The first Cartesian.\r\n     * @param {Cartesian4} [right] The second Cartesian.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Cartesian4.equalsEpsilon = function(left, right, relativeEpsilon, absoluteEpsilon) {\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                CesiumMath.equalsEpsilon(left.x, right.x, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(left.y, right.y, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(left.z, right.z, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(left.w, right.w, relativeEpsilon, absoluteEpsilon));\r\n    };\r\n\r\n    /**\r\n     * An immutable Cartesian4 instance initialized to (0.0, 0.0, 0.0, 0.0).\r\n     *\r\n     * @type {Cartesian4}\r\n     * @constant\r\n     */\r\n    Cartesian4.ZERO = Object.freeze(new Cartesian4(0.0, 0.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian4 instance initialized to (1.0, 0.0, 0.0, 0.0).\r\n     *\r\n     * @type {Cartesian4}\r\n     * @constant\r\n     */\r\n    Cartesian4.UNIT_X = Object.freeze(new Cartesian4(1.0, 0.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian4 instance initialized to (0.0, 1.0, 0.0, 0.0).\r\n     *\r\n     * @type {Cartesian4}\r\n     * @constant\r\n     */\r\n    Cartesian4.UNIT_Y = Object.freeze(new Cartesian4(0.0, 1.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian4 instance initialized to (0.0, 0.0, 1.0, 0.0).\r\n     *\r\n     * @type {Cartesian4}\r\n     * @constant\r\n     */\r\n    Cartesian4.UNIT_Z = Object.freeze(new Cartesian4(0.0, 0.0, 1.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian4 instance initialized to (0.0, 0.0, 0.0, 1.0).\r\n     *\r\n     * @type {Cartesian4}\r\n     * @constant\r\n     */\r\n    Cartesian4.UNIT_W = Object.freeze(new Cartesian4(0.0, 0.0, 0.0, 1.0));\r\n\r\n    /**\r\n     * Duplicates this Cartesian4 instance.\r\n     *\r\n     * @param {Cartesian4} [result] The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided.\r\n     */\r\n    Cartesian4.prototype.clone = function(result) {\r\n        return Cartesian4.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this Cartesian against the provided Cartesian componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian4} [right] The right hand side Cartesian.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    Cartesian4.prototype.equals = function(right) {\r\n        return Cartesian4.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * Compares this Cartesian against the provided Cartesian componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian4} [right] The right hand side Cartesian.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Cartesian4.prototype.equalsEpsilon = function(right, relativeEpsilon, absoluteEpsilon) {\r\n        return Cartesian4.equalsEpsilon(this, right, relativeEpsilon, absoluteEpsilon);\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this Cartesian in the format '(x, y, z, w)'.\r\n     *\r\n     * @returns {String} A string representing the provided Cartesian in the format '(x, y, z, w)'.\r\n     */\r\n    Cartesian4.prototype.toString = function() {\r\n        return '(' + this.x + ', ' + this.y + ', ' + this.z + ', ' + this.w + ')';\r\n    };\r\n\r\n    var scratchFloatArray = new Float32Array(1);\r\n    var SHIFT_LEFT_8 = 256.0;\r\n    var SHIFT_LEFT_16 = 65536.0;\r\n    var SHIFT_LEFT_24 = 16777216.0;\r\n\r\n    var SHIFT_RIGHT_8 = 1.0 / SHIFT_LEFT_8;\r\n    var SHIFT_RIGHT_16 = 1.0 / SHIFT_LEFT_16;\r\n    var SHIFT_RIGHT_24 = 1.0 / SHIFT_LEFT_24;\r\n\r\n    var BIAS = 38.0;\r\n\r\n    /**\r\n     * Packs an arbitrary floating point value to 4 values representable using uint8.\r\n     *\r\n     * @param {Number} value A floating point number\r\n     * @param {Cartesian4} [result] The Cartesian4 that will contain the packed float.\r\n     * @returns {Cartesian4} A Cartesian4 representing the float packed to values in x, y, z, and w.\r\n     */\r\n    Cartesian4.packFloat = function(value, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('value', value);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian4();\r\n        }\r\n\r\n        // Force the value to 32 bit precision\r\n        scratchFloatArray[0] = value;\r\n        value = scratchFloatArray[0];\r\n\r\n        if (value === 0.0) {\r\n            return Cartesian4.clone(Cartesian4.ZERO, result);\r\n        }\r\n\r\n        var sign = value < 0.0 ? 1.0 : 0.0;\r\n        var exponent;\r\n\r\n        if (!isFinite(value)) {\r\n            value = 0.1;\r\n            exponent = BIAS;\r\n        } else {\r\n            value = Math.abs(value);\r\n            exponent = Math.floor(CesiumMath.logBase(value, 10)) + 1.0;\r\n            value = value / Math.pow(10.0, exponent);\r\n        }\r\n\r\n        var temp = value * SHIFT_LEFT_8;\r\n        result.x = Math.floor(temp);\r\n        temp = (temp - result.x) * SHIFT_LEFT_8;\r\n        result.y = Math.floor(temp);\r\n        temp = (temp - result.y) * SHIFT_LEFT_8;\r\n        result.z = Math.floor(temp);\r\n        result.w = (exponent + BIAS) * 2.0 + sign;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Unpacks a float packed using Cartesian4.packFloat.\r\n     *\r\n     * @param {Cartesian4} packedFloat A Cartesian4 containing a float packed to 4 values representable using uint8.\r\n     * @returns {Number} The unpacked float.\r\n     * @private\r\n     */\r\n    Cartesian4.unpackFloat = function(packedFloat) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('packedFloat', packedFloat);\r\n        //>>includeEnd('debug');\r\n\r\n        var temp = packedFloat.w / 2.0;\r\n        var exponent = Math.floor(temp);\r\n        var sign = (temp - exponent) * 2.0;\r\n        exponent = exponent - BIAS;\r\n\r\n        sign = sign * 2.0 - 1.0;\r\n        sign = -sign;\r\n\r\n        if (exponent >= BIAS) {\r\n            return sign < 0.0 ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\r\n        }\r\n\r\n        var unpacked = sign * packedFloat.x * SHIFT_RIGHT_8;\r\n        unpacked += sign * packedFloat.y * SHIFT_RIGHT_16;\r\n        unpacked += sign * packedFloat.z * SHIFT_RIGHT_24;\r\n\r\n        return unpacked * Math.pow(10.0, exponent);\r\n    };\r\nexport default Cartesian4;\r\n","import Cartesian3 from './Cartesian3.js';\r\nimport Cartesian4 from './Cartesian4.js';\r\nimport Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix3 from './Matrix3.js';\r\nimport RuntimeError from './RuntimeError.js';\r\n\r\n    /**\r\n     * A 4x4 matrix, indexable as a column-major order array.\r\n     * Constructor parameters are in row-major order for code readability.\r\n     * @alias Matrix4\r\n     * @constructor\r\n     *\r\n     * @param {Number} [column0Row0=0.0] The value for column 0, row 0.\r\n     * @param {Number} [column1Row0=0.0] The value for column 1, row 0.\r\n     * @param {Number} [column2Row0=0.0] The value for column 2, row 0.\r\n     * @param {Number} [column3Row0=0.0] The value for column 3, row 0.\r\n     * @param {Number} [column0Row1=0.0] The value for column 0, row 1.\r\n     * @param {Number} [column1Row1=0.0] The value for column 1, row 1.\r\n     * @param {Number} [column2Row1=0.0] The value for column 2, row 1.\r\n     * @param {Number} [column3Row1=0.0] The value for column 3, row 1.\r\n     * @param {Number} [column0Row2=0.0] The value for column 0, row 2.\r\n     * @param {Number} [column1Row2=0.0] The value for column 1, row 2.\r\n     * @param {Number} [column2Row2=0.0] The value for column 2, row 2.\r\n     * @param {Number} [column3Row2=0.0] The value for column 3, row 2.\r\n     * @param {Number} [column0Row3=0.0] The value for column 0, row 3.\r\n     * @param {Number} [column1Row3=0.0] The value for column 1, row 3.\r\n     * @param {Number} [column2Row3=0.0] The value for column 2, row 3.\r\n     * @param {Number} [column3Row3=0.0] The value for column 3, row 3.\r\n     *\r\n     * @see Matrix4.fromColumnMajorArray\r\n     * @see Matrix4.fromRowMajorArray\r\n     * @see Matrix4.fromRotationTranslation\r\n     * @see Matrix4.fromTranslationRotationScale\r\n     * @see Matrix4.fromTranslationQuaternionRotationScale\r\n     * @see Matrix4.fromTranslation\r\n     * @see Matrix4.fromScale\r\n     * @see Matrix4.fromUniformScale\r\n     * @see Matrix4.fromCamera\r\n     * @see Matrix4.computePerspectiveFieldOfView\r\n     * @see Matrix4.computeOrthographicOffCenter\r\n     * @see Matrix4.computePerspectiveOffCenter\r\n     * @see Matrix4.computeInfinitePerspectiveOffCenter\r\n     * @see Matrix4.computeViewportTransformation\r\n     * @see Matrix4.computeView\r\n     * @see Matrix2\r\n     * @see Matrix3\r\n     * @see Packable\r\n     */\r\n    function Matrix4(column0Row0, column1Row0, column2Row0, column3Row0,\r\n                     column0Row1, column1Row1, column2Row1, column3Row1,\r\n                     column0Row2, column1Row2, column2Row2, column3Row2,\r\n                     column0Row3, column1Row3, column2Row3, column3Row3) {\r\n        this[0] = defaultValue(column0Row0, 0.0);\r\n        this[1] = defaultValue(column0Row1, 0.0);\r\n        this[2] = defaultValue(column0Row2, 0.0);\r\n        this[3] = defaultValue(column0Row3, 0.0);\r\n        this[4] = defaultValue(column1Row0, 0.0);\r\n        this[5] = defaultValue(column1Row1, 0.0);\r\n        this[6] = defaultValue(column1Row2, 0.0);\r\n        this[7] = defaultValue(column1Row3, 0.0);\r\n        this[8] = defaultValue(column2Row0, 0.0);\r\n        this[9] = defaultValue(column2Row1, 0.0);\r\n        this[10] = defaultValue(column2Row2, 0.0);\r\n        this[11] = defaultValue(column2Row3, 0.0);\r\n        this[12] = defaultValue(column3Row0, 0.0);\r\n        this[13] = defaultValue(column3Row1, 0.0);\r\n        this[14] = defaultValue(column3Row2, 0.0);\r\n        this[15] = defaultValue(column3Row3, 0.0);\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Matrix4.packedLength = 16;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Matrix4} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Matrix4.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value[0];\r\n        array[startingIndex++] = value[1];\r\n        array[startingIndex++] = value[2];\r\n        array[startingIndex++] = value[3];\r\n        array[startingIndex++] = value[4];\r\n        array[startingIndex++] = value[5];\r\n        array[startingIndex++] = value[6];\r\n        array[startingIndex++] = value[7];\r\n        array[startingIndex++] = value[8];\r\n        array[startingIndex++] = value[9];\r\n        array[startingIndex++] = value[10];\r\n        array[startingIndex++] = value[11];\r\n        array[startingIndex++] = value[12];\r\n        array[startingIndex++] = value[13];\r\n        array[startingIndex++] = value[14];\r\n        array[startingIndex] = value[15];\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Matrix4} [result] The object into which to store the result.\r\n     * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Matrix4();\r\n        }\r\n\r\n        result[0] = array[startingIndex++];\r\n        result[1] = array[startingIndex++];\r\n        result[2] = array[startingIndex++];\r\n        result[3] = array[startingIndex++];\r\n        result[4] = array[startingIndex++];\r\n        result[5] = array[startingIndex++];\r\n        result[6] = array[startingIndex++];\r\n        result[7] = array[startingIndex++];\r\n        result[8] = array[startingIndex++];\r\n        result[9] = array[startingIndex++];\r\n        result[10] = array[startingIndex++];\r\n        result[11] = array[startingIndex++];\r\n        result[12] = array[startingIndex++];\r\n        result[13] = array[startingIndex++];\r\n        result[14] = array[startingIndex++];\r\n        result[15] = array[startingIndex];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Matrix4 instance.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to duplicate.\r\n     * @param {Matrix4} [result] The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided. (Returns undefined if matrix is undefined)\r\n     */\r\n    Matrix4.clone = function(matrix, result) {\r\n        if (!defined(matrix)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            return new Matrix4(matrix[0], matrix[4], matrix[8], matrix[12],\r\n                               matrix[1], matrix[5], matrix[9], matrix[13],\r\n                               matrix[2], matrix[6], matrix[10], matrix[14],\r\n                               matrix[3], matrix[7], matrix[11], matrix[15]);\r\n        }\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n        result[4] = matrix[4];\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[6];\r\n        result[7] = matrix[7];\r\n        result[8] = matrix[8];\r\n        result[9] = matrix[9];\r\n        result[10] = matrix[10];\r\n        result[11] = matrix[11];\r\n        result[12] = matrix[12];\r\n        result[13] = matrix[13];\r\n        result[14] = matrix[14];\r\n        result[15] = matrix[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix4 from 16 consecutive elements in an array.\r\n     * @function\r\n     *\r\n     * @param {Number[]} array The array whose 16 consecutive elements correspond to the positions of the matrix.  Assumes column-major order.\r\n     * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to first column first row position in the matrix.\r\n     * @param {Matrix4} [result] The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Create the Matrix4:\r\n     * // [1.0, 2.0, 3.0, 4.0]\r\n     * // [1.0, 2.0, 3.0, 4.0]\r\n     * // [1.0, 2.0, 3.0, 4.0]\r\n     * // [1.0, 2.0, 3.0, 4.0]\r\n     *\r\n     * var v = [1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0];\r\n     * var m = Cesium.Matrix4.fromArray(v);\r\n     *\r\n     * // Create same Matrix4 with using an offset into an array\r\n     * var v2 = [0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0];\r\n     * var m2 = Cesium.Matrix4.fromArray(v2, 2);\r\n     */\r\n    Matrix4.fromArray = Matrix4.unpack;\r\n\r\n    /**\r\n     * Computes a Matrix4 instance from a column-major order array.\r\n     *\r\n     * @param {Number[]} values The column-major order array.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.fromColumnMajorArray = function(values, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('values', values);\r\n        //>>includeEnd('debug');\r\n\r\n        return Matrix4.clone(values, result);\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance from a row-major order array.\r\n     * The resulting matrix will be in column-major order.\r\n     *\r\n     * @param {Number[]} values The row-major order array.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.fromRowMajorArray = function(values, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('values', values);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix4(values[0], values[1], values[2], values[3],\r\n                               values[4], values[5], values[6], values[7],\r\n                               values[8], values[9], values[10], values[11],\r\n                               values[12], values[13], values[14], values[15]);\r\n        }\r\n        result[0] = values[0];\r\n        result[1] = values[4];\r\n        result[2] = values[8];\r\n        result[3] = values[12];\r\n        result[4] = values[1];\r\n        result[5] = values[5];\r\n        result[6] = values[9];\r\n        result[7] = values[13];\r\n        result[8] = values[2];\r\n        result[9] = values[6];\r\n        result[10] = values[10];\r\n        result[11] = values[14];\r\n        result[12] = values[3];\r\n        result[13] = values[7];\r\n        result[14] = values[11];\r\n        result[15] = values[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance from a Matrix3 representing the rotation\r\n     * and a Cartesian3 representing the translation.\r\n     *\r\n     * @param {Matrix3} rotation The upper left portion of the matrix representing the rotation.\r\n     * @param {Cartesian3} [translation=Cartesian3.ZERO] The upper right portion of the matrix representing the translation.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.fromRotationTranslation = function(rotation, translation, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rotation', rotation);\r\n        //>>includeEnd('debug');\r\n\r\n        translation = defaultValue(translation, Cartesian3.ZERO);\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix4(rotation[0], rotation[3], rotation[6], translation.x,\r\n                               rotation[1], rotation[4], rotation[7], translation.y,\r\n                               rotation[2], rotation[5], rotation[8], translation.z,\r\n                                       0.0,         0.0,         0.0,           1.0);\r\n        }\r\n\r\n        result[0] = rotation[0];\r\n        result[1] = rotation[1];\r\n        result[2] = rotation[2];\r\n        result[3] = 0.0;\r\n        result[4] = rotation[3];\r\n        result[5] = rotation[4];\r\n        result[6] = rotation[5];\r\n        result[7] = 0.0;\r\n        result[8] = rotation[6];\r\n        result[9] = rotation[7];\r\n        result[10] = rotation[8];\r\n        result[11] = 0.0;\r\n        result[12] = translation.x;\r\n        result[13] = translation.y;\r\n        result[14] = translation.z;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance from a translation, rotation, and scale (TRS)\r\n     * representation with the rotation represented as a quaternion.\r\n     *\r\n     * @param {Cartesian3} translation The translation transformation.\r\n     * @param {Quaternion} rotation The rotation transformation.\r\n     * @param {Cartesian3} scale The non-uniform scale transformation.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * var result = Cesium.Matrix4.fromTranslationQuaternionRotationScale(\r\n     *   new Cesium.Cartesian3(1.0, 2.0, 3.0), // translation\r\n     *   Cesium.Quaternion.IDENTITY,           // rotation\r\n     *   new Cesium.Cartesian3(7.0, 8.0, 9.0), // scale\r\n     *   result);\r\n     */\r\n    Matrix4.fromTranslationQuaternionRotationScale = function(translation, rotation, scale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('translation', translation);\r\n        Check.typeOf.object('rotation', rotation);\r\n        Check.typeOf.object('scale', scale);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            result = new Matrix4();\r\n        }\r\n\r\n        var scaleX = scale.x;\r\n        var scaleY = scale.y;\r\n        var scaleZ = scale.z;\r\n\r\n        var x2 = rotation.x * rotation.x;\r\n        var xy = rotation.x * rotation.y;\r\n        var xz = rotation.x * rotation.z;\r\n        var xw = rotation.x * rotation.w;\r\n        var y2 = rotation.y * rotation.y;\r\n        var yz = rotation.y * rotation.z;\r\n        var yw = rotation.y * rotation.w;\r\n        var z2 = rotation.z * rotation.z;\r\n        var zw = rotation.z * rotation.w;\r\n        var w2 = rotation.w * rotation.w;\r\n\r\n        var m00 = x2 - y2 - z2 + w2;\r\n        var m01 = 2.0 * (xy - zw);\r\n        var m02 = 2.0 * (xz + yw);\r\n\r\n        var m10 = 2.0 * (xy + zw);\r\n        var m11 = -x2 + y2 - z2 + w2;\r\n        var m12 = 2.0 * (yz - xw);\r\n\r\n        var m20 = 2.0 * (xz - yw);\r\n        var m21 = 2.0 * (yz + xw);\r\n        var m22 = -x2 - y2 + z2 + w2;\r\n\r\n        result[0] = m00 * scaleX;\r\n        result[1] = m10 * scaleX;\r\n        result[2] = m20 * scaleX;\r\n        result[3] = 0.0;\r\n        result[4] = m01 * scaleY;\r\n        result[5] = m11 * scaleY;\r\n        result[6] = m21 * scaleY;\r\n        result[7] = 0.0;\r\n        result[8] = m02 * scaleZ;\r\n        result[9] = m12 * scaleZ;\r\n        result[10] = m22 * scaleZ;\r\n        result[11] = 0.0;\r\n        result[12] = translation.x;\r\n        result[13] = translation.y;\r\n        result[14] = translation.z;\r\n        result[15] = 1.0;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix4 instance from a {@link TranslationRotationScale} instance.\r\n     *\r\n     * @param {TranslationRotationScale} translationRotationScale The instance.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.fromTranslationRotationScale = function(translationRotationScale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('translationRotationScale', translationRotationScale);\r\n        //>>includeEnd('debug');\r\n\r\n        return Matrix4.fromTranslationQuaternionRotationScale(translationRotationScale.translation, translationRotationScale.rotation, translationRotationScale.scale, result);\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix4 instance from a Cartesian3 representing the translation.\r\n     *\r\n     * @param {Cartesian3} translation The upper right portion of the matrix representing the translation.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     *\r\n     * @see Matrix4.multiplyByTranslation\r\n     */\r\n    Matrix4.fromTranslation = function(translation, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('translation', translation);\r\n        //>>includeEnd('debug');\r\n\r\n        return Matrix4.fromRotationTranslation(Matrix3.IDENTITY, translation, result);\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance representing a non-uniform scale.\r\n     *\r\n     * @param {Cartesian3} scale The x, y, and z scale factors.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Creates\r\n     * //   [7.0, 0.0, 0.0, 0.0]\r\n     * //   [0.0, 8.0, 0.0, 0.0]\r\n     * //   [0.0, 0.0, 9.0, 0.0]\r\n     * //   [0.0, 0.0, 0.0, 1.0]\r\n     * var m = Cesium.Matrix4.fromScale(new Cesium.Cartesian3(7.0, 8.0, 9.0));\r\n     */\r\n    Matrix4.fromScale = function(scale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('scale', scale);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix4(\r\n                scale.x, 0.0,     0.0,     0.0,\r\n                0.0,     scale.y, 0.0,     0.0,\r\n                0.0,     0.0,     scale.z, 0.0,\r\n                0.0,     0.0,     0.0,     1.0);\r\n        }\r\n\r\n        result[0] = scale.x;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = scale.y;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 0.0;\r\n        result[9] = 0.0;\r\n        result[10] = scale.z;\r\n        result[11] = 0.0;\r\n        result[12] = 0.0;\r\n        result[13] = 0.0;\r\n        result[14] = 0.0;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance representing a uniform scale.\r\n     *\r\n     * @param {Number} scale The uniform scale factor.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Creates\r\n     * //   [2.0, 0.0, 0.0, 0.0]\r\n     * //   [0.0, 2.0, 0.0, 0.0]\r\n     * //   [0.0, 0.0, 2.0, 0.0]\r\n     * //   [0.0, 0.0, 0.0, 1.0]\r\n     * var m = Cesium.Matrix4.fromUniformScale(2.0);\r\n     */\r\n    Matrix4.fromUniformScale = function(scale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('scale', scale);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix4(scale, 0.0,   0.0,   0.0,\r\n                               0.0,   scale, 0.0,   0.0,\r\n                               0.0,   0.0,   scale, 0.0,\r\n                               0.0,   0.0,   0.0,   1.0);\r\n        }\r\n\r\n        result[0] = scale;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = scale;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 0.0;\r\n        result[9] = 0.0;\r\n        result[10] = scale;\r\n        result[11] = 0.0;\r\n        result[12] = 0.0;\r\n        result[13] = 0.0;\r\n        result[14] = 0.0;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    var fromCameraF = new Cartesian3();\r\n    var fromCameraR = new Cartesian3();\r\n    var fromCameraU = new Cartesian3();\r\n\r\n    /**\r\n     * Computes a Matrix4 instance from a Camera.\r\n     *\r\n     * @param {Camera} camera The camera to use.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.fromCamera = function(camera, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('camera', camera);\r\n        //>>includeEnd('debug');\r\n\r\n        var position = camera.position;\r\n        var direction = camera.direction;\r\n        var up = camera.up;\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('camera.position', position);\r\n        Check.typeOf.object('camera.direction', direction);\r\n        Check.typeOf.object('camera.up', up);\r\n        //>>includeEnd('debug');\r\n\r\n        Cartesian3.normalize(direction, fromCameraF);\r\n        Cartesian3.normalize(Cartesian3.cross(fromCameraF, up, fromCameraR), fromCameraR);\r\n        Cartesian3.normalize(Cartesian3.cross(fromCameraR, fromCameraF, fromCameraU), fromCameraU);\r\n\r\n        var sX = fromCameraR.x;\r\n        var sY = fromCameraR.y;\r\n        var sZ = fromCameraR.z;\r\n        var fX = fromCameraF.x;\r\n        var fY = fromCameraF.y;\r\n        var fZ = fromCameraF.z;\r\n        var uX = fromCameraU.x;\r\n        var uY = fromCameraU.y;\r\n        var uZ = fromCameraU.z;\r\n        var positionX = position.x;\r\n        var positionY = position.y;\r\n        var positionZ = position.z;\r\n        var t0 = sX * -positionX + sY * -positionY + sZ * -positionZ;\r\n        var t1 = uX * -positionX + uY * -positionY + uZ * -positionZ;\r\n        var t2 = fX * positionX + fY * positionY + fZ * positionZ;\r\n\r\n        // The code below this comment is an optimized\r\n        // version of the commented lines.\r\n        // Rather that create two matrices and then multiply,\r\n        // we just bake in the multiplcation as part of creation.\r\n        // var rotation = new Matrix4(\r\n        //                 sX,  sY,  sZ, 0.0,\r\n        //                 uX,  uY,  uZ, 0.0,\r\n        //                -fX, -fY, -fZ, 0.0,\r\n        //                 0.0,  0.0,  0.0, 1.0);\r\n        // var translation = new Matrix4(\r\n        //                 1.0, 0.0, 0.0, -position.x,\r\n        //                 0.0, 1.0, 0.0, -position.y,\r\n        //                 0.0, 0.0, 1.0, -position.z,\r\n        //                 0.0, 0.0, 0.0, 1.0);\r\n        // return rotation.multiply(translation);\r\n        if (!defined(result)) {\r\n            return new Matrix4(\r\n                    sX,   sY,  sZ, t0,\r\n                    uX,   uY,  uZ, t1,\r\n                   -fX,  -fY, -fZ, t2,\r\n                    0.0, 0.0, 0.0, 1.0);\r\n        }\r\n        result[0] = sX;\r\n        result[1] = uX;\r\n        result[2] = -fX;\r\n        result[3] = 0.0;\r\n        result[4] = sY;\r\n        result[5] = uY;\r\n        result[6] = -fY;\r\n        result[7] = 0.0;\r\n        result[8] = sZ;\r\n        result[9] = uZ;\r\n        result[10] = -fZ;\r\n        result[11] = 0.0;\r\n        result[12] = t0;\r\n        result[13] = t1;\r\n        result[14] = t2;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance representing a perspective transformation matrix.\r\n     *\r\n     * @param {Number} fovY The field of view along the Y axis in radians.\r\n     * @param {Number} aspectRatio The aspect ratio.\r\n     * @param {Number} near The distance to the near plane in meters.\r\n     * @param {Number} far The distance to the far plane in meters.\r\n     * @param {Matrix4} result The object in which the result will be stored.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} fovY must be in (0, PI].\r\n     * @exception {DeveloperError} aspectRatio must be greater than zero.\r\n     * @exception {DeveloperError} near must be greater than zero.\r\n     * @exception {DeveloperError} far must be greater than zero.\r\n     */\r\n    Matrix4.computePerspectiveFieldOfView = function(fovY, aspectRatio, near, far, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number.greaterThan('fovY', fovY, 0.0);\r\n        Check.typeOf.number.lessThan('fovY', fovY, Math.PI);\r\n        Check.typeOf.number.greaterThan('near', near, 0.0);\r\n        Check.typeOf.number.greaterThan('far', far, 0.0);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var bottom = Math.tan(fovY * 0.5);\r\n\r\n        var column1Row1 = 1.0 / bottom;\r\n        var column0Row0 = column1Row1 / aspectRatio;\r\n        var column2Row2 = (far + near) / (near - far);\r\n        var column3Row2 = (2.0 * far * near) / (near - far);\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = column1Row1;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 0.0;\r\n        result[9] = 0.0;\r\n        result[10] = column2Row2;\r\n        result[11] = -1.0;\r\n        result[12] = 0.0;\r\n        result[13] = 0.0;\r\n        result[14] = column3Row2;\r\n        result[15] = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance representing an orthographic transformation matrix.\r\n     *\r\n     * @param {Number} left The number of meters to the left of the camera that will be in view.\r\n     * @param {Number} right The number of meters to the right of the camera that will be in view.\r\n     * @param {Number} bottom The number of meters below of the camera that will be in view.\r\n     * @param {Number} top The number of meters above of the camera that will be in view.\r\n     * @param {Number} near The distance to the near plane in meters.\r\n     * @param {Number} far The distance to the far plane in meters.\r\n     * @param {Matrix4} result The object in which the result will be stored.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.computeOrthographicOffCenter = function(left, right, bottom, top, near, far, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('left', left);\r\n        Check.typeOf.number('right', right);\r\n        Check.typeOf.number('bottom', bottom);\r\n        Check.typeOf.number('top', top);\r\n        Check.typeOf.number('near', near);\r\n        Check.typeOf.number('far', far);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var a = 1.0 / (right - left);\r\n        var b = 1.0 / (top - bottom);\r\n        var c = 1.0 / (far - near);\r\n\r\n        var tx = -(right + left) * a;\r\n        var ty = -(top + bottom) * b;\r\n        var tz = -(far + near) * c;\r\n        a *= 2.0;\r\n        b *= 2.0;\r\n        c *= -2.0;\r\n\r\n        result[0] = a;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = b;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 0.0;\r\n        result[9] = 0.0;\r\n        result[10] = c;\r\n        result[11] = 0.0;\r\n        result[12] = tx;\r\n        result[13] = ty;\r\n        result[14] = tz;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance representing an off center perspective transformation.\r\n     *\r\n     * @param {Number} left The number of meters to the left of the camera that will be in view.\r\n     * @param {Number} right The number of meters to the right of the camera that will be in view.\r\n     * @param {Number} bottom The number of meters below of the camera that will be in view.\r\n     * @param {Number} top The number of meters above of the camera that will be in view.\r\n     * @param {Number} near The distance to the near plane in meters.\r\n     * @param {Number} far The distance to the far plane in meters.\r\n     * @param {Matrix4} result The object in which the result will be stored.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.computePerspectiveOffCenter = function(left, right, bottom, top, near, far, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('left', left);\r\n        Check.typeOf.number('right', right);\r\n        Check.typeOf.number('bottom', bottom);\r\n        Check.typeOf.number('top', top);\r\n        Check.typeOf.number('near', near);\r\n        Check.typeOf.number('far', far);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var column0Row0 = 2.0 * near / (right - left);\r\n        var column1Row1 = 2.0 * near / (top - bottom);\r\n        var column2Row0 = (right + left) / (right - left);\r\n        var column2Row1 = (top + bottom) / (top - bottom);\r\n        var column2Row2 = -(far + near) / (far - near);\r\n        var column2Row3 = -1.0;\r\n        var column3Row2 = -2.0 * far * near / (far - near);\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = column1Row1;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = column2Row0;\r\n        result[9] = column2Row1;\r\n        result[10] = column2Row2;\r\n        result[11] = column2Row3;\r\n        result[12] = 0.0;\r\n        result[13] = 0.0;\r\n        result[14] = column3Row2;\r\n        result[15] = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance representing an infinite off center perspective transformation.\r\n     *\r\n     * @param {Number} left The number of meters to the left of the camera that will be in view.\r\n     * @param {Number} right The number of meters to the right of the camera that will be in view.\r\n     * @param {Number} bottom The number of meters below of the camera that will be in view.\r\n     * @param {Number} top The number of meters above of the camera that will be in view.\r\n     * @param {Number} near The distance to the near plane in meters.\r\n     * @param {Matrix4} result The object in which the result will be stored.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.computeInfinitePerspectiveOffCenter = function(left, right, bottom, top, near, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('left', left);\r\n        Check.typeOf.number('right', right);\r\n        Check.typeOf.number('bottom', bottom);\r\n        Check.typeOf.number('top', top);\r\n        Check.typeOf.number('near', near);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var column0Row0 = 2.0 * near / (right - left);\r\n        var column1Row1 = 2.0 * near / (top - bottom);\r\n        var column2Row0 = (right + left) / (right - left);\r\n        var column2Row1 = (top + bottom) / (top - bottom);\r\n        var column2Row2 = -1.0;\r\n        var column2Row3 = -1.0;\r\n        var column3Row2 = -2.0 * near;\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = column1Row1;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = column2Row0;\r\n        result[9] = column2Row1;\r\n        result[10] = column2Row2;\r\n        result[11] = column2Row3;\r\n        result[12] = 0.0;\r\n        result[13] = 0.0;\r\n        result[14] = column3Row2;\r\n        result[15] = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance that transforms from normalized device coordinates to window coordinates.\r\n     *\r\n     * @param {Object}[viewport = { x : 0.0, y : 0.0, width : 0.0, height : 0.0 }] The viewport's corners as shown in Example 1.\r\n     * @param {Number}[nearDepthRange=0.0] The near plane distance in window coordinates.\r\n     * @param {Number}[farDepthRange=1.0] The far plane distance in window coordinates.\r\n     * @param {Matrix4} result The object in which the result will be stored.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * // Create viewport transformation using an explicit viewport and depth range.\r\n     * var m = Cesium.Matrix4.computeViewportTransformation({\r\n     *     x : 0.0,\r\n     *     y : 0.0,\r\n     *     width : 1024.0,\r\n     *     height : 768.0\r\n     * }, 0.0, 1.0, new Cesium.Matrix4());\r\n     */\r\n    Matrix4.computeViewportTransformation = function(viewport, nearDepthRange, farDepthRange, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        viewport = defaultValue(viewport, defaultValue.EMPTY_OBJECT);\r\n        var x = defaultValue(viewport.x, 0.0);\r\n        var y = defaultValue(viewport.y, 0.0);\r\n        var width = defaultValue(viewport.width, 0.0);\r\n        var height = defaultValue(viewport.height, 0.0);\r\n        nearDepthRange = defaultValue(nearDepthRange, 0.0);\r\n        farDepthRange = defaultValue(farDepthRange, 1.0);\r\n\r\n        var halfWidth = width * 0.5;\r\n        var halfHeight = height * 0.5;\r\n        var halfDepth = (farDepthRange - nearDepthRange) * 0.5;\r\n\r\n        var column0Row0 = halfWidth;\r\n        var column1Row1 = halfHeight;\r\n        var column2Row2 = halfDepth;\r\n        var column3Row0 = x + halfWidth;\r\n        var column3Row1 = y + halfHeight;\r\n        var column3Row2 = nearDepthRange + halfDepth;\r\n        var column3Row3 = 1.0;\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = column1Row1;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 0.0;\r\n        result[9] = 0.0;\r\n        result[10] = column2Row2;\r\n        result[11] = 0.0;\r\n        result[12] = column3Row0;\r\n        result[13] = column3Row1;\r\n        result[14] = column3Row2;\r\n        result[15] = column3Row3;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance that transforms from world space to view space.\r\n     *\r\n     * @param {Cartesian3} position The position of the camera.\r\n     * @param {Cartesian3} direction The forward direction.\r\n     * @param {Cartesian3} up The up direction.\r\n     * @param {Cartesian3} right The right direction.\r\n     * @param {Matrix4} result The object in which the result will be stored.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.computeView = function(position, direction, up, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('position', position);\r\n        Check.typeOf.object('direction', direction);\r\n        Check.typeOf.object('up', up);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = right.x;\r\n        result[1] = up.x;\r\n        result[2] = -direction.x;\r\n        result[3] = 0.0;\r\n        result[4] = right.y;\r\n        result[5] = up.y;\r\n        result[6] = -direction.y;\r\n        result[7] = 0.0;\r\n        result[8] = right.z;\r\n        result[9] = up.z;\r\n        result[10] = -direction.z;\r\n        result[11] = 0.0;\r\n        result[12] = -Cartesian3.dot(right, position);\r\n        result[13] = -Cartesian3.dot(up, position);\r\n        result[14] = Cartesian3.dot(direction, position);\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes an Array from the provided Matrix4 instance.\r\n     * The array will be in column-major order.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use..\r\n     * @param {Number[]} [result] The Array onto which to store the result.\r\n     * @returns {Number[]} The modified Array parameter or a new Array instance if one was not provided.\r\n     *\r\n     * @example\r\n     * //create an array from an instance of Matrix4\r\n     * // m = [10.0, 14.0, 18.0, 22.0]\r\n     * //     [11.0, 15.0, 19.0, 23.0]\r\n     * //     [12.0, 16.0, 20.0, 24.0]\r\n     * //     [13.0, 17.0, 21.0, 25.0]\r\n     * var a = Cesium.Matrix4.toArray(m);\r\n     *\r\n     * // m remains the same\r\n     * //creates a = [10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0]\r\n     */\r\n    Matrix4.toArray = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return [matrix[0], matrix[1], matrix[2], matrix[3],\r\n                    matrix[4], matrix[5], matrix[6], matrix[7],\r\n                    matrix[8], matrix[9], matrix[10], matrix[11],\r\n                    matrix[12], matrix[13], matrix[14], matrix[15]];\r\n        }\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n        result[4] = matrix[4];\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[6];\r\n        result[7] = matrix[7];\r\n        result[8] = matrix[8];\r\n        result[9] = matrix[9];\r\n        result[10] = matrix[10];\r\n        result[11] = matrix[11];\r\n        result[12] = matrix[12];\r\n        result[13] = matrix[13];\r\n        result[14] = matrix[14];\r\n        result[15] = matrix[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the array index of the element at the provided row and column.\r\n     *\r\n     * @param {Number} row The zero-based index of the row.\r\n     * @param {Number} column The zero-based index of the column.\r\n     * @returns {Number} The index of the element at the provided row and column.\r\n     *\r\n     * @exception {DeveloperError} row must be 0, 1, 2, or 3.\r\n     * @exception {DeveloperError} column must be 0, 1, 2, or 3.\r\n     *\r\n     * @example\r\n     * var myMatrix = new Cesium.Matrix4();\r\n     * var column1Row0Index = Cesium.Matrix4.getElementIndex(1, 0);\r\n     * var column1Row0 = myMatrix[column1Row0Index];\r\n     * myMatrix[column1Row0Index] = 10.0;\r\n     */\r\n    Matrix4.getElementIndex = function(column, row) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number.greaterThanOrEquals('row', row, 0);\r\n        Check.typeOf.number.lessThanOrEquals('row', row, 3);\r\n\r\n        Check.typeOf.number.greaterThanOrEquals('column', column, 0);\r\n        Check.typeOf.number.lessThanOrEquals('column', column, 3);\r\n        //>>includeEnd('debug');\r\n\r\n        return column * 4 + row;\r\n    };\r\n\r\n    /**\r\n     * Retrieves a copy of the matrix column at the provided index as a Cartesian4 instance.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the column to retrieve.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, 2, or 3.\r\n     *\r\n     * @example\r\n     * //returns a Cartesian4 instance with values from the specified column\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * //Example 1: Creates an instance of Cartesian\r\n     * var a = Cesium.Matrix4.getColumn(m, 2, new Cesium.Cartesian4());\r\n     *\r\n     * @example\r\n     * //Example 2: Sets values for Cartesian instance\r\n     * var a = new Cesium.Cartesian4();\r\n     * Cesium.Matrix4.getColumn(m, 2, a);\r\n     *\r\n     * // a.x = 12.0; a.y = 16.0; a.z = 20.0; a.w = 24.0;\r\n     */\r\n    Matrix4.getColumn = function(matrix, index, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n\r\n        Check.typeOf.number.greaterThanOrEquals('index', index, 0);\r\n        Check.typeOf.number.lessThanOrEquals('index', index, 3);\r\n\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var startIndex = index * 4;\r\n        var x = matrix[startIndex];\r\n        var y = matrix[startIndex + 1];\r\n        var z = matrix[startIndex + 2];\r\n        var w = matrix[startIndex + 3];\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        result.w = w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a new matrix that replaces the specified column in the provided matrix with the provided Cartesian4 instance.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the column to set.\r\n     * @param {Cartesian4} cartesian The Cartesian whose values will be assigned to the specified column.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, 2, or 3.\r\n     *\r\n     * @example\r\n     * //creates a new Matrix4 instance with new column values from the Cartesian4 instance\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * var a = Cesium.Matrix4.setColumn(m, 2, new Cesium.Cartesian4(99.0, 98.0, 97.0, 96.0), new Cesium.Matrix4());\r\n     *\r\n     * // m remains the same\r\n     * // a = [10.0, 11.0, 99.0, 13.0]\r\n     * //     [14.0, 15.0, 98.0, 17.0]\r\n     * //     [18.0, 19.0, 97.0, 21.0]\r\n     * //     [22.0, 23.0, 96.0, 25.0]\r\n     */\r\n    Matrix4.setColumn = function(matrix, index, cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n\r\n        Check.typeOf.number.greaterThanOrEquals('index', index, 0);\r\n        Check.typeOf.number.lessThanOrEquals('index', index, 3);\r\n\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result = Matrix4.clone(matrix, result);\r\n        var startIndex = index * 4;\r\n        result[startIndex] = cartesian.x;\r\n        result[startIndex + 1] = cartesian.y;\r\n        result[startIndex + 2] = cartesian.z;\r\n        result[startIndex + 3] = cartesian.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a new matrix that replaces the translation in the rightmost column of the provided\r\n     * matrix with the provided translation.  This assumes the matrix is an affine transformation\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Cartesian3} translation The translation that replaces the translation of the provided matrix.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.setTranslation = function(matrix, translation, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('translation', translation);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n\r\n        result[4] = matrix[4];\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[6];\r\n        result[7] = matrix[7];\r\n\r\n        result[8] = matrix[8];\r\n        result[9] = matrix[9];\r\n        result[10] = matrix[10];\r\n        result[11] = matrix[11];\r\n\r\n        result[12] = translation.x;\r\n        result[13] = translation.y;\r\n        result[14] = translation.z;\r\n        result[15] = matrix[15];\r\n\r\n        return result;\r\n    };\r\n\r\n    var scaleScratch = new Cartesian3();\r\n    /**\r\n     * Computes a new matrix that replaces the scale with the provided scale.  This assumes the matrix is an affine transformation\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Cartesian3} scale The scale that replaces the scale of the provided matrix.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.setScale = function(matrix, scale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('scale', scale);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var existingScale = Matrix4.getScale(matrix, scaleScratch);\r\n        var newScale = Cartesian3.divideComponents(scale, existingScale, scaleScratch);\r\n        return Matrix4.multiplyByScale(matrix, newScale, result);\r\n    };\r\n\r\n    /**\r\n     * Retrieves a copy of the matrix row at the provided index as a Cartesian4 instance.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the row to retrieve.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, 2, or 3.\r\n     *\r\n     * @example\r\n     * //returns a Cartesian4 instance with values from the specified column\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * //Example 1: Returns an instance of Cartesian\r\n     * var a = Cesium.Matrix4.getRow(m, 2, new Cesium.Cartesian4());\r\n     *\r\n     * @example\r\n     * //Example 2: Sets values for a Cartesian instance\r\n     * var a = new Cesium.Cartesian4();\r\n     * Cesium.Matrix4.getRow(m, 2, a);\r\n     *\r\n     * // a.x = 18.0; a.y = 19.0; a.z = 20.0; a.w = 21.0;\r\n     */\r\n    Matrix4.getRow = function(matrix, index, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n\r\n        Check.typeOf.number.greaterThanOrEquals('index', index, 0);\r\n        Check.typeOf.number.lessThanOrEquals('index', index, 3);\r\n\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var x = matrix[index];\r\n        var y = matrix[index + 4];\r\n        var z = matrix[index + 8];\r\n        var w = matrix[index + 12];\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        result.w = w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a new matrix that replaces the specified row in the provided matrix with the provided Cartesian4 instance.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the row to set.\r\n     * @param {Cartesian4} cartesian The Cartesian whose values will be assigned to the specified row.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, 2, or 3.\r\n     *\r\n     * @example\r\n     * //create a new Matrix4 instance with new row values from the Cartesian4 instance\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * var a = Cesium.Matrix4.setRow(m, 2, new Cesium.Cartesian4(99.0, 98.0, 97.0, 96.0), new Cesium.Matrix4());\r\n     *\r\n     * // m remains the same\r\n     * // a = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [99.0, 98.0, 97.0, 96.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     */\r\n    Matrix4.setRow = function(matrix, index, cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n\r\n        Check.typeOf.number.greaterThanOrEquals('index', index, 0);\r\n        Check.typeOf.number.lessThanOrEquals('index', index, 3);\r\n\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result = Matrix4.clone(matrix, result);\r\n        result[index] = cartesian.x;\r\n        result[index + 4] = cartesian.y;\r\n        result[index + 8] = cartesian.z;\r\n        result[index + 12] = cartesian.w;\r\n        return result;\r\n    };\r\n\r\n    var scratchColumn = new Cartesian3();\r\n\r\n    /**\r\n     * Extracts the non-uniform scale assuming the matrix is an affine transformation.\r\n     *\r\n     * @param {Matrix4} matrix The matrix.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter\r\n     */\r\n    Matrix4.getScale = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = Cartesian3.magnitude(Cartesian3.fromElements(matrix[0], matrix[1], matrix[2], scratchColumn));\r\n        result.y = Cartesian3.magnitude(Cartesian3.fromElements(matrix[4], matrix[5], matrix[6], scratchColumn));\r\n        result.z = Cartesian3.magnitude(Cartesian3.fromElements(matrix[8], matrix[9], matrix[10], scratchColumn));\r\n        return result;\r\n    };\r\n\r\n    var scratchScale = new Cartesian3();\r\n\r\n    /**\r\n     * Computes the maximum scale assuming the matrix is an affine transformation.\r\n     * The maximum scale is the maximum length of the column vectors in the upper-left\r\n     * 3x3 matrix.\r\n     *\r\n     * @param {Matrix4} matrix The matrix.\r\n     * @returns {Number} The maximum scale.\r\n     */\r\n    Matrix4.getMaximumScale = function(matrix) {\r\n        Matrix4.getScale(matrix, scratchScale);\r\n        return Cartesian3.maximumComponent(scratchScale);\r\n    };\r\n\r\n    /**\r\n     * Computes the product of two matrices.\r\n     *\r\n     * @param {Matrix4} left The first matrix.\r\n     * @param {Matrix4} right The second matrix.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.multiply = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var left0 = left[0];\r\n        var left1 = left[1];\r\n        var left2 = left[2];\r\n        var left3 = left[3];\r\n        var left4 = left[4];\r\n        var left5 = left[5];\r\n        var left6 = left[6];\r\n        var left7 = left[7];\r\n        var left8 = left[8];\r\n        var left9 = left[9];\r\n        var left10 = left[10];\r\n        var left11 = left[11];\r\n        var left12 = left[12];\r\n        var left13 = left[13];\r\n        var left14 = left[14];\r\n        var left15 = left[15];\r\n\r\n        var right0 = right[0];\r\n        var right1 = right[1];\r\n        var right2 = right[2];\r\n        var right3 = right[3];\r\n        var right4 = right[4];\r\n        var right5 = right[5];\r\n        var right6 = right[6];\r\n        var right7 = right[7];\r\n        var right8 = right[8];\r\n        var right9 = right[9];\r\n        var right10 = right[10];\r\n        var right11 = right[11];\r\n        var right12 = right[12];\r\n        var right13 = right[13];\r\n        var right14 = right[14];\r\n        var right15 = right[15];\r\n\r\n        var column0Row0 = left0 * right0 + left4 * right1 + left8 * right2 + left12 * right3;\r\n        var column0Row1 = left1 * right0 + left5 * right1 + left9 * right2 + left13 * right3;\r\n        var column0Row2 = left2 * right0 + left6 * right1 + left10 * right2 + left14 * right3;\r\n        var column0Row3 = left3 * right0 + left7 * right1 + left11 * right2 + left15 * right3;\r\n\r\n        var column1Row0 = left0 * right4 + left4 * right5 + left8 * right6 + left12 * right7;\r\n        var column1Row1 = left1 * right4 + left5 * right5 + left9 * right6 + left13 * right7;\r\n        var column1Row2 = left2 * right4 + left6 * right5 + left10 * right6 + left14 * right7;\r\n        var column1Row3 = left3 * right4 + left7 * right5 + left11 * right6 + left15 * right7;\r\n\r\n        var column2Row0 = left0 * right8 + left4 * right9 + left8 * right10 + left12 * right11;\r\n        var column2Row1 = left1 * right8 + left5 * right9 + left9 * right10 + left13 * right11;\r\n        var column2Row2 = left2 * right8 + left6 * right9 + left10 * right10 + left14 * right11;\r\n        var column2Row3 = left3 * right8 + left7 * right9 + left11 * right10 + left15 * right11;\r\n\r\n        var column3Row0 = left0 * right12 + left4 * right13 + left8 * right14 + left12 * right15;\r\n        var column3Row1 = left1 * right12 + left5 * right13 + left9 * right14 + left13 * right15;\r\n        var column3Row2 = left2 * right12 + left6 * right13 + left10 * right14 + left14 * right15;\r\n        var column3Row3 = left3 * right12 + left7 * right13 + left11 * right14 + left15 * right15;\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = column0Row1;\r\n        result[2] = column0Row2;\r\n        result[3] = column0Row3;\r\n        result[4] = column1Row0;\r\n        result[5] = column1Row1;\r\n        result[6] = column1Row2;\r\n        result[7] = column1Row3;\r\n        result[8] = column2Row0;\r\n        result[9] = column2Row1;\r\n        result[10] = column2Row2;\r\n        result[11] = column2Row3;\r\n        result[12] = column3Row0;\r\n        result[13] = column3Row1;\r\n        result[14] = column3Row2;\r\n        result[15] = column3Row3;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the sum of two matrices.\r\n     *\r\n     * @param {Matrix4} left The first matrix.\r\n     * @param {Matrix4} right The second matrix.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.add = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = left[0] + right[0];\r\n        result[1] = left[1] + right[1];\r\n        result[2] = left[2] + right[2];\r\n        result[3] = left[3] + right[3];\r\n        result[4] = left[4] + right[4];\r\n        result[5] = left[5] + right[5];\r\n        result[6] = left[6] + right[6];\r\n        result[7] = left[7] + right[7];\r\n        result[8] = left[8] + right[8];\r\n        result[9] = left[9] + right[9];\r\n        result[10] = left[10] + right[10];\r\n        result[11] = left[11] + right[11];\r\n        result[12] = left[12] + right[12];\r\n        result[13] = left[13] + right[13];\r\n        result[14] = left[14] + right[14];\r\n        result[15] = left[15] + right[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the difference of two matrices.\r\n     *\r\n     * @param {Matrix4} left The first matrix.\r\n     * @param {Matrix4} right The second matrix.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.subtract = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = left[0] - right[0];\r\n        result[1] = left[1] - right[1];\r\n        result[2] = left[2] - right[2];\r\n        result[3] = left[3] - right[3];\r\n        result[4] = left[4] - right[4];\r\n        result[5] = left[5] - right[5];\r\n        result[6] = left[6] - right[6];\r\n        result[7] = left[7] - right[7];\r\n        result[8] = left[8] - right[8];\r\n        result[9] = left[9] - right[9];\r\n        result[10] = left[10] - right[10];\r\n        result[11] = left[11] - right[11];\r\n        result[12] = left[12] - right[12];\r\n        result[13] = left[13] - right[13];\r\n        result[14] = left[14] - right[14];\r\n        result[15] = left[15] - right[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of two matrices assuming the matrices are\r\n     * affine transformation matrices, where the upper left 3x3 elements\r\n     * are a rotation matrix, and the upper three elements in the fourth\r\n     * column are the translation.  The bottom row is assumed to be [0, 0, 0, 1].\r\n     * The matrix is not verified to be in the proper form.\r\n     * This method is faster than computing the product for general 4x4\r\n     * matrices using {@link Matrix4.multiply}.\r\n     *\r\n     * @param {Matrix4} left The first matrix.\r\n     * @param {Matrix4} right The second matrix.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * var m1 = new Cesium.Matrix4(1.0, 6.0, 7.0, 0.0, 2.0, 5.0, 8.0, 0.0, 3.0, 4.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0);\r\n     * var m2 = Cesium.Transforms.eastNorthUpToFixedFrame(new Cesium.Cartesian3(1.0, 1.0, 1.0));\r\n     * var m3 = Cesium.Matrix4.multiplyTransformation(m1, m2, new Cesium.Matrix4());\r\n     */\r\n    Matrix4.multiplyTransformation = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var left0 = left[0];\r\n        var left1 = left[1];\r\n        var left2 = left[2];\r\n        var left4 = left[4];\r\n        var left5 = left[5];\r\n        var left6 = left[6];\r\n        var left8 = left[8];\r\n        var left9 = left[9];\r\n        var left10 = left[10];\r\n        var left12 = left[12];\r\n        var left13 = left[13];\r\n        var left14 = left[14];\r\n\r\n        var right0 = right[0];\r\n        var right1 = right[1];\r\n        var right2 = right[2];\r\n        var right4 = right[4];\r\n        var right5 = right[5];\r\n        var right6 = right[6];\r\n        var right8 = right[8];\r\n        var right9 = right[9];\r\n        var right10 = right[10];\r\n        var right12 = right[12];\r\n        var right13 = right[13];\r\n        var right14 = right[14];\r\n\r\n        var column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;\r\n        var column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;\r\n        var column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;\r\n\r\n        var column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;\r\n        var column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;\r\n        var column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;\r\n\r\n        var column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;\r\n        var column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;\r\n        var column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;\r\n\r\n        var column3Row0 = left0 * right12 + left4 * right13 + left8 * right14 + left12;\r\n        var column3Row1 = left1 * right12 + left5 * right13 + left9 * right14 + left13;\r\n        var column3Row2 = left2 * right12 + left6 * right13 + left10 * right14 + left14;\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = column0Row1;\r\n        result[2] = column0Row2;\r\n        result[3] = 0.0;\r\n        result[4] = column1Row0;\r\n        result[5] = column1Row1;\r\n        result[6] = column1Row2;\r\n        result[7] = 0.0;\r\n        result[8] = column2Row0;\r\n        result[9] = column2Row1;\r\n        result[10] = column2Row2;\r\n        result[11] = 0.0;\r\n        result[12] = column3Row0;\r\n        result[13] = column3Row1;\r\n        result[14] = column3Row2;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\r\n     * by a 3x3 rotation matrix.  This is an optimization\r\n     * for <code>Matrix4.multiply(m, Matrix4.fromRotationTranslation(rotation), m);</code> with less allocations and arithmetic operations.\r\n     *\r\n     * @param {Matrix4} matrix The matrix on the left-hand side.\r\n     * @param {Matrix3} rotation The 3x3 rotation matrix on the right-hand side.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromRotationTranslation(rotation), m);\r\n     * Cesium.Matrix4.multiplyByMatrix3(m, rotation, m);\r\n     */\r\n    Matrix4.multiplyByMatrix3 = function(matrix, rotation, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('rotation', rotation);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var left0 = matrix[0];\r\n        var left1 = matrix[1];\r\n        var left2 = matrix[2];\r\n        var left4 = matrix[4];\r\n        var left5 = matrix[5];\r\n        var left6 = matrix[6];\r\n        var left8 = matrix[8];\r\n        var left9 = matrix[9];\r\n        var left10 = matrix[10];\r\n\r\n        var right0 = rotation[0];\r\n        var right1 = rotation[1];\r\n        var right2 = rotation[2];\r\n        var right4 = rotation[3];\r\n        var right5 = rotation[4];\r\n        var right6 = rotation[5];\r\n        var right8 = rotation[6];\r\n        var right9 = rotation[7];\r\n        var right10 = rotation[8];\r\n\r\n        var column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;\r\n        var column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;\r\n        var column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;\r\n\r\n        var column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;\r\n        var column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;\r\n        var column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;\r\n\r\n        var column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;\r\n        var column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;\r\n        var column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = column0Row1;\r\n        result[2] = column0Row2;\r\n        result[3] = 0.0;\r\n        result[4] = column1Row0;\r\n        result[5] = column1Row1;\r\n        result[6] = column1Row2;\r\n        result[7] = 0.0;\r\n        result[8] = column2Row0;\r\n        result[9] = column2Row1;\r\n        result[10] = column2Row2;\r\n        result[11] = 0.0;\r\n        result[12] = matrix[12];\r\n        result[13] = matrix[13];\r\n        result[14] = matrix[14];\r\n        result[15] = matrix[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\r\n     * by an implicit translation matrix defined by a {@link Cartesian3}.  This is an optimization\r\n     * for <code>Matrix4.multiply(m, Matrix4.fromTranslation(position), m);</code> with less allocations and arithmetic operations.\r\n     *\r\n     * @param {Matrix4} matrix The matrix on the left-hand side.\r\n     * @param {Cartesian3} translation The translation on the right-hand side.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromTranslation(position), m);\r\n     * Cesium.Matrix4.multiplyByTranslation(m, position, m);\r\n     */\r\n    Matrix4.multiplyByTranslation = function(matrix, translation, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('translation', translation);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var x = translation.x;\r\n        var y = translation.y;\r\n        var z = translation.z;\r\n\r\n        var tx = (x * matrix[0]) + (y * matrix[4]) + (z * matrix[8]) + matrix[12];\r\n        var ty = (x * matrix[1]) + (y * matrix[5]) + (z * matrix[9]) + matrix[13];\r\n        var tz = (x * matrix[2]) + (y * matrix[6]) + (z * matrix[10]) + matrix[14];\r\n\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n        result[4] = matrix[4];\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[6];\r\n        result[7] = matrix[7];\r\n        result[8] = matrix[8];\r\n        result[9] = matrix[9];\r\n        result[10] = matrix[10];\r\n        result[11] = matrix[11];\r\n        result[12] = tx;\r\n        result[13] = ty;\r\n        result[14] = tz;\r\n        result[15] = matrix[15];\r\n        return result;\r\n    };\r\n\r\n    var uniformScaleScratch = new Cartesian3();\r\n\r\n    /**\r\n     * Multiplies an affine transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\r\n     * by an implicit uniform scale matrix.  This is an optimization\r\n     * for <code>Matrix4.multiply(m, Matrix4.fromUniformScale(scale), m);</code>, where\r\n     * <code>m</code> must be an affine matrix.\r\n     * This function performs fewer allocations and arithmetic operations.\r\n     *\r\n     * @param {Matrix4} matrix The affine matrix on the left-hand side.\r\n     * @param {Number} scale The uniform scale on the right-hand side.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     *\r\n     * @example\r\n     * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromUniformScale(scale), m);\r\n     * Cesium.Matrix4.multiplyByUniformScale(m, scale, m);\r\n     *\r\n     * @see Matrix4.fromUniformScale\r\n     * @see Matrix4.multiplyByScale\r\n     */\r\n    Matrix4.multiplyByUniformScale = function(matrix, scale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.number('scale', scale);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        uniformScaleScratch.x = scale;\r\n        uniformScaleScratch.y = scale;\r\n        uniformScaleScratch.z = scale;\r\n        return Matrix4.multiplyByScale(matrix, uniformScaleScratch, result);\r\n    };\r\n\r\n    /**\r\n     * Multiplies an affine transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\r\n     * by an implicit non-uniform scale matrix.  This is an optimization\r\n     * for <code>Matrix4.multiply(m, Matrix4.fromUniformScale(scale), m);</code>, where\r\n     * <code>m</code> must be an affine matrix.\r\n     * This function performs fewer allocations and arithmetic operations.\r\n     *\r\n     * @param {Matrix4} matrix The affine matrix on the left-hand side.\r\n     * @param {Cartesian3} scale The non-uniform scale on the right-hand side.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     *\r\n     * @example\r\n     * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromScale(scale), m);\r\n     * Cesium.Matrix4.multiplyByScale(m, scale, m);\r\n     *\r\n     * @see Matrix4.fromScale\r\n     * @see Matrix4.multiplyByUniformScale\r\n     */\r\n    Matrix4.multiplyByScale = function(matrix, scale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('scale', scale);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var scaleX = scale.x;\r\n        var scaleY = scale.y;\r\n        var scaleZ = scale.z;\r\n\r\n        // Faster than Cartesian3.equals\r\n        if ((scaleX === 1.0) && (scaleY === 1.0) && (scaleZ === 1.0)) {\r\n            return Matrix4.clone(matrix, result);\r\n        }\r\n\r\n        result[0] = scaleX * matrix[0];\r\n        result[1] = scaleX * matrix[1];\r\n        result[2] = scaleX * matrix[2];\r\n        result[3] = 0.0;\r\n        result[4] = scaleY * matrix[4];\r\n        result[5] = scaleY * matrix[5];\r\n        result[6] = scaleY * matrix[6];\r\n        result[7] = 0.0;\r\n        result[8] = scaleZ * matrix[8];\r\n        result[9] = scaleZ * matrix[9];\r\n        result[10] = scaleZ * matrix[10];\r\n        result[11] = 0.0;\r\n        result[12] = matrix[12];\r\n        result[13] = matrix[13];\r\n        result[14] = matrix[14];\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a column vector.\r\n     *\r\n     * @param {Matrix4} matrix The matrix.\r\n     * @param {Cartesian4} cartesian The vector.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Matrix4.multiplyByVector = function(matrix, cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var vX = cartesian.x;\r\n        var vY = cartesian.y;\r\n        var vZ = cartesian.z;\r\n        var vW = cartesian.w;\r\n\r\n        var x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12] * vW;\r\n        var y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13] * vW;\r\n        var z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14] * vW;\r\n        var w = matrix[3] * vX + matrix[7] * vY + matrix[11] * vZ + matrix[15] * vW;\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        result.w = w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a {@link Cartesian3}.  This is equivalent to calling {@link Matrix4.multiplyByVector}\r\n     * with a {@link Cartesian4} with a <code>w</code> component of zero.\r\n     *\r\n     * @param {Matrix4} matrix The matrix.\r\n     * @param {Cartesian3} cartesian The point.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     *\r\n     * @example\r\n     * var p = new Cesium.Cartesian3(1.0, 2.0, 3.0);\r\n     * var result = Cesium.Matrix4.multiplyByPointAsVector(matrix, p, new Cesium.Cartesian3());\r\n     * // A shortcut for\r\n     * //   Cartesian3 p = ...\r\n     * //   Cesium.Matrix4.multiplyByVector(matrix, new Cesium.Cartesian4(p.x, p.y, p.z, 0.0), result);\r\n     */\r\n    Matrix4.multiplyByPointAsVector = function(matrix, cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var vX = cartesian.x;\r\n        var vY = cartesian.y;\r\n        var vZ = cartesian.z;\r\n\r\n        var x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ;\r\n        var y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ;\r\n        var z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ;\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a {@link Cartesian3}. This is equivalent to calling {@link Matrix4.multiplyByVector}\r\n     * with a {@link Cartesian4} with a <code>w</code> component of 1, but returns a {@link Cartesian3} instead of a {@link Cartesian4}.\r\n     *\r\n     * @param {Matrix4} matrix The matrix.\r\n     * @param {Cartesian3} cartesian The point.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     *\r\n     * @example\r\n     * var p = new Cesium.Cartesian3(1.0, 2.0, 3.0);\r\n     * var result = Cesium.Matrix4.multiplyByPoint(matrix, p, new Cesium.Cartesian3());\r\n     */\r\n    Matrix4.multiplyByPoint = function(matrix, cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var vX = cartesian.x;\r\n        var vY = cartesian.y;\r\n        var vZ = cartesian.z;\r\n\r\n        var x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12];\r\n        var y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13];\r\n        var z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14];\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a scalar.\r\n     *\r\n     * @param {Matrix4} matrix The matrix.\r\n     * @param {Number} scalar The number to multiply by.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * //create a Matrix4 instance which is a scaled version of the supplied Matrix4\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * var a = Cesium.Matrix4.multiplyByScalar(m, -2, new Cesium.Matrix4());\r\n     *\r\n     * // m remains the same\r\n     * // a = [-20.0, -22.0, -24.0, -26.0]\r\n     * //     [-28.0, -30.0, -32.0, -34.0]\r\n     * //     [-36.0, -38.0, -40.0, -42.0]\r\n     * //     [-44.0, -46.0, -48.0, -50.0]\r\n     */\r\n    Matrix4.multiplyByScalar = function(matrix, scalar, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.number('scalar', scalar);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = matrix[0] * scalar;\r\n        result[1] = matrix[1] * scalar;\r\n        result[2] = matrix[2] * scalar;\r\n        result[3] = matrix[3] * scalar;\r\n        result[4] = matrix[4] * scalar;\r\n        result[5] = matrix[5] * scalar;\r\n        result[6] = matrix[6] * scalar;\r\n        result[7] = matrix[7] * scalar;\r\n        result[8] = matrix[8] * scalar;\r\n        result[9] = matrix[9] * scalar;\r\n        result[10] = matrix[10] * scalar;\r\n        result[11] = matrix[11] * scalar;\r\n        result[12] = matrix[12] * scalar;\r\n        result[13] = matrix[13] * scalar;\r\n        result[14] = matrix[14] * scalar;\r\n        result[15] = matrix[15] * scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a negated copy of the provided matrix.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to negate.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * //create a new Matrix4 instance which is a negation of a Matrix4\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * var a = Cesium.Matrix4.negate(m, new Cesium.Matrix4());\r\n     *\r\n     * // m remains the same\r\n     * // a = [-10.0, -11.0, -12.0, -13.0]\r\n     * //     [-14.0, -15.0, -16.0, -17.0]\r\n     * //     [-18.0, -19.0, -20.0, -21.0]\r\n     * //     [-22.0, -23.0, -24.0, -25.0]\r\n     */\r\n    Matrix4.negate = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = -matrix[0];\r\n        result[1] = -matrix[1];\r\n        result[2] = -matrix[2];\r\n        result[3] = -matrix[3];\r\n        result[4] = -matrix[4];\r\n        result[5] = -matrix[5];\r\n        result[6] = -matrix[6];\r\n        result[7] = -matrix[7];\r\n        result[8] = -matrix[8];\r\n        result[9] = -matrix[9];\r\n        result[10] = -matrix[10];\r\n        result[11] = -matrix[11];\r\n        result[12] = -matrix[12];\r\n        result[13] = -matrix[13];\r\n        result[14] = -matrix[14];\r\n        result[15] = -matrix[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the transpose of the provided matrix.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to transpose.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * //returns transpose of a Matrix4\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * var a = Cesium.Matrix4.transpose(m, new Cesium.Matrix4());\r\n     *\r\n     * // m remains the same\r\n     * // a = [10.0, 14.0, 18.0, 22.0]\r\n     * //     [11.0, 15.0, 19.0, 23.0]\r\n     * //     [12.0, 16.0, 20.0, 24.0]\r\n     * //     [13.0, 17.0, 21.0, 25.0]\r\n     */\r\n    Matrix4.transpose = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var matrix1 = matrix[1];\r\n        var matrix2 = matrix[2];\r\n        var matrix3 = matrix[3];\r\n        var matrix6 = matrix[6];\r\n        var matrix7 = matrix[7];\r\n        var matrix11 = matrix[11];\r\n\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[4];\r\n        result[2] = matrix[8];\r\n        result[3] = matrix[12];\r\n        result[4] = matrix1;\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[9];\r\n        result[7] = matrix[13];\r\n        result[8] = matrix2;\r\n        result[9] = matrix6;\r\n        result[10] = matrix[10];\r\n        result[11] = matrix[14];\r\n        result[12] = matrix3;\r\n        result[13] = matrix7;\r\n        result[14] = matrix11;\r\n        result[15] = matrix[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a matrix, which contains the absolute (unsigned) values of the provided matrix's elements.\r\n     *\r\n     * @param {Matrix4} matrix The matrix with signed elements.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.abs = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = Math.abs(matrix[0]);\r\n        result[1] = Math.abs(matrix[1]);\r\n        result[2] = Math.abs(matrix[2]);\r\n        result[3] = Math.abs(matrix[3]);\r\n        result[4] = Math.abs(matrix[4]);\r\n        result[5] = Math.abs(matrix[5]);\r\n        result[6] = Math.abs(matrix[6]);\r\n        result[7] = Math.abs(matrix[7]);\r\n        result[8] = Math.abs(matrix[8]);\r\n        result[9] = Math.abs(matrix[9]);\r\n        result[10] = Math.abs(matrix[10]);\r\n        result[11] = Math.abs(matrix[11]);\r\n        result[12] = Math.abs(matrix[12]);\r\n        result[13] = Math.abs(matrix[13]);\r\n        result[14] = Math.abs(matrix[14]);\r\n        result[15] = Math.abs(matrix[15]);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided matrices componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix4} [left] The first matrix.\r\n     * @param {Matrix4} [right] The second matrix.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     *\r\n     * @example\r\n     * //compares two Matrix4 instances\r\n     *\r\n     * // a = [10.0, 14.0, 18.0, 22.0]\r\n     * //     [11.0, 15.0, 19.0, 23.0]\r\n     * //     [12.0, 16.0, 20.0, 24.0]\r\n     * //     [13.0, 17.0, 21.0, 25.0]\r\n     *\r\n     * // b = [10.0, 14.0, 18.0, 22.0]\r\n     * //     [11.0, 15.0, 19.0, 23.0]\r\n     * //     [12.0, 16.0, 20.0, 24.0]\r\n     * //     [13.0, 17.0, 21.0, 25.0]\r\n     *\r\n     * if(Cesium.Matrix4.equals(a,b)) {\r\n     *      console.log(\"Both matrices are equal\");\r\n     * } else {\r\n     *      console.log(\"They are not equal\");\r\n     * }\r\n     *\r\n     * //Prints \"Both matrices are equal\" on the console\r\n     */\r\n    Matrix4.equals = function(left, right) {\r\n        // Given that most matrices will be transformation matrices, the elements\r\n        // are tested in order such that the test is likely to fail as early\r\n        // as possible.  I _think_ this is just as friendly to the L1 cache\r\n        // as testing in index order.  It is certainty faster in practice.\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                // Translation\r\n                left[12] === right[12] &&\r\n                left[13] === right[13] &&\r\n                left[14] === right[14] &&\r\n\r\n                // Rotation/scale\r\n                left[0] === right[0] &&\r\n                left[1] === right[1] &&\r\n                left[2] === right[2] &&\r\n                left[4] === right[4] &&\r\n                left[5] === right[5] &&\r\n                left[6] === right[6] &&\r\n                left[8] === right[8] &&\r\n                left[9] === right[9] &&\r\n                left[10] === right[10] &&\r\n\r\n                // Bottom row\r\n                left[3] === right[3] &&\r\n                left[7] === right[7] &&\r\n                left[11] === right[11] &&\r\n                left[15] === right[15]);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided matrices componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix4} [left] The first matrix.\r\n     * @param {Matrix4} [right] The second matrix.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     *\r\n     * @example\r\n     * //compares two Matrix4 instances\r\n     *\r\n     * // a = [10.5, 14.5, 18.5, 22.5]\r\n     * //     [11.5, 15.5, 19.5, 23.5]\r\n     * //     [12.5, 16.5, 20.5, 24.5]\r\n     * //     [13.5, 17.5, 21.5, 25.5]\r\n     *\r\n     * // b = [10.0, 14.0, 18.0, 22.0]\r\n     * //     [11.0, 15.0, 19.0, 23.0]\r\n     * //     [12.0, 16.0, 20.0, 24.0]\r\n     * //     [13.0, 17.0, 21.0, 25.0]\r\n     *\r\n     * if(Cesium.Matrix4.equalsEpsilon(a,b,0.1)){\r\n     *      console.log(\"Difference between both the matrices is less than 0.1\");\r\n     * } else {\r\n     *      console.log(\"Difference between both the matrices is not less than 0.1\");\r\n     * }\r\n     *\r\n     * //Prints \"Difference between both the matrices is not less than 0.1\" on the console\r\n     */\r\n    Matrix4.equalsEpsilon = function(left, right, epsilon) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('epsilon', epsilon);\r\n        //>>includeEnd('debug');\r\n\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                Math.abs(left[0] - right[0]) <= epsilon &&\r\n                Math.abs(left[1] - right[1]) <= epsilon &&\r\n                Math.abs(left[2] - right[2]) <= epsilon &&\r\n                Math.abs(left[3] - right[3]) <= epsilon &&\r\n                Math.abs(left[4] - right[4]) <= epsilon &&\r\n                Math.abs(left[5] - right[5]) <= epsilon &&\r\n                Math.abs(left[6] - right[6]) <= epsilon &&\r\n                Math.abs(left[7] - right[7]) <= epsilon &&\r\n                Math.abs(left[8] - right[8]) <= epsilon &&\r\n                Math.abs(left[9] - right[9]) <= epsilon &&\r\n                Math.abs(left[10] - right[10]) <= epsilon &&\r\n                Math.abs(left[11] - right[11]) <= epsilon &&\r\n                Math.abs(left[12] - right[12]) <= epsilon &&\r\n                Math.abs(left[13] - right[13]) <= epsilon &&\r\n                Math.abs(left[14] - right[14]) <= epsilon &&\r\n                Math.abs(left[15] - right[15]) <= epsilon);\r\n    };\r\n\r\n    /**\r\n     * Gets the translation portion of the provided matrix, assuming the matrix is a affine transformation matrix.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Matrix4.getTranslation = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = matrix[12];\r\n        result.y = matrix[13];\r\n        result.z = matrix[14];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Gets the upper left 3x3 rotation matrix of the provided matrix, assuming the matrix is an affine transformation matrix.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     *\r\n     * @example\r\n     * // returns a Matrix3 instance from a Matrix4 instance\r\n     *\r\n     * // m = [10.0, 14.0, 18.0, 22.0]\r\n     * //     [11.0, 15.0, 19.0, 23.0]\r\n     * //     [12.0, 16.0, 20.0, 24.0]\r\n     * //     [13.0, 17.0, 21.0, 25.0]\r\n     *\r\n     * var b = new Cesium.Matrix3();\r\n     * Cesium.Matrix4.getMatrix3(m,b);\r\n     *\r\n     * // b = [10.0, 14.0, 18.0]\r\n     * //     [11.0, 15.0, 19.0]\r\n     * //     [12.0, 16.0, 20.0]\r\n     */\r\n    Matrix4.getMatrix3 = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[4];\r\n        result[4] = matrix[5];\r\n        result[5] = matrix[6];\r\n        result[6] = matrix[8];\r\n        result[7] = matrix[9];\r\n        result[8] = matrix[10];\r\n        return result;\r\n    };\r\n\r\n    var scratchInverseRotation = new Matrix3();\r\n    var scratchMatrix3Zero = new Matrix3();\r\n    var scratchBottomRow = new Cartesian4();\r\n    var scratchExpectedBottomRow = new Cartesian4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * Computes the inverse of the provided matrix using Cramers Rule.\r\n     * If the determinant is zero, the matrix can not be inverted, and an exception is thrown.\r\n     * If the matrix is an affine transformation matrix, it is more efficient\r\n     * to invert it with {@link Matrix4.inverseTransformation}.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to invert.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @exception {RuntimeError} matrix is not invertible because its determinate is zero.\r\n     */\r\n    Matrix4.inverse = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n        //\r\n        // Ported from:\r\n        //   ftp://download.intel.com/design/PentiumIII/sml/24504301.pdf\r\n        //\r\n        var src0 = matrix[0];\r\n        var src1 = matrix[4];\r\n        var src2 = matrix[8];\r\n        var src3 = matrix[12];\r\n        var src4 = matrix[1];\r\n        var src5 = matrix[5];\r\n        var src6 = matrix[9];\r\n        var src7 = matrix[13];\r\n        var src8 = matrix[2];\r\n        var src9 = matrix[6];\r\n        var src10 = matrix[10];\r\n        var src11 = matrix[14];\r\n        var src12 = matrix[3];\r\n        var src13 = matrix[7];\r\n        var src14 = matrix[11];\r\n        var src15 = matrix[15];\r\n\r\n        // calculate pairs for first 8 elements (cofactors)\r\n        var tmp0 = src10 * src15;\r\n        var tmp1 = src11 * src14;\r\n        var tmp2 = src9 * src15;\r\n        var tmp3 = src11 * src13;\r\n        var tmp4 = src9 * src14;\r\n        var tmp5 = src10 * src13;\r\n        var tmp6 = src8 * src15;\r\n        var tmp7 = src11 * src12;\r\n        var tmp8 = src8 * src14;\r\n        var tmp9 = src10 * src12;\r\n        var tmp10 = src8 * src13;\r\n        var tmp11 = src9 * src12;\r\n\r\n        // calculate first 8 elements (cofactors)\r\n        var dst0 = (tmp0 * src5 + tmp3 * src6 + tmp4 * src7) - (tmp1 * src5 + tmp2 * src6 + tmp5 * src7);\r\n        var dst1 = (tmp1 * src4 + tmp6 * src6 + tmp9 * src7) - (tmp0 * src4 + tmp7 * src6 + tmp8 * src7);\r\n        var dst2 = (tmp2 * src4 + tmp7 * src5 + tmp10 * src7) - (tmp3 * src4 + tmp6 * src5 + tmp11 * src7);\r\n        var dst3 = (tmp5 * src4 + tmp8 * src5 + tmp11 * src6) - (tmp4 * src4 + tmp9 * src5 + tmp10 * src6);\r\n        var dst4 = (tmp1 * src1 + tmp2 * src2 + tmp5 * src3) - (tmp0 * src1 + tmp3 * src2 + tmp4 * src3);\r\n        var dst5 = (tmp0 * src0 + tmp7 * src2 + tmp8 * src3) - (tmp1 * src0 + tmp6 * src2 + tmp9 * src3);\r\n        var dst6 = (tmp3 * src0 + tmp6 * src1 + tmp11 * src3) - (tmp2 * src0 + tmp7 * src1 + tmp10 * src3);\r\n        var dst7 = (tmp4 * src0 + tmp9 * src1 + tmp10 * src2) - (tmp5 * src0 + tmp8 * src1 + tmp11 * src2);\r\n\r\n        // calculate pairs for second 8 elements (cofactors)\r\n        tmp0 = src2 * src7;\r\n        tmp1 = src3 * src6;\r\n        tmp2 = src1 * src7;\r\n        tmp3 = src3 * src5;\r\n        tmp4 = src1 * src6;\r\n        tmp5 = src2 * src5;\r\n        tmp6 = src0 * src7;\r\n        tmp7 = src3 * src4;\r\n        tmp8 = src0 * src6;\r\n        tmp9 = src2 * src4;\r\n        tmp10 = src0 * src5;\r\n        tmp11 = src1 * src4;\r\n\r\n        // calculate second 8 elements (cofactors)\r\n        var dst8 = (tmp0 * src13 + tmp3 * src14 + tmp4 * src15) - (tmp1 * src13 + tmp2 * src14 + tmp5 * src15);\r\n        var dst9 = (tmp1 * src12 + tmp6 * src14 + tmp9 * src15) - (tmp0 * src12 + tmp7 * src14 + tmp8 * src15);\r\n        var dst10 = (tmp2 * src12 + tmp7 * src13 + tmp10 * src15) - (tmp3 * src12 + tmp6 * src13 + tmp11 * src15);\r\n        var dst11 = (tmp5 * src12 + tmp8 * src13 + tmp11 * src14) - (tmp4 * src12 + tmp9 * src13 + tmp10 * src14);\r\n        var dst12 = (tmp2 * src10 + tmp5 * src11 + tmp1 * src9) - (tmp4 * src11 + tmp0 * src9 + tmp3 * src10);\r\n        var dst13 = (tmp8 * src11 + tmp0 * src8 + tmp7 * src10) - (tmp6 * src10 + tmp9 * src11 + tmp1 * src8);\r\n        var dst14 = (tmp6 * src9 + tmp11 * src11 + tmp3 * src8) - (tmp10 * src11 + tmp2 * src8 + tmp7 * src9);\r\n        var dst15 = (tmp10 * src10 + tmp4 * src8 + tmp9 * src9) - (tmp8 * src9 + tmp11 * src10 + tmp5 * src8);\r\n\r\n        // calculate determinant\r\n        var det = src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;\r\n\r\n        if (Math.abs(det) < CesiumMath.EPSILON21) {\r\n            // Special case for a zero scale matrix that can occur, for example,\r\n            // when a model's node has a [0, 0, 0] scale.\r\n            if (Matrix3.equalsEpsilon(Matrix4.getMatrix3(matrix, scratchInverseRotation), scratchMatrix3Zero, CesiumMath.EPSILON7) &&\r\n                Cartesian4.equals(Matrix4.getRow(matrix, 3, scratchBottomRow), scratchExpectedBottomRow)) {\r\n\r\n                result[0] = 0.0;\r\n                result[1] = 0.0;\r\n                result[2] = 0.0;\r\n                result[3] = 0.0;\r\n                result[4] = 0.0;\r\n                result[5] = 0.0;\r\n                result[6] = 0.0;\r\n                result[7] = 0.0;\r\n                result[8] = 0.0;\r\n                result[9] = 0.0;\r\n                result[10] = 0.0;\r\n                result[11] = 0.0;\r\n                result[12] = -matrix[12];\r\n                result[13] = -matrix[13];\r\n                result[14] = -matrix[14];\r\n                result[15] = 1.0;\r\n                return result;\r\n            }\r\n\r\n            throw new RuntimeError('matrix is not invertible because its determinate is zero.');\r\n        }\r\n\r\n        // calculate matrix inverse\r\n        det = 1.0 / det;\r\n\r\n        result[0] = dst0 * det;\r\n        result[1] = dst1 * det;\r\n        result[2] = dst2 * det;\r\n        result[3] = dst3 * det;\r\n        result[4] = dst4 * det;\r\n        result[5] = dst5 * det;\r\n        result[6] = dst6 * det;\r\n        result[7] = dst7 * det;\r\n        result[8] = dst8 * det;\r\n        result[9] = dst9 * det;\r\n        result[10] = dst10 * det;\r\n        result[11] = dst11 * det;\r\n        result[12] = dst12 * det;\r\n        result[13] = dst13 * det;\r\n        result[14] = dst14 * det;\r\n        result[15] = dst15 * det;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the inverse of the provided matrix assuming it is\r\n     * an affine transformation matrix, where the upper left 3x3 elements\r\n     * are a rotation matrix, and the upper three elements in the fourth\r\n     * column are the translation.  The bottom row is assumed to be [0, 0, 0, 1].\r\n     * The matrix is not verified to be in the proper form.\r\n     * This method is faster than computing the inverse for a general 4x4\r\n     * matrix using {@link Matrix4.inverse}.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to invert.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.inverseTransformation = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        //This function is an optimized version of the below 4 lines.\r\n        //var rT = Matrix3.transpose(Matrix4.getMatrix3(matrix));\r\n        //var rTN = Matrix3.negate(rT);\r\n        //var rTT = Matrix3.multiplyByVector(rTN, Matrix4.getTranslation(matrix));\r\n        //return Matrix4.fromRotationTranslation(rT, rTT, result);\r\n\r\n        var matrix0 = matrix[0];\r\n        var matrix1 = matrix[1];\r\n        var matrix2 = matrix[2];\r\n        var matrix4 = matrix[4];\r\n        var matrix5 = matrix[5];\r\n        var matrix6 = matrix[6];\r\n        var matrix8 = matrix[8];\r\n        var matrix9 = matrix[9];\r\n        var matrix10 = matrix[10];\r\n\r\n        var vX = matrix[12];\r\n        var vY = matrix[13];\r\n        var vZ = matrix[14];\r\n\r\n        var x = -matrix0 * vX - matrix1 * vY - matrix2 * vZ;\r\n        var y = -matrix4 * vX - matrix5 * vY - matrix6 * vZ;\r\n        var z = -matrix8 * vX - matrix9 * vY - matrix10 * vZ;\r\n\r\n        result[0] = matrix0;\r\n        result[1] = matrix4;\r\n        result[2] = matrix8;\r\n        result[3] = 0.0;\r\n        result[4] = matrix1;\r\n        result[5] = matrix5;\r\n        result[6] = matrix9;\r\n        result[7] = 0.0;\r\n        result[8] = matrix2;\r\n        result[9] = matrix6;\r\n        result[10] = matrix10;\r\n        result[11] = 0.0;\r\n        result[12] = x;\r\n        result[13] = y;\r\n        result[14] = z;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * An immutable Matrix4 instance initialized to the identity matrix.\r\n     *\r\n     * @type {Matrix4}\r\n     * @constant\r\n     */\r\n    Matrix4.IDENTITY = Object.freeze(new Matrix4(1.0, 0.0, 0.0, 0.0,\r\n                                                0.0, 1.0, 0.0, 0.0,\r\n                                                0.0, 0.0, 1.0, 0.0,\r\n                                                0.0, 0.0, 0.0, 1.0));\r\n\r\n    /**\r\n     * An immutable Matrix4 instance initialized to the zero matrix.\r\n     *\r\n     * @type {Matrix4}\r\n     * @constant\r\n     */\r\n    Matrix4.ZERO = Object.freeze(new Matrix4(0.0, 0.0, 0.0, 0.0,\r\n                                            0.0, 0.0, 0.0, 0.0,\r\n                                            0.0, 0.0, 0.0, 0.0,\r\n                                            0.0, 0.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * The index into Matrix4 for column 0, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN0ROW0 = 0;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 0, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN0ROW1 = 1;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 0, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN0ROW2 = 2;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 0, row 3.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN0ROW3 = 3;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 1, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN1ROW0 = 4;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 1, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN1ROW1 = 5;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 1, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN1ROW2 = 6;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 1, row 3.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN1ROW3 = 7;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 2, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN2ROW0 = 8;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 2, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN2ROW1 = 9;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 2, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN2ROW2 = 10;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 2, row 3.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN2ROW3 = 11;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 3, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN3ROW0 = 12;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 3, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN3ROW1 = 13;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 3, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN3ROW2 = 14;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 3, row 3.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN3ROW3 = 15;\r\n\r\n    Object.defineProperties(Matrix4.prototype, {\r\n        /**\r\n         * Gets the number of items in the collection.\r\n         * @memberof Matrix4.prototype\r\n         *\r\n         * @type {Number}\r\n         */\r\n        length : {\r\n            get : function() {\r\n                return Matrix4.packedLength;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Duplicates the provided Matrix4 instance.\r\n     *\r\n     * @param {Matrix4} [result] The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.prototype.clone = function(result) {\r\n        return Matrix4.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this matrix to the provided matrix componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix4} [right] The right hand side matrix.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    Matrix4.prototype.equals = function(right) {\r\n        return Matrix4.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Matrix4.equalsArray = function(matrix, array, offset) {\r\n        return matrix[0] === array[offset] &&\r\n               matrix[1] === array[offset + 1] &&\r\n               matrix[2] === array[offset + 2] &&\r\n               matrix[3] === array[offset + 3] &&\r\n               matrix[4] === array[offset + 4] &&\r\n               matrix[5] === array[offset + 5] &&\r\n               matrix[6] === array[offset + 6] &&\r\n               matrix[7] === array[offset + 7] &&\r\n               matrix[8] === array[offset + 8] &&\r\n               matrix[9] === array[offset + 9] &&\r\n               matrix[10] === array[offset + 10] &&\r\n               matrix[11] === array[offset + 11] &&\r\n               matrix[12] === array[offset + 12] &&\r\n               matrix[13] === array[offset + 13] &&\r\n               matrix[14] === array[offset + 14] &&\r\n               matrix[15] === array[offset + 15];\r\n    };\r\n\r\n    /**\r\n     * Compares this matrix to the provided matrix componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix4} [right] The right hand side matrix.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Matrix4.prototype.equalsEpsilon = function(right, epsilon) {\r\n        return Matrix4.equalsEpsilon(this, right, epsilon);\r\n    };\r\n\r\n    /**\r\n     * Computes a string representing this Matrix with each row being\r\n     * on a separate line and in the format '(column0, column1, column2, column3)'.\r\n     *\r\n     * @returns {String} A string representing the provided Matrix with each row being on a separate line and in the format '(column0, column1, column2, column3)'.\r\n     */\r\n    Matrix4.prototype.toString = function() {\r\n        return '(' + this[0] + ', ' + this[4] + ', ' + this[8] + ', ' + this[12] + ')\\n' +\r\n               '(' + this[1] + ', ' + this[5] + ', ' + this[9] + ', ' + this[13] + ')\\n' +\r\n               '(' + this[2] + ', ' + this[6] + ', ' + this[10] + ', ' + this[14] + ')\\n' +\r\n               '(' + this[3] + ', ' + this[7] + ', ' + this[11] + ', ' + this[15] + ')';\r\n    };\r\nexport default Matrix4;\r\n"],"names":["Matrix3","column0Row0","column1Row0","column2Row0","column0Row1","column1Row1","column2Row1","column0Row2","column1Row2","column2Row2","this","defaultValue","packedLength","pack","value","array","startingIndex","Check","typeOf","object","defined","unpack","result","clone","matrix","fromArray","fromColumnMajorArray","values","fromRowMajorArray","fromQuaternion","quaternion","x2","x","xy","y","xz","z","xw","w","y2","yz","yw","z2","zw","w2","m00","m01","m02","m10","m11","m12","m20","m21","m22","fromHeadingPitchRoll","headingPitchRoll","cosTheta","Math","cos","pitch","cosPsi","heading","cosPhi","roll","sinTheta","sin","sinPsi","sinPhi","fromScale","scale","fromUniformScale","number","fromCrossProduct","vector","fromRotationX","angle","cosAngle","sinAngle","fromRotationY","fromRotationZ","toArray","getElementIndex","column","row","greaterThanOrEquals","lessThanOrEquals","getColumn","index","startIndex","setColumn","cartesian","getRow","setRow","scratchColumn","Cartesian3","getScale","magnitude","fromElements","scratchScale","getMaximumScale","maximumComponent","multiply","left","right","add","subtract","multiplyByVector","vX","vY","vZ","multiplyByScalar","scalar","multiplyByScale","negate","transpose","UNIT","getRotation","inverseScale","divideComponents","rowVal","colVal","offDiagonalFrobeniusNorm","norm","i","temp","sqrt","shurDecomposition","tolerance","CesiumMath","EPSILON15","maxDiagonal","rotAxis","abs","c","s","p","q","t","tau","IDENTITY","jMatrix","jMatrixTranspose","Cartesian4","computeEigenDecomposition","EPSILON20","count","sweep","unitaryMatrix","unitary","diagMatrix","diagonal","epsilon","computeFrobeniusNorm","determinant","m31","m32","m13","m23","m33","inverse","DeveloperError","equals","equalsEpsilon","Object","freeze","ZERO","COLUMN0ROW0","COLUMN0ROW1","COLUMN0ROW2","COLUMN1ROW0","COLUMN1ROW1","COLUMN1ROW2","COLUMN2ROW0","COLUMN2ROW1","COLUMN2ROW2","defineProperties","prototype","length","get","equalsArray","offset","toString","fromColor","color","red","green","blue","alpha","packArray","resultLength","Array","isArray","unpackArray","max","minimumComponent","min","minimumByComponent","first","second","maximumByComponent","magnitudeSquared","distanceScratch","distance","distanceSquared","normalize","isNaN","dot","multiplyComponents","divideByScalar","lerpScratch","lerp","start","end","mostOrthogonalAxisScratch","mostOrthogonalAxis","f","UNIT_X","UNIT_W","UNIT_Z","UNIT_Y","relativeEpsilon","absoluteEpsilon","scratchFloatArray","Float32Array","Matrix4","column3Row0","column3Row1","column3Row2","column0Row3","column1Row3","column2Row3","column3Row3","packFloat","exponent","sign","isFinite","floor","logBase","pow","unpackFloat","packedFloat","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","unpacked","fromRotationTranslation","rotation","translation","fromTranslationQuaternionRotationScale","scaleX","scaleY","scaleZ","fromTranslationRotationScale","translationRotationScale","fromTranslation","fromCameraF","fromCameraR","fromCameraU","fromCamera","camera","position","direction","up","cross","sX","sY","sZ","fX","fY","fZ","uX","uY","uZ","positionX","positionY","positionZ","t0","t1","t2","computePerspectiveFieldOfView","fovY","aspectRatio","near","far","greaterThan","lessThan","PI","tan","computeOrthographicOffCenter","bottom","top","a","b","tx","ty","tz","computePerspectiveOffCenter","computeInfinitePerspectiveOffCenter","computeViewportTransformation","viewport","nearDepthRange","farDepthRange","EMPTY_OBJECT","width","height","halfWidth","halfHeight","halfDepth","computeView","setTranslation","scaleScratch","setScale","existingScale","newScale","left0","left1","left2","left3","left4","left5","left6","left7","left8","left9","left10","left11","left12","left13","left14","left15","right0","right1","right2","right3","right4","right5","right6","right7","right8","right9","right10","right11","right12","right13","right14","right15","multiplyTransformation","multiplyByMatrix3","multiplyByTranslation","uniformScaleScratch","multiplyByUniformScale","vW","multiplyByPointAsVector","multiplyByPoint","matrix1","matrix2","matrix3","matrix6","matrix7","matrix11","getTranslation","getMatrix3","scratchInverseRotation","scratchMatrix3Zero","scratchBottomRow","scratchExpectedBottomRow","src0","src1","src2","src3","src4","src5","src6","src7","src8","src9","src10","src11","src12","src13","src14","src15","tmp0","tmp1","tmp2","tmp3","tmp4","tmp5","tmp6","tmp7","tmp8","tmp9","tmp10","tmp11","dst0","dst1","dst2","dst3","dst4","dst5","dst6","dst7","dst8","dst9","dst10","dst11","dst12","dst13","dst14","dst15","det","EPSILON21","EPSILON7","RuntimeError","inverseTransformation","matrix0","matrix4","matrix5","matrix8","matrix9","matrix10","COLUMN0ROW3","COLUMN1ROW3","COLUMN2ROW3","COLUMN3ROW0","COLUMN3ROW1","COLUMN3ROW2","COLUMN3ROW3"],"mappings":"0KA+BI,SAASA,EAAQC,EAAaC,EAAaC,EACpBC,EAAaC,EAAaC,EAC1BC,EAAaC,EAAaC,GAC7CC,KAAK,GAAKC,eAAaV,EAAa,GACpCS,KAAK,GAAKC,eAAaP,EAAa,GACpCM,KAAK,GAAKC,eAAaJ,EAAa,GACpCG,KAAK,GAAKC,eAAaT,EAAa,GACpCQ,KAAK,GAAKC,eAAaN,EAAa,GACpCK,KAAK,GAAKC,eAAaH,EAAa,GACpCE,KAAK,GAAKC,eAAaR,EAAa,GACpCO,KAAK,GAAKC,eAAaL,EAAa,GACpCI,KAAK,GAAKC,eAAaF,EAAa,GAOxCT,EAAQY,aAAe,EAWvBZ,EAAQa,KAAO,SAASC,EAAOC,EAAOC,GAkBlC,OAhBAC,QAAMC,OAAOC,OAAO,QAASL,GAC7BG,QAAMG,QAAQ,QAASL,GAGvBC,EAAgBL,eAAaK,EAAe,GAE5CD,EAAMC,KAAmBF,EAAM,GAC/BC,EAAMC,KAAmBF,EAAM,GAC/BC,EAAMC,KAAmBF,EAAM,GAC/BC,EAAMC,KAAmBF,EAAM,GAC/BC,EAAMC,KAAmBF,EAAM,GAC/BC,EAAMC,KAAmBF,EAAM,GAC/BC,EAAMC,KAAmBF,EAAM,GAC/BC,EAAMC,KAAmBF,EAAM,GAC/BC,EAAMC,KAAmBF,EAAM,GAExBC,GAWXf,EAAQqB,OAAS,SAASN,EAAOC,EAAeM,GAoB5C,OAlBAL,QAAMG,QAAQ,QAASL,GAGvBC,EAAgBL,eAAaK,EAAe,GAEvCI,UAAQE,KACTA,EAAS,IAAItB,GAGjBsB,EAAO,GAAKP,EAAMC,KAClBM,EAAO,GAAKP,EAAMC,KAClBM,EAAO,GAAKP,EAAMC,KAClBM,EAAO,GAAKP,EAAMC,KAClBM,EAAO,GAAKP,EAAMC,KAClBM,EAAO,GAAKP,EAAMC,KAClBM,EAAO,GAAKP,EAAMC,KAClBM,EAAO,GAAKP,EAAMC,KAClBM,EAAO,GAAKP,EAAMC,KACXM,GAUXtB,EAAQuB,MAAQ,SAASC,EAAQF,GAC7B,GAAKF,UAAQI,GAGb,OAAKJ,UAAQE,IAKbA,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACZF,GAbI,IAAItB,EAAQwB,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAC7BA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAC7BA,EAAO,GAAIA,EAAO,GAAIA,EAAO,KAmCxDxB,EAAQyB,UAAY,SAASV,EAAOC,EAAeM,GAoB/C,OAlBAL,QAAMG,QAAQ,QAASL,GAGvBC,EAAgBL,eAAaK,EAAe,GAEvCI,UAAQE,KACTA,EAAS,IAAItB,GAGjBsB,EAAO,GAAKP,EAAMC,GAClBM,EAAO,GAAKP,EAAMC,EAAgB,GAClCM,EAAO,GAAKP,EAAMC,EAAgB,GAClCM,EAAO,GAAKP,EAAMC,EAAgB,GAClCM,EAAO,GAAKP,EAAMC,EAAgB,GAClCM,EAAO,GAAKP,EAAMC,EAAgB,GAClCM,EAAO,GAAKP,EAAMC,EAAgB,GAClCM,EAAO,GAAKP,EAAMC,EAAgB,GAClCM,EAAO,GAAKP,EAAMC,EAAgB,GAC3BM,GAUXtB,EAAQ0B,qBAAuB,SAASC,EAAQL,GAK5C,OAHAL,QAAMG,QAAQ,SAAUO,GAGjB3B,EAAQuB,MAAMI,EAAQL,IAWjCtB,EAAQ4B,kBAAoB,SAASD,EAAQL,GAKzC,OAHAL,QAAMG,QAAQ,SAAUO,GAGnBP,UAAQE,IAKbA,EAAO,GAAKK,EAAO,GACnBL,EAAO,GAAKK,EAAO,GACnBL,EAAO,GAAKK,EAAO,GACnBL,EAAO,GAAKK,EAAO,GACnBL,EAAO,GAAKK,EAAO,GACnBL,EAAO,GAAKK,EAAO,GACnBL,EAAO,GAAKK,EAAO,GACnBL,EAAO,GAAKK,EAAO,GACnBL,EAAO,GAAKK,EAAO,GACZL,GAbI,IAAItB,EAAQ2B,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAC7BA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAC7BA,EAAO,GAAIA,EAAO,GAAIA,EAAO,KAqBxD3B,EAAQ6B,eAAiB,SAASC,EAAYR,GAE1CL,QAAMC,OAAOC,OAAO,aAAcW,GAGlC,IAAIC,EAAKD,EAAWE,EAAIF,EAAWE,EAC/BC,EAAKH,EAAWE,EAAIF,EAAWI,EAC/BC,EAAKL,EAAWE,EAAIF,EAAWM,EAC/BC,EAAKP,EAAWE,EAAIF,EAAWQ,EAC/BC,EAAKT,EAAWI,EAAIJ,EAAWI,EAC/BM,EAAKV,EAAWI,EAAIJ,EAAWM,EAC/BK,EAAKX,EAAWI,EAAIJ,EAAWQ,EAC/BI,EAAKZ,EAAWM,EAAIN,EAAWM,EAC/BO,EAAKb,EAAWM,EAAIN,EAAWQ,EAC/BM,EAAKd,EAAWQ,EAAIR,EAAWQ,EAE/BO,EAAMd,EAAKQ,EAAKG,EAAKE,EACrBE,EAAM,GAAOb,EAAKU,GAClBI,EAAM,GAAOZ,EAAKM,GAElBO,EAAM,GAAOf,EAAKU,GAClBM,GAAOlB,EAAKQ,EAAKG,EAAKE,EACtBM,EAAM,GAAOV,EAAKH,GAElBc,EAAM,GAAOhB,EAAKM,GAClBW,EAAM,GAAOZ,EAAKH,GAClBgB,GAAOtB,EAAKQ,EAAKG,EAAKE,EAE1B,OAAKxB,UAAQE,IAKbA,EAAO,GAAKuB,EACZvB,EAAO,GAAK0B,EACZ1B,EAAO,GAAK6B,EACZ7B,EAAO,GAAKwB,EACZxB,EAAO,GAAK2B,EACZ3B,EAAO,GAAK8B,EACZ9B,EAAO,GAAKyB,EACZzB,EAAO,GAAK4B,EACZ5B,EAAO,GAAK+B,EACL/B,GAbI,IAAItB,EAAQ6C,EAAKC,EAAKC,EACVC,EAAKC,EAAKC,EACVC,EAAKC,EAAKC,IAqBrCrD,EAAQsD,qBAAuB,SAASC,EAAkBjC,GAEtDL,QAAMC,OAAOC,OAAO,mBAAoBoC,GAGxC,IAAIC,EAAWC,KAAKC,KAAKH,EAAiBI,OACtCC,EAASH,KAAKC,KAAKH,EAAiBM,SACpCC,EAASL,KAAKC,IAAIH,EAAiBQ,MACnCC,EAAWP,KAAKQ,KAAKV,EAAiBI,OACtCO,EAAST,KAAKQ,KAAKV,EAAiBM,SACpCM,EAASV,KAAKQ,IAAIV,EAAiBQ,MAEnClB,EAAMW,EAAWI,EACjBd,GAAOgB,EAASI,EAASC,EAASH,EAAWJ,EAC7Cb,EAAMoB,EAASD,EAASJ,EAASE,EAAWJ,EAE5CZ,EAAMQ,EAAWU,EACjBjB,EAAMa,EAASF,EAASO,EAASH,EAAWE,EAC5ChB,GAAOiB,EAASP,EAASE,EAASE,EAAWE,EAE7Cf,GAAOa,EACPZ,EAAMe,EAASX,EACfH,EAAMS,EAASN,EAEnB,OAAKpC,UAAQE,IAKbA,EAAO,GAAKuB,EACZvB,EAAO,GAAK0B,EACZ1B,EAAO,GAAK6B,EACZ7B,EAAO,GAAKwB,EACZxB,EAAO,GAAK2B,EACZ3B,EAAO,GAAK8B,EACZ9B,EAAO,GAAKyB,EACZzB,EAAO,GAAK4B,EACZ5B,EAAO,GAAK+B,EACL/B,GAbI,IAAItB,EAAQ6C,EAAKC,EAAKC,EACzBC,EAAKC,EAAKC,EACVC,EAAKC,EAAKC,IA4BtBrD,EAAQoE,UAAY,SAASC,EAAO/C,GAKhC,OAHAL,QAAMC,OAAOC,OAAO,QAASkD,GAGxBjD,UAAQE,IAObA,EAAO,GAAK+C,EAAMrC,EAClBV,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK+C,EAAMnC,EAClBZ,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK+C,EAAMjC,EACXd,GAfI,IAAItB,EACPqE,EAAMrC,EAAG,EAAS,EAClB,EAASqC,EAAMnC,EAAG,EAClB,EAAS,EAASmC,EAAMjC,IA6BpCpC,EAAQsE,iBAAmB,SAASD,EAAO/C,GAKvC,OAHAL,QAAMC,OAAOqD,OAAO,QAASF,GAGxBjD,UAAQE,IAObA,EAAO,GAAK+C,EACZ/C,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK+C,EACZ/C,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK+C,EACL/C,GAfI,IAAItB,EACPqE,EAAO,EAAO,EACd,EAAOA,EAAO,EACd,EAAO,EAAOA,IA6B1BrE,EAAQwE,iBAAmB,SAASC,EAAQnD,GAKxC,OAHAL,QAAMC,OAAOC,OAAO,SAAUsD,GAGzBrD,UAAQE,IAObA,EAAO,GAAK,EACZA,EAAO,GAAKmD,EAAOrC,EACnBd,EAAO,IAAMmD,EAAOvC,EACpBZ,EAAO,IAAMmD,EAAOrC,EACpBd,EAAO,GAAK,EACZA,EAAO,GAAKmD,EAAOzC,EACnBV,EAAO,GAAKmD,EAAOvC,EACnBZ,EAAO,IAAMmD,EAAOzC,EACpBV,EAAO,GAAK,EACLA,GAfI,IAAItB,EACD,GAAMyE,EAAOrC,EAAIqC,EAAOvC,EAC7BuC,EAAOrC,EAAS,GAAMqC,EAAOzC,GAC7ByC,EAAOvC,EAAIuC,EAAOzC,EAAS,IA4BxChC,EAAQ0E,cAAgB,SAASC,EAAOrD,GAEpCL,QAAMC,OAAOqD,OAAO,QAASI,GAG7B,IAAIC,EAAWnB,KAAKC,IAAIiB,GACpBE,EAAWpB,KAAKQ,IAAIU,GAExB,OAAKvD,UAAQE,IAObA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAKsD,EACZtD,EAAO,GAAKuD,EACZvD,EAAO,GAAK,EACZA,EAAO,IAAMuD,EACbvD,EAAO,GAAKsD,EAELtD,GAhBI,IAAItB,EACP,EAAK,EAAK,EACV,EAAK4E,GAAWC,EAChB,EAAKA,EAAUD,IA6B3B5E,EAAQ8E,cAAgB,SAASH,EAAOrD,GAEpCL,QAAMC,OAAOqD,OAAO,QAASI,GAG7B,IAAIC,EAAWnB,KAAKC,IAAIiB,GACpBE,EAAWpB,KAAKQ,IAAIU,GAExB,OAAKvD,UAAQE,IAObA,EAAO,GAAKsD,EACZtD,EAAO,GAAK,EACZA,EAAO,IAAMuD,EACbvD,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAKuD,EACZvD,EAAO,GAAK,EACZA,EAAO,GAAKsD,EAELtD,GAhBI,IAAItB,EACP4E,EAAU,EAAKC,EACf,EAAK,EAAK,GACTA,EAAU,EAAKD,IA6B5B5E,EAAQ+E,cAAgB,SAASJ,EAAOrD,GAEpCL,QAAMC,OAAOqD,OAAO,QAASI,GAG7B,IAAIC,EAAWnB,KAAKC,IAAIiB,GACpBE,EAAWpB,KAAKQ,IAAIU,GAExB,OAAKvD,UAAQE,IAObA,EAAO,GAAKsD,EACZtD,EAAO,GAAKuD,EACZvD,EAAO,GAAK,EACZA,EAAO,IAAMuD,EACbvD,EAAO,GAAKsD,EACZtD,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EAELA,GAhBI,IAAItB,EACP4E,GAAWC,EAAU,EACrBA,EAAUD,EAAU,EACpB,EAAK,EAAK,IAwBtB5E,EAAQgF,QAAU,SAASxD,EAAQF,GAK/B,OAHAL,QAAMC,OAAOC,OAAO,SAAUK,GAGzBJ,UAAQE,IAGbA,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACZF,GAXI,CAACE,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,KA8B/GxB,EAAQiF,gBAAkB,SAASC,EAAQC,GAQvC,OANAlE,QAAMC,OAAOqD,OAAOa,oBAAoB,MAAOD,EAAK,GACpDlE,QAAMC,OAAOqD,OAAOc,iBAAiB,MAAOF,EAAK,GACjDlE,QAAMC,OAAOqD,OAAOa,oBAAoB,SAAUF,EAAQ,GAC1DjE,QAAMC,OAAOqD,OAAOc,iBAAiB,SAAUH,EAAQ,GAGvC,EAATA,EAAaC,GAaxBnF,EAAQsF,UAAY,SAAS9D,EAAQ+D,EAAOjE,GAExCL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOqD,OAAOa,oBAAoB,QAASG,EAAO,GACxDtE,QAAMC,OAAOqD,OAAOc,iBAAiB,QAASE,EAAO,GACrDtE,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAIkE,EAAqB,EAARD,EACbvD,EAAIR,EAAOgE,GACXtD,EAAIV,EAAOgE,EAAa,GACxBpD,EAAIZ,EAAOgE,EAAa,GAK5B,OAHAlE,EAAOU,EAAIA,EACXV,EAAOY,EAAIA,EACXZ,EAAOc,EAAIA,EACJd,GAcXtB,EAAQyF,UAAY,SAASjE,EAAQ+D,EAAOG,EAAWpE,GAEnDL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOqD,OAAOa,oBAAoB,QAASG,EAAO,GACxDtE,QAAMC,OAAOqD,OAAOc,iBAAiB,QAASE,EAAO,GACrDtE,QAAMC,OAAOC,OAAO,YAAauE,GACjCzE,QAAMC,OAAOC,OAAO,SAAUG,GAI9B,IAAIkE,EAAqB,EAARD,EAIjB,OALAjE,EAAStB,EAAQuB,MAAMC,EAAQF,IAExBkE,GAAcE,EAAU1D,EAC/BV,EAAOkE,EAAa,GAAKE,EAAUxD,EACnCZ,EAAOkE,EAAa,GAAKE,EAAUtD,EAC5Bd,GAaXtB,EAAQ2F,OAAS,SAASnE,EAAQ+D,EAAOjE,GAErCL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOqD,OAAOa,oBAAoB,QAASG,EAAO,GACxDtE,QAAMC,OAAOqD,OAAOc,iBAAiB,QAASE,EAAO,GACrDtE,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAIU,EAAIR,EAAO+D,GACXrD,EAAIV,EAAO+D,EAAQ,GACnBnD,EAAIZ,EAAO+D,EAAQ,GAKvB,OAHAjE,EAAOU,EAAIA,EACXV,EAAOY,EAAIA,EACXZ,EAAOc,EAAIA,EACJd,GAcXtB,EAAQ4F,OAAS,SAASpE,EAAQ+D,EAAOG,EAAWpE,GAahD,OAXAL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOqD,OAAOa,oBAAoB,QAASG,EAAO,GACxDtE,QAAMC,OAAOqD,OAAOc,iBAAiB,QAASE,EAAO,GACrDtE,QAAMC,OAAOC,OAAO,YAAauE,GACjCzE,QAAMC,OAAOC,OAAO,SAAUG,IAG9BA,EAAStB,EAAQuB,MAAMC,EAAQF,IACxBiE,GAASG,EAAU1D,EAC1BV,EAAOiE,EAAQ,GAAKG,EAAUxD,EAC9BZ,EAAOiE,EAAQ,GAAKG,EAAUtD,EACvBd,GAGX,IAAIuE,EAAgB,IAAIC,aASxB9F,EAAQ+F,SAAW,SAASvE,EAAQF,GAShC,OAPAL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAOU,EAAI8D,aAAWE,UAAUF,aAAWG,aAAazE,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIqE,IACzFvE,EAAOY,EAAI4D,aAAWE,UAAUF,aAAWG,aAAazE,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIqE,IACzFvE,EAAOc,EAAI0D,aAAWE,UAAUF,aAAWG,aAAazE,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIqE,IAClFvE,GAGX,IAAI4E,EAAe,IAAIJ,aASvB9F,EAAQmG,gBAAkB,SAAS3E,GAE/B,OADAxB,EAAQ+F,SAASvE,EAAQ0E,GAClBJ,aAAWM,iBAAiBF,IAWvClG,EAAQqG,SAAW,SAASC,EAAMC,EAAOjF,GAErCL,QAAMC,OAAOC,OAAO,OAAQmF,GAC5BrF,QAAMC,OAAOC,OAAO,QAASoF,GAC7BtF,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAIrB,EAAcqG,EAAK,GAAKC,EAAM,GAAKD,EAAK,GAAKC,EAAM,GAAKD,EAAK,GAAKC,EAAM,GACxEnG,EAAckG,EAAK,GAAKC,EAAM,GAAKD,EAAK,GAAKC,EAAM,GAAKD,EAAK,GAAKC,EAAM,GACxEhG,EAAc+F,EAAK,GAAKC,EAAM,GAAKD,EAAK,GAAKC,EAAM,GAAKD,EAAK,GAAKC,EAAM,GAExErG,EAAcoG,EAAK,GAAKC,EAAM,GAAKD,EAAK,GAAKC,EAAM,GAAKD,EAAK,GAAKC,EAAM,GACxElG,EAAciG,EAAK,GAAKC,EAAM,GAAKD,EAAK,GAAKC,EAAM,GAAKD,EAAK,GAAKC,EAAM,GACxE/F,EAAc8F,EAAK,GAAKC,EAAM,GAAKD,EAAK,GAAKC,EAAM,GAAKD,EAAK,GAAKC,EAAM,GAExEpG,EAAcmG,EAAK,GAAKC,EAAM,GAAKD,EAAK,GAAKC,EAAM,GAAKD,EAAK,GAAKC,EAAM,GACxEjG,EAAcgG,EAAK,GAAKC,EAAM,GAAKD,EAAK,GAAKC,EAAM,GAAKD,EAAK,GAAKC,EAAM,GACxE9F,EAAc6F,EAAK,GAAKC,EAAM,GAAKD,EAAK,GAAKC,EAAM,GAAKD,EAAK,GAAKC,EAAM,GAW5E,OATAjF,EAAO,GAAKrB,EACZqB,EAAO,GAAKlB,EACZkB,EAAO,GAAKf,EACZe,EAAO,GAAKpB,EACZoB,EAAO,GAAKjB,EACZiB,EAAO,GAAKd,EACZc,EAAO,GAAKnB,EACZmB,EAAO,GAAKhB,EACZgB,EAAO,GAAKb,EACLa,GAWXtB,EAAQwG,IAAM,SAASF,EAAMC,EAAOjF,GAgBhC,OAdAL,QAAMC,OAAOC,OAAO,OAAQmF,GAC5BrF,QAAMC,OAAOC,OAAO,QAASoF,GAC7BtF,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GACrBjF,GAWXtB,EAAQyG,SAAW,SAASH,EAAMC,EAAOjF,GAgBrC,OAdAL,QAAMC,OAAOC,OAAO,OAAQmF,GAC5BrF,QAAMC,OAAOC,OAAO,QAASoF,GAC7BtF,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GACrBjF,GAWXtB,EAAQ0G,iBAAmB,SAASlF,EAAQkE,EAAWpE,GAEnDL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,YAAauE,GACjCzE,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAIqF,EAAKjB,EAAU1D,EACf4E,EAAKlB,EAAUxD,EACf2E,EAAKnB,EAAUtD,EAEfJ,EAAIR,EAAO,GAAKmF,EAAKnF,EAAO,GAAKoF,EAAKpF,EAAO,GAAKqF,EAClD3E,EAAIV,EAAO,GAAKmF,EAAKnF,EAAO,GAAKoF,EAAKpF,EAAO,GAAKqF,EAClDzE,EAAIZ,EAAO,GAAKmF,EAAKnF,EAAO,GAAKoF,EAAKpF,EAAO,GAAKqF,EAKtD,OAHAvF,EAAOU,EAAIA,EACXV,EAAOY,EAAIA,EACXZ,EAAOc,EAAIA,EACJd,GAWXtB,EAAQ8G,iBAAmB,SAAStF,EAAQuF,EAAQzF,GAgBhD,OAdAL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOqD,OAAO,SAAUwC,GAC9B9F,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAO,GAAKE,EAAO,GAAKuF,EACxBzF,EAAO,GAAKE,EAAO,GAAKuF,EACxBzF,EAAO,GAAKE,EAAO,GAAKuF,EACxBzF,EAAO,GAAKE,EAAO,GAAKuF,EACxBzF,EAAO,GAAKE,EAAO,GAAKuF,EACxBzF,EAAO,GAAKE,EAAO,GAAKuF,EACxBzF,EAAO,GAAKE,EAAO,GAAKuF,EACxBzF,EAAO,GAAKE,EAAO,GAAKuF,EACxBzF,EAAO,GAAKE,EAAO,GAAKuF,EACjBzF,GAmBXtB,EAAQgH,gBAAkB,SAASxF,EAAQ6C,EAAO/C,GAgB9C,OAdAL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,QAASkD,GAC7BpD,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAO,GAAKE,EAAO,GAAK6C,EAAMrC,EAC9BV,EAAO,GAAKE,EAAO,GAAK6C,EAAMrC,EAC9BV,EAAO,GAAKE,EAAO,GAAK6C,EAAMrC,EAC9BV,EAAO,GAAKE,EAAO,GAAK6C,EAAMnC,EAC9BZ,EAAO,GAAKE,EAAO,GAAK6C,EAAMnC,EAC9BZ,EAAO,GAAKE,EAAO,GAAK6C,EAAMnC,EAC9BZ,EAAO,GAAKE,EAAO,GAAK6C,EAAMjC,EAC9Bd,EAAO,GAAKE,EAAO,GAAK6C,EAAMjC,EAC9Bd,EAAO,GAAKE,EAAO,GAAK6C,EAAMjC,EACvBd,GAUXtB,EAAQiH,OAAS,SAASzF,EAAQF,GAe9B,OAbAL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAO,IAAME,EAAO,GACpBF,EAAO,IAAME,EAAO,GACpBF,EAAO,IAAME,EAAO,GACpBF,EAAO,IAAME,EAAO,GACpBF,EAAO,IAAME,EAAO,GACpBF,EAAO,IAAME,EAAO,GACpBF,EAAO,IAAME,EAAO,GACpBF,EAAO,IAAME,EAAO,GACpBF,EAAO,IAAME,EAAO,GACbF,GAUXtB,EAAQkH,UAAY,SAAS1F,EAAQF,GAEjCL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAIrB,EAAcuB,EAAO,GACrBpB,EAAcoB,EAAO,GACrBjB,EAAciB,EAAO,GACrBtB,EAAcsB,EAAO,GACrBnB,EAAcmB,EAAO,GACrBhB,EAAcgB,EAAO,GACrBrB,EAAcqB,EAAO,GACrBlB,EAAckB,EAAO,GACrBf,EAAce,EAAO,GAWzB,OATAF,EAAO,GAAKrB,EACZqB,EAAO,GAAKlB,EACZkB,EAAO,GAAKf,EACZe,EAAO,GAAKpB,EACZoB,EAAO,GAAKjB,EACZiB,EAAO,GAAKd,EACZc,EAAO,GAAKnB,EACZmB,EAAO,GAAKhB,EACZgB,EAAO,GAAKb,EACLa,GAGX,IAAI6F,EAAO,IAAIrB,aAAW,EAAG,EAAG,GAShC9F,EAAQoH,YAAc,SAAS5F,EAAQF,GAEnCL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAI+F,EAAevB,aAAWwB,iBAAiBH,EAAMnH,EAAQ+F,SAASvE,EAAQ0E,GAAeA,GAG7F,OAFA5E,EAAStB,EAAQgH,gBAAgBxF,EAAQ6F,EAAc/F,IAe3D,IAAIiG,EAAS,CAAC,EAAG,EAAG,GAChBC,EAAS,CAAC,EAAG,EAAG,GAEpB,SAASC,EAAyBjG,GAK9B,IADA,IAAIkG,EAAO,EACFC,EAAI,EAAGA,EAAI,IAAKA,EAAG,CACxB,IAAIC,EAAOpG,EAAOxB,EAAQiF,gBAAgBuC,EAAOG,GAAIJ,EAAOI,KAC5DD,GAAQ,EAAME,EAAOA,EAGzB,OAAOnE,KAAKoE,KAAKH,GAGrB,SAASI,EAAkBtG,EAAQF,GAc/B,IANA,IAAIyG,EAAYC,aAAWC,UAEvBC,EAAc,EACdC,EAAU,EAGLR,EAAI,EAAGA,EAAI,IAAKA,EAAG,CACxB,IAAIC,EAAOnE,KAAK2E,IAAI5G,EAAOxB,EAAQiF,gBAAgBuC,EAAOG,GAAIJ,EAAOI,MACjEC,EAAOM,IACPC,EAAUR,EACVO,EAAcN,GAItB,IAAIS,EAAI,EACJC,EAAI,EAEJC,EAAIhB,EAAOY,GACXK,EAAIhB,EAAOW,GAEf,GAAI1E,KAAK2E,IAAI5G,EAAOxB,EAAQiF,gBAAgBuD,EAAGD,KAAOR,EAAW,CAC7D,IAKIU,EADAC,GAJKlH,EAAOxB,EAAQiF,gBAAgBuD,EAAGA,IAClChH,EAAOxB,EAAQiF,gBAAgBsD,EAAGA,KAGrB,EAFb/G,EAAOxB,EAAQiF,gBAAgBuD,EAAGD,IAY3CD,GANIG,EADAC,EAAM,GACD,IAAQA,EAAMjF,KAAKoE,KAAK,EAAMa,EAAMA,IAErC,GAAOA,EAAMjF,KAAKoE,KAAK,EAAMa,EAAMA,MAG3CL,EAAI,EAAM5E,KAAKoE,KAAK,EAAMY,EAAIA,IAUlC,OANAnH,EAAStB,EAAQuB,MAAMvB,EAAQ2I,SAAUrH,IAElCtB,EAAQiF,gBAAgBsD,EAAGA,IAAMjH,EAAOtB,EAAQiF,gBAAgBuD,EAAGA,IAAMH,EAChF/G,EAAOtB,EAAQiF,gBAAgBuD,EAAGD,IAAMD,EACxChH,EAAOtB,EAAQiF,gBAAgBsD,EAAGC,KAAOF,EAElChH,EAGX,IAAIsH,EAAU,IAAI5I,EACd6I,EAAmB,IAAI7I,ECvkC3B,SAAS8I,EAAW9G,EAAGE,EAAGE,EAAGE,GAMzB5B,KAAKsB,EAAIrB,eAAaqB,EAAG,GAOzBtB,KAAKwB,EAAIvB,eAAauB,EAAG,GAOzBxB,KAAK0B,EAAIzB,eAAayB,EAAG,GAOzB1B,KAAK4B,EAAI3B,eAAa2B,EAAG,GD6kC7BtC,EAAQ+I,0BAA4B,SAASvH,EAAQF,GAEjDL,QAAMC,OAAOC,OAAO,SAAUK,GAM9B,IAAIuG,EAAYC,aAAWgB,UAGvBC,EAAQ,EACRC,EAAQ,EAEP9H,UAAQE,KACTA,EAAS,IAQb,IALA,IAAI6H,EAAgB7H,EAAO8H,QAAUpJ,EAAQuB,MAAMvB,EAAQ2I,SAAUrH,EAAO8H,SACxEC,EAAa/H,EAAOgI,SAAWtJ,EAAQuB,MAAMC,EAAQF,EAAOgI,UAE5DC,EAAUxB,EAxIlB,SAA8BvG,GAE1B,IADA,IAAIkG,EAAO,EACFC,EAAI,EAAGA,EAAI,IAAKA,EAAG,CACxB,IAAIC,EAAOpG,EAAOmG,GAClBD,GAAQE,EAAOA,EAGnB,OAAOnE,KAAKoE,KAAKH,GAiIS8B,CAAqBH,GAExCH,EAdS,IAcYzB,EAAyB4B,GAAcE,GAC/DzB,EAAkBuB,EAAYT,GAC9B5I,EAAQkH,UAAU0B,EAASC,GAC3B7I,EAAQqG,SAASgD,EAAYT,EAASS,GACtCrJ,EAAQqG,SAASwC,EAAkBQ,EAAYA,GAC/CrJ,EAAQqG,SAAS8C,EAAeP,EAASO,KAEnCF,EAAQ,MACRC,EACFD,EAAQ,GAIhB,OAAO3H,GAUXtB,EAAQoI,IAAM,SAAS5G,EAAQF,GAgB3B,OAdAL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAC5BF,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAC5BF,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAC5BF,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAC5BF,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAC5BF,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAC5BF,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAC5BF,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAC5BF,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAErBF,GASXtB,EAAQyJ,YAAc,SAASjI,GAE3BP,QAAMC,OAAOC,OAAO,SAAUK,GAG9B,IAAIyB,EAAMzB,EAAO,GACb4B,EAAM5B,EAAO,GACbkI,EAAMlI,EAAO,GACb0B,EAAM1B,EAAO,GACb6B,EAAM7B,EAAO,GACbmI,EAAMnI,EAAO,GACboI,EAAMpI,EAAO,GACbqI,EAAMrI,EAAO,GACbsI,EAAMtI,EAAO,GAEjB,OAAOyB,GAAOI,EAAMyG,EAAMD,EAAMF,GAAOzG,GAAO2G,EAAMH,EAAMtG,EAAM0G,GAAOF,GAAOxG,EAAMuG,EAAMtG,EAAMqG,IAYpG1J,EAAQ+J,QAAU,SAASvI,EAAQF,GAE/BL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAI2B,EAAMzB,EAAO,GACb4B,EAAM5B,EAAO,GACbkI,EAAMlI,EAAO,GACb0B,EAAM1B,EAAO,GACb6B,EAAM7B,EAAO,GACbmI,EAAMnI,EAAO,GACboI,EAAMpI,EAAO,GACbqI,EAAMrI,EAAO,GACbsI,EAAMtI,EAAO,GAEbiI,EAAczJ,EAAQyJ,YAAYjI,GAGtC,GAAIiC,KAAK2E,IAAIqB,IAAgBzB,aAAWC,UACpC,MAAM,IAAI+B,iBAAe,4BAI7B1I,EAAO,GAAK+B,EAAMyG,EAAMD,EAAMF,EAC9BrI,EAAO,GAAKuI,EAAMH,EAAMtG,EAAM0G,EAC9BxI,EAAO,GAAK8B,EAAMuG,EAAMtG,EAAMqG,EAC9BpI,EAAO,GAAKsI,EAAMD,EAAMzG,EAAM4G,EAC9BxI,EAAO,GAAK2B,EAAM6G,EAAMF,EAAMF,EAC9BpI,EAAO,GAAK4B,EAAMwG,EAAMzG,EAAM0G,EAC9BrI,EAAO,GAAK4B,EAAM2G,EAAMD,EAAMvG,EAC9B/B,EAAO,GAAKsI,EAAMxG,EAAMH,EAAM4G,EAC9BvI,EAAO,GAAK2B,EAAMI,EAAMH,EAAME,EAE/B,IAAIiB,EAAQ,EAAMoF,EAClB,OAAOzJ,EAAQ8G,iBAAiBxF,EAAQ+C,EAAO/C,IAWlDtB,EAAQiK,OAAS,SAAS3D,EAAMC,GAC5B,OAAQD,IAASC,GACTnF,UAAQkF,IACRlF,UAAQmF,IACRD,EAAK,KAAOC,EAAM,IAClBD,EAAK,KAAOC,EAAM,IAClBD,EAAK,KAAOC,EAAM,IAClBD,EAAK,KAAOC,EAAM,IAClBD,EAAK,KAAOC,EAAM,IAClBD,EAAK,KAAOC,EAAM,IAClBD,EAAK,KAAOC,EAAM,IAClBD,EAAK,KAAOC,EAAM,IAClBD,EAAK,KAAOC,EAAM,IAa9BvG,EAAQkK,cAAgB,SAAS5D,EAAMC,EAAOgD,GAK1C,OAHAtI,QAAMC,OAAOqD,OAAO,UAAWgF,GAGvBjD,IAASC,GACRnF,UAAQkF,IACTlF,UAAQmF,IACR9C,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAChC9F,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAChC9F,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAChC9F,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAChC9F,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAChC9F,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAChC9F,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAChC9F,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAChC9F,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAS5CvJ,EAAQ2I,SAAWwB,OAAOC,OAAO,IAAIpK,EAAQ,EAAK,EAAK,EACX,EAAK,EAAK,EACV,EAAK,EAAK,IAQtDA,EAAQqK,KAAOF,OAAOC,OAAO,IAAIpK,EAAQ,EAAK,EAAK,EACX,EAAK,EAAK,EACV,EAAK,EAAK,IAQlDA,EAAQsK,YAAc,EAQtBtK,EAAQuK,YAAc,EAQtBvK,EAAQwK,YAAc,EAQtBxK,EAAQyK,YAAc,EAQtBzK,EAAQ0K,YAAc,EAQtB1K,EAAQ2K,YAAc,EAQtB3K,EAAQ4K,YAAc,EAQtB5K,EAAQ6K,YAAc,EAQtB7K,EAAQ8K,YAAc,EAEtBX,OAAOY,iBAAiB/K,EAAQgL,UAAW,CAOvCC,OAAS,CACLC,IAAM,WACF,OAAOlL,EAAQY,iBAW3BZ,EAAQgL,UAAUzJ,MAAQ,SAASD,GAC/B,OAAOtB,EAAQuB,MAAMb,KAAMY,IAU/BtB,EAAQgL,UAAUf,OAAS,SAAS1D,GAChC,OAAOvG,EAAQiK,OAAOvJ,KAAM6F,IAMhCvG,EAAQmL,YAAc,SAAS3J,EAAQT,EAAOqK,GAC1C,OAAO5J,EAAO,KAAOT,EAAMqK,IACpB5J,EAAO,KAAOT,EAAMqK,EAAS,IAC7B5J,EAAO,KAAOT,EAAMqK,EAAS,IAC7B5J,EAAO,KAAOT,EAAMqK,EAAS,IAC7B5J,EAAO,KAAOT,EAAMqK,EAAS,IAC7B5J,EAAO,KAAOT,EAAMqK,EAAS,IAC7B5J,EAAO,KAAOT,EAAMqK,EAAS,IAC7B5J,EAAO,KAAOT,EAAMqK,EAAS,IAC7B5J,EAAO,KAAOT,EAAMqK,EAAS,IAYxCpL,EAAQgL,UAAUd,cAAgB,SAAS3D,EAAOgD,GAC9C,OAAOvJ,EAAQkK,cAAcxJ,KAAM6F,EAAOgD,IAS9CvJ,EAAQgL,UAAUK,SAAW,WACzB,MAAO,IAAM3K,KAAK,GAAK,KAAOA,KAAK,GAAK,KAAOA,KAAK,GAAK,OAC5CA,KAAK,GAAK,KAAOA,KAAK,GAAK,KAAOA,KAAK,GAAK,OAC5CA,KAAK,GAAK,KAAOA,KAAK,GAAK,KAAOA,KAAK,GAAK,KCh6C7DoI,EAAW7C,aAAe,SAASjE,EAAGE,EAAGE,EAAGE,EAAGhB,GAC3C,OAAKF,UAAQE,IAIbA,EAAOU,EAAIA,EACXV,EAAOY,EAAIA,EACXZ,EAAOc,EAAIA,EACXd,EAAOgB,EAAIA,EACJhB,GAPI,IAAIwH,EAAW9G,EAAGE,EAAGE,EAAGE,IAkBvCwG,EAAWwC,UAAY,SAASC,EAAOjK,GAInC,OAFAL,QAAMC,OAAOC,OAAO,QAASoK,GAExBnK,UAAQE,IAIbA,EAAOU,EAAIuJ,EAAMC,IACjBlK,EAAOY,EAAIqJ,EAAME,MACjBnK,EAAOc,EAAImJ,EAAMG,KACjBpK,EAAOgB,EAAIiJ,EAAMI,MACVrK,GAPI,IAAIwH,EAAWyC,EAAMC,IAAKD,EAAME,MAAOF,EAAMG,KAAMH,EAAMI,QAiBxE7C,EAAWvH,MAAQ,SAASmE,EAAWpE,GACnC,GAAKF,UAAQsE,GAIb,OAAKtE,UAAQE,IAIbA,EAAOU,EAAI0D,EAAU1D,EACrBV,EAAOY,EAAIwD,EAAUxD,EACrBZ,EAAOc,EAAIsD,EAAUtD,EACrBd,EAAOgB,EAAIoD,EAAUpD,EACdhB,GAPI,IAAIwH,EAAWpD,EAAU1D,EAAG0D,EAAUxD,EAAGwD,EAAUtD,EAAGsD,EAAUpD,IAc/EwG,EAAWlI,aAAe,EAW1BkI,EAAWjI,KAAO,SAASC,EAAOC,EAAOC,GAarC,OAXAC,QAAMC,OAAOC,OAAO,QAASL,GAC7BG,QAAMG,QAAQ,QAASL,GAGvBC,EAAgBL,eAAaK,EAAe,GAE5CD,EAAMC,KAAmBF,EAAMkB,EAC/BjB,EAAMC,KAAmBF,EAAMoB,EAC/BnB,EAAMC,KAAmBF,EAAMsB,EAC/BrB,EAAMC,GAAiBF,EAAMwB,EAEtBvB,GAWX+H,EAAWzH,OAAS,SAASN,EAAOC,EAAeM,GAc/C,OAZAL,QAAMG,QAAQ,QAASL,GAGvBC,EAAgBL,eAAaK,EAAe,GAEvCI,UAAQE,KACTA,EAAS,IAAIwH,GAEjBxH,EAAOU,EAAIjB,EAAMC,KACjBM,EAAOY,EAAInB,EAAMC,KACjBM,EAAOc,EAAIrB,EAAMC,KACjBM,EAAOgB,EAAIvB,EAAMC,GACVM,GAWXwH,EAAW8C,UAAY,SAAS7K,EAAOO,GAEnCL,QAAMG,QAAQ,QAASL,GAGvB,IAAIkK,EAASlK,EAAMkK,OACfY,EAAwB,EAATZ,EACnB,GAAK7J,UAAQE,GAEN,CAAA,IAAKwK,MAAMC,QAAQzK,IAAWA,EAAO2J,SAAWY,EACnD,MAAM,IAAI7B,iBAAe,8EAClB1I,EAAO2J,SAAWY,IACzBvK,EAAO2J,OAASY,QAJhBvK,EAAS,IAAIwK,MAAMD,GAOvB,IAAK,IAAIlE,EAAI,EAAGA,EAAIsD,IAAUtD,EAC1BmB,EAAWjI,KAAKE,EAAM4G,GAAIrG,EAAY,EAAJqG,GAEtC,OAAOrG,GAUXwH,EAAWkD,YAAc,SAASjL,EAAOO,GAIrC,GAFAL,QAAMG,QAAQ,QAASL,GACvBE,QAAMC,OAAOqD,OAAOa,oBAAoB,eAAgBrE,EAAMkK,OAAQ,GAClElK,EAAMkK,OAAS,GAAM,EACrB,MAAM,IAAIjB,iBAAe,yCAI7B,IAAIiB,EAASlK,EAAMkK,OACd7J,UAAQE,GAGTA,EAAO2J,OAASA,EAAS,EAFzB3J,EAAS,IAAIwK,MAAMb,EAAS,GAKhC,IAAK,IAAItD,EAAI,EAAGA,EAAIsD,EAAQtD,GAAK,EAAG,CAChC,IAAIpC,EAAQoC,EAAI,EAChBrG,EAAOiE,GAASuD,EAAWzH,OAAON,EAAO4G,EAAGrG,EAAOiE,IAEvD,OAAOjE,GAqBXwH,EAAWrH,UAAYqH,EAAWzH,OAQlCyH,EAAW1C,iBAAmB,SAASV,GAKnC,OAHAzE,QAAMC,OAAOC,OAAO,YAAauE,GAG1BjC,KAAKwI,IAAIvG,EAAU1D,EAAG0D,EAAUxD,EAAGwD,EAAUtD,EAAGsD,EAAUpD,IASrEwG,EAAWoD,iBAAmB,SAASxG,GAKnC,OAHAzE,QAAMC,OAAOC,OAAO,YAAauE,GAG1BjC,KAAK0I,IAAIzG,EAAU1D,EAAG0D,EAAUxD,EAAGwD,EAAUtD,EAAGsD,EAAUpD,IAWrEwG,EAAWsD,mBAAqB,SAASC,EAAOC,EAAQhL,GAYpD,OAVAL,QAAMC,OAAOC,OAAO,QAASkL,GAC7BpL,QAAMC,OAAOC,OAAO,SAAUmL,GAC9BrL,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAOU,EAAIyB,KAAK0I,IAAIE,EAAMrK,EAAGsK,EAAOtK,GACpCV,EAAOY,EAAIuB,KAAK0I,IAAIE,EAAMnK,EAAGoK,EAAOpK,GACpCZ,EAAOc,EAAIqB,KAAK0I,IAAIE,EAAMjK,EAAGkK,EAAOlK,GACpCd,EAAOgB,EAAImB,KAAK0I,IAAIE,EAAM/J,EAAGgK,EAAOhK,GAE7BhB,GAWXwH,EAAWyD,mBAAqB,SAASF,EAAOC,EAAQhL,GAYpD,OAVAL,QAAMC,OAAOC,OAAO,QAASkL,GAC7BpL,QAAMC,OAAOC,OAAO,SAAUmL,GAC9BrL,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAOU,EAAIyB,KAAKwI,IAAII,EAAMrK,EAAGsK,EAAOtK,GACpCV,EAAOY,EAAIuB,KAAKwI,IAAII,EAAMnK,EAAGoK,EAAOpK,GACpCZ,EAAOc,EAAIqB,KAAKwI,IAAII,EAAMjK,EAAGkK,EAAOlK,GACpCd,EAAOgB,EAAImB,KAAKwI,IAAII,EAAM/J,EAAGgK,EAAOhK,GAE7BhB,GASXwH,EAAW0D,iBAAmB,SAAS9G,GAKnC,OAHAzE,QAAMC,OAAOC,OAAO,YAAauE,GAG1BA,EAAU1D,EAAI0D,EAAU1D,EAAI0D,EAAUxD,EAAIwD,EAAUxD,EAAIwD,EAAUtD,EAAIsD,EAAUtD,EAAIsD,EAAUpD,EAAIoD,EAAUpD,GASvHwG,EAAW9C,UAAY,SAASN,GAC5B,OAAOjC,KAAKoE,KAAKiB,EAAW0D,iBAAiB9G,KAGjD,IAAI+G,EAAkB,IAAI3D,EAe1BA,EAAW4D,SAAW,SAASpG,EAAMC,GAOjC,OALAtF,QAAMC,OAAOC,OAAO,OAAQmF,GAC5BrF,QAAMC,OAAOC,OAAO,QAASoF,GAG7BuC,EAAWrC,SAASH,EAAMC,EAAOkG,GAC1B3D,EAAW9C,UAAUyG,IAiBhC3D,EAAW6D,gBAAkB,SAASrG,EAAMC,GAOxC,OALAtF,QAAMC,OAAOC,OAAO,OAAQmF,GAC5BrF,QAAMC,OAAOC,OAAO,QAASoF,GAG7BuC,EAAWrC,SAASH,EAAMC,EAAOkG,GAC1B3D,EAAW0D,iBAAiBC,IAUvC3D,EAAW8D,UAAY,SAASlH,EAAWpE,GAEvCL,QAAMC,OAAOC,OAAO,YAAauE,GACjCzE,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAI0E,EAAY8C,EAAW9C,UAAUN,GAQrC,GANApE,EAAOU,EAAI0D,EAAU1D,EAAIgE,EACzB1E,EAAOY,EAAIwD,EAAUxD,EAAI8D,EACzB1E,EAAOc,EAAIsD,EAAUtD,EAAI4D,EACzB1E,EAAOgB,EAAIoD,EAAUpD,EAAI0D,EAGrB6G,MAAMvL,EAAOU,IAAM6K,MAAMvL,EAAOY,IAAM2K,MAAMvL,EAAOc,IAAMyK,MAAMvL,EAAOgB,GACtE,MAAM,IAAI0H,iBAAe,qCAI7B,OAAO1I,GAUXwH,EAAWgE,IAAM,SAASxG,EAAMC,GAM5B,OAJAtF,QAAMC,OAAOC,OAAO,OAAQmF,GAC5BrF,QAAMC,OAAOC,OAAO,QAASoF,GAGtBD,EAAKtE,EAAIuE,EAAMvE,EAAIsE,EAAKpE,EAAIqE,EAAMrE,EAAIoE,EAAKlE,EAAImE,EAAMnE,EAAIkE,EAAKhE,EAAIiE,EAAMjE,GAWnFwG,EAAWiE,mBAAqB,SAASzG,EAAMC,EAAOjF,GAWlD,OATAL,QAAMC,OAAOC,OAAO,OAAQmF,GAC5BrF,QAAMC,OAAOC,OAAO,QAASoF,GAC7BtF,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAOU,EAAIsE,EAAKtE,EAAIuE,EAAMvE,EAC1BV,EAAOY,EAAIoE,EAAKpE,EAAIqE,EAAMrE,EAC1BZ,EAAOc,EAAIkE,EAAKlE,EAAImE,EAAMnE,EAC1Bd,EAAOgB,EAAIgE,EAAKhE,EAAIiE,EAAMjE,EACnBhB,GAWXwH,EAAWxB,iBAAmB,SAAShB,EAAMC,EAAOjF,GAWhD,OATAL,QAAMC,OAAOC,OAAO,OAAQmF,GAC5BrF,QAAMC,OAAOC,OAAO,QAASoF,GAC7BtF,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAOU,EAAIsE,EAAKtE,EAAIuE,EAAMvE,EAC1BV,EAAOY,EAAIoE,EAAKpE,EAAIqE,EAAMrE,EAC1BZ,EAAOc,EAAIkE,EAAKlE,EAAImE,EAAMnE,EAC1Bd,EAAOgB,EAAIgE,EAAKhE,EAAIiE,EAAMjE,EACnBhB,GAWXwH,EAAWtC,IAAM,SAASF,EAAMC,EAAOjF,GAWnC,OATAL,QAAMC,OAAOC,OAAO,OAAQmF,GAC5BrF,QAAMC,OAAOC,OAAO,QAASoF,GAC7BtF,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAOU,EAAIsE,EAAKtE,EAAIuE,EAAMvE,EAC1BV,EAAOY,EAAIoE,EAAKpE,EAAIqE,EAAMrE,EAC1BZ,EAAOc,EAAIkE,EAAKlE,EAAImE,EAAMnE,EAC1Bd,EAAOgB,EAAIgE,EAAKhE,EAAIiE,EAAMjE,EACnBhB,GAWXwH,EAAWrC,SAAW,SAASH,EAAMC,EAAOjF,GAWxC,OATAL,QAAMC,OAAOC,OAAO,OAAQmF,GAC5BrF,QAAMC,OAAOC,OAAO,QAASoF,GAC7BtF,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAOU,EAAIsE,EAAKtE,EAAIuE,EAAMvE,EAC1BV,EAAOY,EAAIoE,EAAKpE,EAAIqE,EAAMrE,EAC1BZ,EAAOc,EAAIkE,EAAKlE,EAAImE,EAAMnE,EAC1Bd,EAAOgB,EAAIgE,EAAKhE,EAAIiE,EAAMjE,EACnBhB,GAWXwH,EAAWhC,iBAAmB,SAASpB,EAAWqB,EAAQzF,GAWtD,OATAL,QAAMC,OAAOC,OAAO,YAAauE,GACjCzE,QAAMC,OAAOqD,OAAO,SAAUwC,GAC9B9F,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAOU,EAAI0D,EAAU1D,EAAI+E,EACzBzF,EAAOY,EAAIwD,EAAUxD,EAAI6E,EACzBzF,EAAOc,EAAIsD,EAAUtD,EAAI2E,EACzBzF,EAAOgB,EAAIoD,EAAUpD,EAAIyE,EAClBzF,GAWXwH,EAAWkE,eAAiB,SAAStH,EAAWqB,EAAQzF,GAWpD,OATAL,QAAMC,OAAOC,OAAO,YAAauE,GACjCzE,QAAMC,OAAOqD,OAAO,SAAUwC,GAC9B9F,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAOU,EAAI0D,EAAU1D,EAAI+E,EACzBzF,EAAOY,EAAIwD,EAAUxD,EAAI6E,EACzBzF,EAAOc,EAAIsD,EAAUtD,EAAI2E,EACzBzF,EAAOgB,EAAIoD,EAAUpD,EAAIyE,EAClBzF,GAUXwH,EAAW7B,OAAS,SAASvB,EAAWpE,GAUpC,OARAL,QAAMC,OAAOC,OAAO,YAAauE,GACjCzE,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAOU,GAAK0D,EAAU1D,EACtBV,EAAOY,GAAKwD,EAAUxD,EACtBZ,EAAOc,GAAKsD,EAAUtD,EACtBd,EAAOgB,GAAKoD,EAAUpD,EACfhB,GAUXwH,EAAWV,IAAM,SAAS1C,EAAWpE,GAUjC,OARAL,QAAMC,OAAOC,OAAO,YAAauE,GACjCzE,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAOU,EAAIyB,KAAK2E,IAAI1C,EAAU1D,GAC9BV,EAAOY,EAAIuB,KAAK2E,IAAI1C,EAAUxD,GAC9BZ,EAAOc,EAAIqB,KAAK2E,IAAI1C,EAAUtD,GAC9Bd,EAAOgB,EAAImB,KAAK2E,IAAI1C,EAAUpD,GACvBhB,GAGX,IAAI2L,EAAc,IAAInE,EAUtBA,EAAWoE,KAAO,SAASC,EAAOC,EAAK3E,EAAGnH,GAUtC,OARAL,QAAMC,OAAOC,OAAO,QAASgM,GAC7BlM,QAAMC,OAAOC,OAAO,MAAOiM,GAC3BnM,QAAMC,OAAOqD,OAAO,IAAKkE,GACzBxH,QAAMC,OAAOC,OAAO,SAAUG,GAG9BwH,EAAWhC,iBAAiBsG,EAAK3E,EAAGwE,GACpC3L,EAASwH,EAAWhC,iBAAiBqG,EAAO,EAAM1E,EAAGnH,GAC9CwH,EAAWtC,IAAIyG,EAAa3L,EAAQA,IAG/C,IAAI+L,EAA4B,IAAIvE,EAQpCA,EAAWwE,mBAAqB,SAAS5H,EAAWpE,GAEhDL,QAAMC,OAAOC,OAAO,YAAauE,GACjCzE,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAIiM,EAAIzE,EAAW8D,UAAUlH,EAAW2H,GA2BxC,OA1BAvE,EAAWV,IAAImF,EAAGA,GAKNjM,EAHRiM,EAAEvL,GAAKuL,EAAErL,EACLqL,EAAEvL,GAAKuL,EAAEnL,EACLmL,EAAEvL,GAAKuL,EAAEjL,EACAwG,EAAWvH,MAAMuH,EAAW0E,OAAQlM,GAEpCwH,EAAWvH,MAAMuH,EAAW2E,OAAQnM,GAE1CiM,EAAEnL,GAAKmL,EAAEjL,EACPwG,EAAWvH,MAAMuH,EAAW4E,OAAQpM,GAEpCwH,EAAWvH,MAAMuH,EAAW2E,OAAQnM,GAE1CiM,EAAErL,GAAKqL,EAAEnL,EACZmL,EAAErL,GAAKqL,EAAEjL,EACAwG,EAAWvH,MAAMuH,EAAW6E,OAAQrM,GAEpCwH,EAAWvH,MAAMuH,EAAW2E,OAAQnM,GAE1CiM,EAAEnL,GAAKmL,EAAEjL,EACPwG,EAAWvH,MAAMuH,EAAW4E,OAAQpM,GAEpCwH,EAAWvH,MAAMuH,EAAW2E,OAAQnM,IAcrDwH,EAAWmB,OAAS,SAAS3D,EAAMC,GAC/B,OAAQD,IAASC,GACRnF,UAAQkF,IACRlF,UAAQmF,IACRD,EAAKtE,IAAMuE,EAAMvE,GACjBsE,EAAKpE,IAAMqE,EAAMrE,GACjBoE,EAAKlE,IAAMmE,EAAMnE,GACjBkE,EAAKhE,IAAMiE,EAAMjE,GAM9BwG,EAAWqC,YAAc,SAASzF,EAAW3E,EAAOqK,GAChD,OAAO1F,EAAU1D,IAAMjB,EAAMqK,IACtB1F,EAAUxD,IAAMnB,EAAMqK,EAAS,IAC/B1F,EAAUtD,IAAMrB,EAAMqK,EAAS,IAC/B1F,EAAUpD,IAAMvB,EAAMqK,EAAS,IAc1CtC,EAAWoB,cAAgB,SAAS5D,EAAMC,EAAOqH,EAAiBC,GAC9D,OAAQvH,IAASC,GACTnF,UAAQkF,IACRlF,UAAQmF,IACRyB,aAAWkC,cAAc5D,EAAKtE,EAAGuE,EAAMvE,EAAG4L,EAAiBC,IAC3D7F,aAAWkC,cAAc5D,EAAKpE,EAAGqE,EAAMrE,EAAG0L,EAAiBC,IAC3D7F,aAAWkC,cAAc5D,EAAKlE,EAAGmE,EAAMnE,EAAGwL,EAAiBC,IAC3D7F,aAAWkC,cAAc5D,EAAKhE,EAAGiE,EAAMjE,EAAGsL,EAAiBC,IASvE/E,EAAWuB,KAAOF,OAAOC,OAAO,IAAItB,EAAW,EAAK,EAAK,EAAK,IAQ9DA,EAAW0E,OAASrD,OAAOC,OAAO,IAAItB,EAAW,EAAK,EAAK,EAAK,IAQhEA,EAAW6E,OAASxD,OAAOC,OAAO,IAAItB,EAAW,EAAK,EAAK,EAAK,IAQhEA,EAAW4E,OAASvD,OAAOC,OAAO,IAAItB,EAAW,EAAK,EAAK,EAAK,IAQhEA,EAAW2E,OAAStD,OAAOC,OAAO,IAAItB,EAAW,EAAK,EAAK,EAAK,IAQhEA,EAAWkC,UAAUzJ,MAAQ,SAASD,GAClC,OAAOwH,EAAWvH,MAAMb,KAAMY,IAUlCwH,EAAWkC,UAAUf,OAAS,SAAS1D,GACnC,OAAOuC,EAAWmB,OAAOvJ,KAAM6F,IAanCuC,EAAWkC,UAAUd,cAAgB,SAAS3D,EAAOqH,EAAiBC,GAClE,OAAO/E,EAAWoB,cAAcxJ,KAAM6F,EAAOqH,EAAiBC,IAQlE/E,EAAWkC,UAAUK,SAAW,WAC5B,MAAO,IAAM3K,KAAKsB,EAAI,KAAOtB,KAAKwB,EAAI,KAAOxB,KAAK0B,EAAI,KAAO1B,KAAK4B,EAAI,KAG1E,IAAIwL,EAAoB,IAAIC,aAAa,GC9vBzC,SAASC,EAAQ/N,EAAaC,EAAaC,EAAa8N,EACvC7N,EAAaC,EAAaC,EAAa4N,EACvC3N,EAAaC,EAAaC,EAAa0N,EACvCC,EAAaC,EAAaC,EAAaC,GACpD7N,KAAK,GAAKC,eAAaV,EAAa,GACpCS,KAAK,GAAKC,eAAaP,EAAa,GACpCM,KAAK,GAAKC,eAAaJ,EAAa,GACpCG,KAAK,GAAKC,eAAayN,EAAa,GACpC1N,KAAK,GAAKC,eAAaT,EAAa,GACpCQ,KAAK,GAAKC,eAAaN,EAAa,GACpCK,KAAK,GAAKC,eAAaH,EAAa,GACpCE,KAAK,GAAKC,eAAa0N,EAAa,GACpC3N,KAAK,GAAKC,eAAaR,EAAa,GACpCO,KAAK,GAAKC,eAAaL,EAAa,GACpCI,KAAK,IAAMC,eAAaF,EAAa,GACrCC,KAAK,IAAMC,eAAa2N,EAAa,GACrC5N,KAAK,IAAMC,eAAasN,EAAa,GACrCvN,KAAK,IAAMC,eAAauN,EAAa,GACrCxN,KAAK,IAAMC,eAAawN,EAAa,GACrCzN,KAAK,IAAMC,eAAa4N,EAAa,GD6vBzCzF,EAAW0F,UAAY,SAAS1N,EAAOQ,GAanC,GAXAL,QAAMC,OAAOqD,OAAO,QAASzD,GAGxBM,UAAQE,KACTA,EAAS,IAAIwH,GAIjBgF,EAAkB,GAAKhN,EAGT,KAFdA,EAAQgN,EAAkB,IAGtB,OAAOhF,EAAWvH,MAAMuH,EAAWuB,KAAM/I,GAG7C,IACImN,EADAC,EAAO5N,EAAQ,EAAM,EAAM,EAG1B6N,SAAS7N,IAIVA,EAAQ2C,KAAK2E,IAAItH,GACjB2N,EAAWhL,KAAKmL,MAAM5G,aAAW6G,QAAQ/N,EAAO,KAAO,EACvDA,GAAgB2C,KAAKqL,IAAI,GAAML,KAL/B3N,EAAQ,GACR2N,EA/BG,IAsCP,IAAI7G,EA9CW,IA8CJ9G,EAQX,OAPAQ,EAAOU,EAAIyB,KAAKmL,MAAMhH,GACtBA,EAhDe,KAgDPA,EAAOtG,EAAOU,GACtBV,EAAOY,EAAIuB,KAAKmL,MAAMhH,GACtBA,EAlDe,KAkDPA,EAAOtG,EAAOY,GACtBZ,EAAOc,EAAIqB,KAAKmL,MAAMhH,GACtBtG,EAAOgB,EAAwB,GAAnBmM,EA5CL,IA4C8BC,EAE9BpN,GAUXwH,EAAWiG,YAAc,SAASC,GAE9B/N,QAAMC,OAAOC,OAAO,cAAe6N,GAGnC,IAAIpH,EAAOoH,EAAY1M,EAAI,EACvBmM,EAAWhL,KAAKmL,MAAMhH,GACtB8G,EAA2B,GAAnB9G,EAAO6G,GAMnB,GAFAC,IADAA,EAAc,EAAPA,EAAa,IAFpBD,GAhEO,KAAA,GAsEH,OAAOC,EAAO,EAAMO,OAAOC,kBAAoBD,OAAOE,kBAG1D,IAAIC,EAAWV,EAAOM,EAAYhN,GA7ElB,EAJD,KAqFf,OAHAoN,GAAYV,EAAOM,EAAY9M,GA7Ed,EAJD,QAkFhBkN,GAAYV,EAAOM,EAAY5M,GA7Ed,EAJD,WAmFEqB,KAAKqL,IAAI,GAAML,IC1zBrCT,EAAQpN,aAAe,GAWvBoN,EAAQnN,KAAO,SAASC,EAAOC,EAAOC,GAyBlC,OAvBAC,QAAMC,OAAOC,OAAO,QAASL,GAC7BG,QAAMG,QAAQ,QAASL,GAGvBC,EAAgBL,eAAaK,EAAe,GAE5CD,EAAMC,KAAmBF,EAAM,GAC/BC,EAAMC,KAAmBF,EAAM,GAC/BC,EAAMC,KAAmBF,EAAM,GAC/BC,EAAMC,KAAmBF,EAAM,GAC/BC,EAAMC,KAAmBF,EAAM,GAC/BC,EAAMC,KAAmBF,EAAM,GAC/BC,EAAMC,KAAmBF,EAAM,GAC/BC,EAAMC,KAAmBF,EAAM,GAC/BC,EAAMC,KAAmBF,EAAM,GAC/BC,EAAMC,KAAmBF,EAAM,GAC/BC,EAAMC,KAAmBF,EAAM,IAC/BC,EAAMC,KAAmBF,EAAM,IAC/BC,EAAMC,KAAmBF,EAAM,IAC/BC,EAAMC,KAAmBF,EAAM,IAC/BC,EAAMC,KAAmBF,EAAM,IAC/BC,EAAMC,GAAiBF,EAAM,IAEtBC,GAWXiN,EAAQ3M,OAAS,SAASN,EAAOC,EAAeM,GA2B5C,OAzBAL,QAAMG,QAAQ,QAASL,GAGvBC,EAAgBL,eAAaK,EAAe,GAEvCI,UAAQE,KACTA,EAAS,IAAI0M,GAGjB1M,EAAO,GAAKP,EAAMC,KAClBM,EAAO,GAAKP,EAAMC,KAClBM,EAAO,GAAKP,EAAMC,KAClBM,EAAO,GAAKP,EAAMC,KAClBM,EAAO,GAAKP,EAAMC,KAClBM,EAAO,GAAKP,EAAMC,KAClBM,EAAO,GAAKP,EAAMC,KAClBM,EAAO,GAAKP,EAAMC,KAClBM,EAAO,GAAKP,EAAMC,KAClBM,EAAO,GAAKP,EAAMC,KAClBM,EAAO,IAAMP,EAAMC,KACnBM,EAAO,IAAMP,EAAMC,KACnBM,EAAO,IAAMP,EAAMC,KACnBM,EAAO,IAAMP,EAAMC,KACnBM,EAAO,IAAMP,EAAMC,KACnBM,EAAO,IAAMP,EAAMC,GACZM,GAUX0M,EAAQzM,MAAQ,SAASC,EAAQF,GAC7B,GAAKF,UAAQI,GAGb,OAAKJ,UAAQE,IAMbA,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAME,EAAO,IACbF,GArBI,IAAI0M,EAAQxM,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,IACxCA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,IACxCA,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAAKA,EAAO,IACzCA,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAAKA,EAAO,MA4CpEwM,EAAQvM,UAAYuM,EAAQ3M,OAS5B2M,EAAQtM,qBAAuB,SAASC,EAAQL,GAK5C,OAHAL,QAAMG,QAAQ,SAAUO,GAGjBqM,EAAQzM,MAAMI,EAAQL,IAWjC0M,EAAQpM,kBAAoB,SAASD,EAAQL,GAKzC,OAHAL,QAAMG,QAAQ,SAAUO,GAGnBP,UAAQE,IAMbA,EAAO,GAAKK,EAAO,GACnBL,EAAO,GAAKK,EAAO,GACnBL,EAAO,GAAKK,EAAO,GACnBL,EAAO,GAAKK,EAAO,IACnBL,EAAO,GAAKK,EAAO,GACnBL,EAAO,GAAKK,EAAO,GACnBL,EAAO,GAAKK,EAAO,GACnBL,EAAO,GAAKK,EAAO,IACnBL,EAAO,GAAKK,EAAO,GACnBL,EAAO,GAAKK,EAAO,GACnBL,EAAO,IAAMK,EAAO,IACpBL,EAAO,IAAMK,EAAO,IACpBL,EAAO,IAAMK,EAAO,GACpBL,EAAO,IAAMK,EAAO,GACpBL,EAAO,IAAMK,EAAO,IACpBL,EAAO,IAAMK,EAAO,IACbL,GArBI,IAAI0M,EAAQrM,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GACxCA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GACxCA,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAAKA,EAAO,IACzCA,EAAO,IAAKA,EAAO,IAAKA,EAAO,IAAKA,EAAO,MA8BtEqM,EAAQqB,wBAA0B,SAASC,EAAUC,EAAajO,GAO9D,OALAL,QAAMC,OAAOC,OAAO,WAAYmO,GAGhCC,EAAc5O,eAAa4O,EAAazJ,aAAWuE,MAE9CjJ,UAAQE,IAObA,EAAO,GAAKgO,EAAS,GACrBhO,EAAO,GAAKgO,EAAS,GACrBhO,EAAO,GAAKgO,EAAS,GACrBhO,EAAO,GAAK,EACZA,EAAO,GAAKgO,EAAS,GACrBhO,EAAO,GAAKgO,EAAS,GACrBhO,EAAO,GAAKgO,EAAS,GACrBhO,EAAO,GAAK,EACZA,EAAO,GAAKgO,EAAS,GACrBhO,EAAO,GAAKgO,EAAS,GACrBhO,EAAO,IAAMgO,EAAS,GACtBhO,EAAO,IAAM,EACbA,EAAO,IAAMiO,EAAYvN,EACzBV,EAAO,IAAMiO,EAAYrN,EACzBZ,EAAO,IAAMiO,EAAYnN,EACzBd,EAAO,IAAM,EACNA,GAtBI,IAAI0M,EAAQsB,EAAS,GAAIA,EAAS,GAAIA,EAAS,GAAIC,EAAYvN,EACnDsN,EAAS,GAAIA,EAAS,GAAIA,EAAS,GAAIC,EAAYrN,EACnDoN,EAAS,GAAIA,EAAS,GAAIA,EAAS,GAAIC,EAAYnN,EAC3C,EAAa,EAAa,EAAe,IAuC5E4L,EAAQwB,uCAAyC,SAASD,EAAaD,EAAUjL,EAAO/C,GAEpFL,QAAMC,OAAOC,OAAO,cAAeoO,GACnCtO,QAAMC,OAAOC,OAAO,WAAYmO,GAChCrO,QAAMC,OAAOC,OAAO,QAASkD,GAGxBjD,UAAQE,KACTA,EAAS,IAAI0M,GAGjB,IAAIyB,EAASpL,EAAMrC,EACf0N,EAASrL,EAAMnC,EACfyN,EAAStL,EAAMjC,EAEfL,EAAKuN,EAAStN,EAAIsN,EAAStN,EAC3BC,EAAKqN,EAAStN,EAAIsN,EAASpN,EAC3BC,EAAKmN,EAAStN,EAAIsN,EAASlN,EAC3BC,EAAKiN,EAAStN,EAAIsN,EAAShN,EAC3BC,EAAK+M,EAASpN,EAAIoN,EAASpN,EAC3BM,EAAK8M,EAASpN,EAAIoN,EAASlN,EAC3BK,EAAK6M,EAASpN,EAAIoN,EAAShN,EAC3BI,EAAK4M,EAASlN,EAAIkN,EAASlN,EAC3BO,EAAK2M,EAASlN,EAAIkN,EAAShN,EAC3BM,EAAK0M,EAAShN,EAAIgN,EAAShN,EAE3BO,EAAMd,EAAKQ,EAAKG,EAAKE,EACrBE,EAAM,GAAOb,EAAKU,GAClBI,EAAM,GAAOZ,EAAKM,GAElBO,EAAM,GAAOf,EAAKU,GAClBM,GAAOlB,EAAKQ,EAAKG,EAAKE,EACtBM,EAAM,GAAOV,EAAKH,GAElBc,EAAM,GAAOhB,EAAKM,GAClBW,EAAM,GAAOZ,EAAKH,GAClBgB,GAAOtB,EAAKQ,EAAKG,EAAKE,EAmB1B,OAjBAtB,EAAO,GAAKuB,EAAM4M,EAClBnO,EAAO,GAAK0B,EAAMyM,EAClBnO,EAAO,GAAK6B,EAAMsM,EAClBnO,EAAO,GAAK,EACZA,EAAO,GAAKwB,EAAM4M,EAClBpO,EAAO,GAAK2B,EAAMyM,EAClBpO,EAAO,GAAK8B,EAAMsM,EAClBpO,EAAO,GAAK,EACZA,EAAO,GAAKyB,EAAM4M,EAClBrO,EAAO,GAAK4B,EAAMyM,EAClBrO,EAAO,IAAM+B,EAAMsM,EACnBrO,EAAO,IAAM,EACbA,EAAO,IAAMiO,EAAYvN,EACzBV,EAAO,IAAMiO,EAAYrN,EACzBZ,EAAO,IAAMiO,EAAYnN,EACzBd,EAAO,IAAM,EAENA,GAUX0M,EAAQ4B,6BAA+B,SAASC,EAA0BvO,GAKtE,OAHAL,QAAMC,OAAOC,OAAO,2BAA4B0O,GAGzC7B,EAAQwB,uCAAuCK,EAAyBN,YAAaM,EAAyBP,SAAUO,EAAyBxL,MAAO/C,IAYnK0M,EAAQ8B,gBAAkB,SAASP,EAAajO,GAK5C,OAHAL,QAAMC,OAAOC,OAAO,cAAeoO,GAG5BvB,EAAQqB,wBAAwBrP,EAAQ2I,SAAU4G,EAAajO,IAkB1E0M,EAAQ5J,UAAY,SAASC,EAAO/C,GAKhC,OAHAL,QAAMC,OAAOC,OAAO,QAASkD,GAGxBjD,UAAQE,IAQbA,EAAO,GAAK+C,EAAMrC,EAClBV,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK+C,EAAMnC,EAClBZ,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAM+C,EAAMjC,EACnBd,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACNA,GAvBI,IAAI0M,EACP3J,EAAMrC,EAAG,EAAS,EAAS,EAC3B,EAASqC,EAAMnC,EAAG,EAAS,EAC3B,EAAS,EAASmC,EAAMjC,EAAG,EAC3B,EAAS,EAAS,EAAS,IAqCvC4L,EAAQ1J,iBAAmB,SAASD,EAAO/C,GAKvC,OAHAL,QAAMC,OAAOqD,OAAO,QAASF,GAGxBjD,UAAQE,IAObA,EAAO,GAAK+C,EACZ/C,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK+C,EACZ/C,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAM+C,EACb/C,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM,EACNA,GAtBI,IAAI0M,EAAQ3J,EAAO,EAAO,EAAO,EACrB,EAAOA,EAAO,EAAO,EACrB,EAAO,EAAOA,EAAO,EACrB,EAAO,EAAO,EAAO,IAsBhD,IAAI0L,EAAc,IAAIjK,aAClBkK,EAAc,IAAIlK,aAClBmK,EAAc,IAAInK,aAStBkI,EAAQkC,WAAa,SAASC,EAAQ7O,GAElCL,QAAMC,OAAOC,OAAO,SAAUgP,GAG9B,IAAIC,EAAWD,EAAOC,SAClBC,EAAYF,EAAOE,UACnBC,EAAKH,EAAOG,GAGhBrP,QAAMC,OAAOC,OAAO,kBAAmBiP,GACvCnP,QAAMC,OAAOC,OAAO,mBAAoBkP,GACxCpP,QAAMC,OAAOC,OAAO,YAAamP,GAGjCxK,aAAW8G,UAAUyD,EAAWN,GAChCjK,aAAW8G,UAAU9G,aAAWyK,MAAMR,EAAaO,EAAIN,GAAcA,GACrElK,aAAW8G,UAAU9G,aAAWyK,MAAMP,EAAaD,EAAaE,GAAcA,GAE9E,IAAIO,EAAKR,EAAYhO,EACjByO,EAAKT,EAAY9N,EACjBwO,EAAKV,EAAY5N,EACjBuO,EAAKZ,EAAY/N,EACjB4O,EAAKb,EAAY7N,EACjB2O,EAAKd,EAAY3N,EACjB0O,EAAKb,EAAYjO,EACjB+O,EAAKd,EAAY/N,EACjB8O,EAAKf,EAAY7N,EACjB6O,EAAYb,EAASpO,EACrBkP,EAAYd,EAASlO,EACrBiP,EAAYf,EAAShO,EACrBgP,EAAKZ,GAAMS,EAAYR,GAAMS,EAAYR,GAAMS,EAC/CE,EAAKP,GAAMG,EAAYF,GAAMG,EAAYF,GAAMG,EAC/CG,EAAKX,EAAKM,EAAYL,EAAKM,EAAYL,EAAKM,EAiBhD,OAAK/P,UAAQE,IAObA,EAAO,GAAKkP,EACZlP,EAAO,GAAKwP,EACZxP,EAAO,IAAMqP,EACbrP,EAAO,GAAK,EACZA,EAAO,GAAKmP,EACZnP,EAAO,GAAKyP,EACZzP,EAAO,IAAMsP,EACbtP,EAAO,GAAK,EACZA,EAAO,GAAKoP,EACZpP,EAAO,GAAK0P,EACZ1P,EAAO,KAAOuP,EACdvP,EAAO,IAAM,EACbA,EAAO,IAAM8P,EACb9P,EAAO,IAAM+P,EACb/P,EAAO,IAAMgQ,EACbhQ,EAAO,IAAM,EACNA,GAtBI,IAAI0M,EACHwC,EAAMC,EAAKC,EAAIU,EACfN,EAAMC,EAAKC,EAAIK,GACfV,GAAMC,GAAKC,EAAIS,EACf,EAAK,EAAK,EAAK,IAoC/BtD,EAAQuD,8BAAgC,SAASC,EAAMC,EAAaC,EAAMC,EAAKrQ,GAE3EL,QAAMC,OAAOqD,OAAOqN,YAAY,OAAQJ,EAAM,GAC9CvQ,QAAMC,OAAOqD,OAAOsN,SAAS,OAAQL,EAAM/N,KAAKqO,IAChD7Q,QAAMC,OAAOqD,OAAOqN,YAAY,OAAQF,EAAM,GAC9CzQ,QAAMC,OAAOqD,OAAOqN,YAAY,MAAOD,EAAK,GAC5C1Q,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAEIjB,EAAc,EAFLoD,KAAKsO,IAAW,GAAPP,GAGlBvR,EAAcI,EAAcoR,EAC5BhR,GAAekR,EAAMD,IAASA,EAAOC,GACrCxD,EAAe,EAAMwD,EAAMD,GAASA,EAAOC,GAkB/C,OAhBArQ,EAAO,GAAKrB,EACZqB,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAKjB,EACZiB,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAMb,EACba,EAAO,KAAO,EACdA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM6M,EACb7M,EAAO,IAAM,EACNA,GAeX0M,EAAQgE,6BAA+B,SAAS1L,EAAMC,EAAO0L,EAAQC,EAAKR,EAAMC,EAAKrQ,GAEjFL,QAAMC,OAAOqD,OAAO,OAAQ+B,GAC5BrF,QAAMC,OAAOqD,OAAO,QAASgC,GAC7BtF,QAAMC,OAAOqD,OAAO,SAAU0N,GAC9BhR,QAAMC,OAAOqD,OAAO,MAAO2N,GAC3BjR,QAAMC,OAAOqD,OAAO,OAAQmN,GAC5BzQ,QAAMC,OAAOqD,OAAO,MAAOoN,GAC3B1Q,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAI6Q,EAAI,GAAO5L,EAAQD,GACnB8L,EAAI,GAAOF,EAAMD,GACjB5J,EAAI,GAAOsJ,EAAMD,GAEjBW,IAAO9L,EAAQD,GAAQ6L,EACvBG,IAAOJ,EAAMD,GAAUG,EACvBG,IAAOZ,EAAMD,GAAQrJ,EAqBzB,OApBA8J,GAAK,EACLC,GAAK,EACL/J,IAAM,EAEN/G,EAAO,GAAK6Q,EACZ7Q,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK8Q,EACZ9Q,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAM+G,EACb/G,EAAO,IAAM,EACbA,EAAO,IAAM+Q,EACb/Q,EAAO,IAAMgR,EACbhR,EAAO,IAAMiR,EACbjR,EAAO,IAAM,EACNA,GAeX0M,EAAQwE,4BAA8B,SAASlM,EAAMC,EAAO0L,EAAQC,EAAKR,EAAMC,EAAKrQ,GAEhFL,QAAMC,OAAOqD,OAAO,OAAQ+B,GAC5BrF,QAAMC,OAAOqD,OAAO,QAASgC,GAC7BtF,QAAMC,OAAOqD,OAAO,SAAU0N,GAC9BhR,QAAMC,OAAOqD,OAAO,MAAO2N,GAC3BjR,QAAMC,OAAOqD,OAAO,OAAQmN,GAC5BzQ,QAAMC,OAAOqD,OAAO,MAAOoN,GAC3B1Q,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAIrB,EAAc,EAAMyR,GAAQnL,EAAQD,GACpCjG,EAAc,EAAMqR,GAAQQ,EAAMD,GAClC9R,GAAeoG,EAAQD,IAASC,EAAQD,GACxChG,GAAe4R,EAAMD,IAAWC,EAAMD,GACtCxR,IAAgBkR,EAAMD,IAASC,EAAMD,GAErCvD,GAAe,EAAMwD,EAAMD,GAAQC,EAAMD,GAkB7C,OAhBApQ,EAAO,GAAKrB,EACZqB,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAKjB,EACZiB,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAKnB,EACZmB,EAAO,GAAKhB,EACZgB,EAAO,IAAMb,EACba,EAAO,KAdY,EAenBA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM6M,EACb7M,EAAO,IAAM,EACNA,GAcX0M,EAAQyE,oCAAsC,SAASnM,EAAMC,EAAO0L,EAAQC,EAAKR,EAAMpQ,GAEnFL,QAAMC,OAAOqD,OAAO,OAAQ+B,GAC5BrF,QAAMC,OAAOqD,OAAO,QAASgC,GAC7BtF,QAAMC,OAAOqD,OAAO,SAAU0N,GAC9BhR,QAAMC,OAAOqD,OAAO,MAAO2N,GAC3BjR,QAAMC,OAAOqD,OAAO,OAAQmN,GAC5BzQ,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAIrB,EAAc,EAAMyR,GAAQnL,EAAQD,GACpCjG,EAAc,EAAMqR,GAAQQ,EAAMD,GAClC9R,GAAeoG,EAAQD,IAASC,EAAQD,GACxChG,GAAe4R,EAAMD,IAAWC,EAAMD,GAGtC9D,GAAe,EAAMuD,EAkBzB,OAhBApQ,EAAO,GAAKrB,EACZqB,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAKjB,EACZiB,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAKnB,EACZmB,EAAO,GAAKhB,EACZgB,EAAO,KAdY,EAenBA,EAAO,KAdY,EAenBA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,IAAM6M,EACb7M,EAAO,IAAM,EACNA,GAqBX0M,EAAQ0E,8BAAgC,SAASC,EAAUC,EAAgBC,EAAevR,GAEtFL,QAAMC,OAAOC,OAAO,SAAUG,GAG9BqR,EAAWhS,eAAagS,EAAUhS,eAAamS,cAC/C,IAAI9Q,EAAIrB,eAAagS,EAAS3Q,EAAG,GAC7BE,EAAIvB,eAAagS,EAASzQ,EAAG,GAC7B6Q,EAAQpS,eAAagS,EAASI,MAAO,GACrCC,EAASrS,eAAagS,EAASK,OAAQ,GAC3CJ,EAAiBjS,eAAaiS,EAAgB,GAG9C,IAAIK,EAAoB,GAARF,EACZG,EAAsB,GAATF,EACbG,EAA+C,KAJnDN,EAAgBlS,eAAakS,EAAe,IAIXD,GAE7B3S,EAAcgT,EACd5S,EAAc6S,EACdzS,EAAc0S,EACdlF,EAAcjM,EAAIiR,EAClB/E,EAAchM,EAAIgR,EAClB/E,EAAcyE,EAAiBO,EAmBnC,OAhBA7R,EAAO,GAAKrB,EACZqB,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAKjB,EACZiB,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAMb,EACba,EAAO,IAAM,EACbA,EAAO,IAAM2M,EACb3M,EAAO,IAAM4M,EACb5M,EAAO,IAAM6M,EACb7M,EAAO,IAjBW,EAkBXA,GAaX0M,EAAQoF,YAAc,SAAShD,EAAUC,EAAWC,EAAI/J,EAAOjF,GAyB3D,OAvBAL,QAAMC,OAAOC,OAAO,WAAYiP,GAChCnP,QAAMC,OAAOC,OAAO,YAAakP,GACjCpP,QAAMC,OAAOC,OAAO,KAAMmP,GAC1BrP,QAAMC,OAAOC,OAAO,QAASoF,GAC7BtF,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAO,GAAKiF,EAAMvE,EAClBV,EAAO,GAAKgP,EAAGtO,EACfV,EAAO,IAAM+O,EAAUrO,EACvBV,EAAO,GAAK,EACZA,EAAO,GAAKiF,EAAMrE,EAClBZ,EAAO,GAAKgP,EAAGpO,EACfZ,EAAO,IAAM+O,EAAUnO,EACvBZ,EAAO,GAAK,EACZA,EAAO,GAAKiF,EAAMnE,EAClBd,EAAO,GAAKgP,EAAGlO,EACfd,EAAO,KAAO+O,EAAUjO,EACxBd,EAAO,IAAM,EACbA,EAAO,KAAOwE,aAAWgH,IAAIvG,EAAO6J,GACpC9O,EAAO,KAAOwE,aAAWgH,IAAIwD,EAAIF,GACjC9O,EAAO,IAAMwE,aAAWgH,IAAIuD,EAAWD,GACvC9O,EAAO,IAAM,EACNA,GAsBX0M,EAAQhJ,QAAU,SAASxD,EAAQF,GAK/B,OAHAL,QAAMC,OAAOC,OAAO,SAAUK,GAGzBJ,UAAQE,IAMbA,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAME,EAAO,IACbF,GArBI,CAACE,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GACxCA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GACxCA,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAAKA,EAAO,IACzCA,EAAO,IAAKA,EAAO,IAAKA,EAAO,IAAKA,EAAO,MAqC3DwM,EAAQ/I,gBAAkB,SAASC,EAAQC,GASvC,OAPAlE,QAAMC,OAAOqD,OAAOa,oBAAoB,MAAOD,EAAK,GACpDlE,QAAMC,OAAOqD,OAAOc,iBAAiB,MAAOF,EAAK,GAEjDlE,QAAMC,OAAOqD,OAAOa,oBAAoB,SAAUF,EAAQ,GAC1DjE,QAAMC,OAAOqD,OAAOc,iBAAiB,SAAUH,EAAQ,GAGvC,EAATA,EAAaC,GA8BxB6I,EAAQ1I,UAAY,SAAS9D,EAAQ+D,EAAOjE,GAExCL,QAAMC,OAAOC,OAAO,SAAUK,GAE9BP,QAAMC,OAAOqD,OAAOa,oBAAoB,QAASG,EAAO,GACxDtE,QAAMC,OAAOqD,OAAOc,iBAAiB,QAASE,EAAO,GAErDtE,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAIkE,EAAqB,EAARD,EACbvD,EAAIR,EAAOgE,GACXtD,EAAIV,EAAOgE,EAAa,GACxBpD,EAAIZ,EAAOgE,EAAa,GACxBlD,EAAId,EAAOgE,EAAa,GAM5B,OAJAlE,EAAOU,EAAIA,EACXV,EAAOY,EAAIA,EACXZ,EAAOc,EAAIA,EACXd,EAAOgB,EAAIA,EACJhB,GA6BX0M,EAAQvI,UAAY,SAASjE,EAAQ+D,EAAOG,EAAWpE,GAEnDL,QAAMC,OAAOC,OAAO,SAAUK,GAE9BP,QAAMC,OAAOqD,OAAOa,oBAAoB,QAASG,EAAO,GACxDtE,QAAMC,OAAOqD,OAAOc,iBAAiB,QAASE,EAAO,GAErDtE,QAAMC,OAAOC,OAAO,YAAauE,GACjCzE,QAAMC,OAAOC,OAAO,SAAUG,GAI9B,IAAIkE,EAAqB,EAARD,EAKjB,OANAjE,EAAS0M,EAAQzM,MAAMC,EAAQF,IAExBkE,GAAcE,EAAU1D,EAC/BV,EAAOkE,EAAa,GAAKE,EAAUxD,EACnCZ,EAAOkE,EAAa,GAAKE,EAAUtD,EACnCd,EAAOkE,EAAa,GAAKE,EAAUpD,EAC5BhB,GAYX0M,EAAQqF,eAAiB,SAAS7R,EAAQ+N,EAAajO,GA2BnD,OAzBAL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,cAAeoO,GACnCtO,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GAEnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GAEnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAME,EAAO,IAEpBF,EAAO,IAAMiO,EAAYvN,EACzBV,EAAO,IAAMiO,EAAYrN,EACzBZ,EAAO,IAAMiO,EAAYnN,EACzBd,EAAO,IAAME,EAAO,IAEbF,GAGX,IAAIgS,EAAe,IAAIxN,aASvBkI,EAAQuF,SAAW,SAAS/R,EAAQ6C,EAAO/C,GAEvCL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,QAASkD,GAC7BpD,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAIkS,EAAgBxF,EAAQjI,SAASvE,EAAQ8R,GACzCG,EAAW3N,aAAWwB,iBAAiBjD,EAAOmP,EAAeF,GACjE,OAAOtF,EAAQhH,gBAAgBxF,EAAQiS,EAAUnS,IA8BrD0M,EAAQrI,OAAS,SAASnE,EAAQ+D,EAAOjE,GAErCL,QAAMC,OAAOC,OAAO,SAAUK,GAE9BP,QAAMC,OAAOqD,OAAOa,oBAAoB,QAASG,EAAO,GACxDtE,QAAMC,OAAOqD,OAAOc,iBAAiB,QAASE,EAAO,GAErDtE,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAIU,EAAIR,EAAO+D,GACXrD,EAAIV,EAAO+D,EAAQ,GACnBnD,EAAIZ,EAAO+D,EAAQ,GACnBjD,EAAId,EAAO+D,EAAQ,IAMvB,OAJAjE,EAAOU,EAAIA,EACXV,EAAOY,EAAIA,EACXZ,EAAOc,EAAIA,EACXd,EAAOgB,EAAIA,EACJhB,GA6BX0M,EAAQpI,OAAS,SAASpE,EAAQ+D,EAAOG,EAAWpE,GAgBhD,OAdAL,QAAMC,OAAOC,OAAO,SAAUK,GAE9BP,QAAMC,OAAOqD,OAAOa,oBAAoB,QAASG,EAAO,GACxDtE,QAAMC,OAAOqD,OAAOc,iBAAiB,QAASE,EAAO,GAErDtE,QAAMC,OAAOC,OAAO,YAAauE,GACjCzE,QAAMC,OAAOC,OAAO,SAAUG,IAG9BA,EAAS0M,EAAQzM,MAAMC,EAAQF,IACxBiE,GAASG,EAAU1D,EAC1BV,EAAOiE,EAAQ,GAAKG,EAAUxD,EAC9BZ,EAAOiE,EAAQ,GAAKG,EAAUtD,EAC9Bd,EAAOiE,EAAQ,IAAMG,EAAUpD,EACxBhB,GAGX,IAAIuE,EAAgB,IAAIC,aASxBkI,EAAQjI,SAAW,SAASvE,EAAQF,GAShC,OAPAL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAOU,EAAI8D,aAAWE,UAAUF,aAAWG,aAAazE,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIqE,IACzFvE,EAAOY,EAAI4D,aAAWE,UAAUF,aAAWG,aAAazE,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIqE,IACzFvE,EAAOc,EAAI0D,aAAWE,UAAUF,aAAWG,aAAazE,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAAKqE,IACnFvE,GAGX,IAAI4E,EAAe,IAAIJ,aAUvBkI,EAAQ7H,gBAAkB,SAAS3E,GAE/B,OADAwM,EAAQjI,SAASvE,EAAQ0E,GAClBJ,aAAWM,iBAAiBF,IAWvC8H,EAAQ3H,SAAW,SAASC,EAAMC,EAAOjF,GAErCL,QAAMC,OAAOC,OAAO,OAAQmF,GAC5BrF,QAAMC,OAAOC,OAAO,QAASoF,GAC7BtF,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAIoS,EAAQpN,EAAK,GACbqN,EAAQrN,EAAK,GACbsN,EAAQtN,EAAK,GACbuN,EAAQvN,EAAK,GACbwN,EAAQxN,EAAK,GACbyN,EAAQzN,EAAK,GACb0N,EAAQ1N,EAAK,GACb2N,EAAQ3N,EAAK,GACb4N,EAAQ5N,EAAK,GACb6N,EAAQ7N,EAAK,GACb8N,EAAS9N,EAAK,IACd+N,EAAS/N,EAAK,IACdgO,EAAShO,EAAK,IACdiO,EAASjO,EAAK,IACdkO,EAASlO,EAAK,IACdmO,EAASnO,EAAK,IAEdoO,EAASnO,EAAM,GACfoO,EAASpO,EAAM,GACfqO,EAASrO,EAAM,GACfsO,EAAStO,EAAM,GACfuO,EAASvO,EAAM,GACfwO,EAASxO,EAAM,GACfyO,EAASzO,EAAM,GACf0O,EAAS1O,EAAM,GACf2O,EAAS3O,EAAM,GACf4O,EAAS5O,EAAM,GACf6O,EAAU7O,EAAM,IAChB8O,EAAU9O,EAAM,IAChB+O,EAAU/O,EAAM,IAChBgP,EAAUhP,EAAM,IAChBiP,EAAUjP,EAAM,IAChBkP,EAAUlP,EAAM,IAEhBtG,EAAcyT,EAAQgB,EAASZ,EAAQa,EAAST,EAAQU,EAASN,EAASO,EAC1EzU,EAAcuT,EAAQe,EAASX,EAAQY,EAASR,EAAQS,EAASL,EAASM,EAC1EtU,EAAcqT,EAAQc,EAASV,EAAQW,EAASP,EAASQ,EAASJ,EAASK,EAC3EzG,EAAcyF,EAAQa,EAAST,EAAQU,EAASN,EAASO,EAASH,EAASI,EAE3E3U,EAAcwT,EAAQoB,EAAShB,EAAQiB,EAASb,EAAQc,EAASV,EAASW,EAC1E5U,EAAcsT,EAAQmB,EAASf,EAAQgB,EAASZ,EAAQa,EAAST,EAASU,EAC1EzU,EAAcoT,EAAQkB,EAASd,EAAQe,EAASX,EAASY,EAASR,EAASS,EAC3E5G,EAAcwF,EAAQiB,EAASb,EAAQc,EAASV,EAASW,EAASP,EAASQ,EAE3E9U,EAAcuT,EAAQwB,EAASpB,EAAQqB,EAASjB,EAAQkB,EAAUd,EAASe,EAC3E/U,EAAcqT,EAAQuB,EAASnB,EAAQoB,EAAShB,EAAQiB,EAAUb,EAASc,EAC3E5U,EAAcmT,EAAQsB,EAASlB,EAAQmB,EAASf,EAASgB,EAAUZ,EAASa,EAC5E/G,EAAcuF,EAAQqB,EAASjB,EAAQkB,EAASd,EAASe,EAAUX,EAASY,EAE5EpH,EAAcyF,EAAQ4B,EAAUxB,EAAQyB,EAAUrB,EAAQsB,EAAUlB,EAASmB,EAC7EvH,EAAcyF,EAAQ2B,EAAUvB,EAAQwB,EAAUpB,EAAQqB,EAAUjB,EAASkB,EAC7EtH,EAAcyF,EAAQ0B,EAAUtB,EAAQuB,EAAUnB,EAASoB,EAAUhB,EAASiB,EAC9ElH,EAAcsF,EAAQyB,EAAUrB,EAAQsB,EAAUlB,EAASmB,EAAUf,EAASgB,EAkBlF,OAhBAnU,EAAO,GAAKrB,EACZqB,EAAO,GAAKlB,EACZkB,EAAO,GAAKf,EACZe,EAAO,GAAK8M,EACZ9M,EAAO,GAAKpB,EACZoB,EAAO,GAAKjB,EACZiB,EAAO,GAAKd,EACZc,EAAO,GAAK+M,EACZ/M,EAAO,GAAKnB,EACZmB,EAAO,GAAKhB,EACZgB,EAAO,IAAMb,EACba,EAAO,IAAMgN,EACbhN,EAAO,IAAM2M,EACb3M,EAAO,IAAM4M,EACb5M,EAAO,IAAM6M,EACb7M,EAAO,IAAMiN,EACNjN,GAWX0M,EAAQxH,IAAM,SAASF,EAAMC,EAAOjF,GAuBhC,OArBAL,QAAMC,OAAOC,OAAO,OAAQmF,GAC5BrF,QAAMC,OAAOC,OAAO,QAASoF,GAC7BtF,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,IAAMgF,EAAK,IAAMC,EAAM,IAC9BjF,EAAO,IAAMgF,EAAK,IAAMC,EAAM,IAC9BjF,EAAO,IAAMgF,EAAK,IAAMC,EAAM,IAC9BjF,EAAO,IAAMgF,EAAK,IAAMC,EAAM,IAC9BjF,EAAO,IAAMgF,EAAK,IAAMC,EAAM,IAC9BjF,EAAO,IAAMgF,EAAK,IAAMC,EAAM,IACvBjF,GAWX0M,EAAQvH,SAAW,SAASH,EAAMC,EAAOjF,GAuBrC,OArBAL,QAAMC,OAAOC,OAAO,OAAQmF,GAC5BrF,QAAMC,OAAOC,OAAO,QAASoF,GAC7BtF,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,GAAKgF,EAAK,GAAKC,EAAM,GAC5BjF,EAAO,IAAMgF,EAAK,IAAMC,EAAM,IAC9BjF,EAAO,IAAMgF,EAAK,IAAMC,EAAM,IAC9BjF,EAAO,IAAMgF,EAAK,IAAMC,EAAM,IAC9BjF,EAAO,IAAMgF,EAAK,IAAMC,EAAM,IAC9BjF,EAAO,IAAMgF,EAAK,IAAMC,EAAM,IAC9BjF,EAAO,IAAMgF,EAAK,IAAMC,EAAM,IACvBjF,GAsBX0M,EAAQ0H,uBAAyB,SAASpP,EAAMC,EAAOjF,GAEnDL,QAAMC,OAAOC,OAAO,OAAQmF,GAC5BrF,QAAMC,OAAOC,OAAO,QAASoF,GAC7BtF,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAIoS,EAAQpN,EAAK,GACbqN,EAAQrN,EAAK,GACbsN,EAAQtN,EAAK,GACbwN,EAAQxN,EAAK,GACbyN,EAAQzN,EAAK,GACb0N,EAAQ1N,EAAK,GACb4N,EAAQ5N,EAAK,GACb6N,EAAQ7N,EAAK,GACb8N,EAAS9N,EAAK,IACdgO,EAAShO,EAAK,IACdiO,EAASjO,EAAK,IACdkO,EAASlO,EAAK,IAEdoO,EAASnO,EAAM,GACfoO,EAASpO,EAAM,GACfqO,EAASrO,EAAM,GACfuO,EAASvO,EAAM,GACfwO,EAASxO,EAAM,GACfyO,EAASzO,EAAM,GACf2O,EAAS3O,EAAM,GACf4O,EAAS5O,EAAM,GACf6O,EAAU7O,EAAM,IAChB+O,EAAU/O,EAAM,IAChBgP,EAAUhP,EAAM,IAChBiP,EAAUjP,EAAM,IAEhBtG,EAAcyT,EAAQgB,EAASZ,EAAQa,EAAST,EAAQU,EACxDxU,EAAcuT,EAAQe,EAASX,EAAQY,EAASR,EAAQS,EACxDrU,EAAcqT,EAAQc,EAASV,EAAQW,EAASP,EAASQ,EAEzD1U,EAAcwT,EAAQoB,EAAShB,EAAQiB,EAASb,EAAQc,EACxD3U,EAAcsT,EAAQmB,EAASf,EAAQgB,EAASZ,EAAQa,EACxDxU,EAAcoT,EAAQkB,EAASd,EAAQe,EAASX,EAASY,EAEzD7U,EAAcuT,EAAQwB,EAASpB,EAAQqB,EAASjB,EAAQkB,EACxD9U,EAAcqT,EAAQuB,EAASnB,EAAQoB,EAAShB,EAAQiB,EACxD3U,EAAcmT,EAAQsB,EAASlB,EAAQmB,EAASf,EAASgB,EAEzDnH,EAAcyF,EAAQ4B,EAAUxB,EAAQyB,EAAUrB,EAAQsB,EAAUlB,EACpEpG,EAAcyF,EAAQ2B,EAAUvB,EAAQwB,EAAUpB,EAAQqB,EAAUjB,EACpEpG,EAAcyF,EAAQ0B,EAAUtB,EAAQuB,EAAUnB,EAASoB,EAAUhB,EAkBzE,OAhBAlT,EAAO,GAAKrB,EACZqB,EAAO,GAAKlB,EACZkB,EAAO,GAAKf,EACZe,EAAO,GAAK,EACZA,EAAO,GAAKpB,EACZoB,EAAO,GAAKjB,EACZiB,EAAO,GAAKd,EACZc,EAAO,GAAK,EACZA,EAAO,GAAKnB,EACZmB,EAAO,GAAKhB,EACZgB,EAAO,IAAMb,EACba,EAAO,IAAM,EACbA,EAAO,IAAM2M,EACb3M,EAAO,IAAM4M,EACb5M,EAAO,IAAM6M,EACb7M,EAAO,IAAM,EACNA,GAiBX0M,EAAQ2H,kBAAoB,SAASnU,EAAQ8N,EAAUhO,GAEnDL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,WAAYmO,GAChCrO,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAIoS,EAAQlS,EAAO,GACfmS,EAAQnS,EAAO,GACfoS,EAAQpS,EAAO,GACfsS,EAAQtS,EAAO,GACfuS,EAAQvS,EAAO,GACfwS,EAAQxS,EAAO,GACf0S,EAAQ1S,EAAO,GACf2S,EAAQ3S,EAAO,GACf4S,EAAS5S,EAAO,IAEhBkT,EAASpF,EAAS,GAClBqF,EAASrF,EAAS,GAClBsF,EAAStF,EAAS,GAClBwF,EAASxF,EAAS,GAClByF,EAASzF,EAAS,GAClB0F,EAAS1F,EAAS,GAClB4F,EAAS5F,EAAS,GAClB6F,EAAS7F,EAAS,GAClB8F,EAAU9F,EAAS,GAEnBrP,EAAcyT,EAAQgB,EAASZ,EAAQa,EAAST,EAAQU,EACxDxU,EAAcuT,EAAQe,EAASX,EAAQY,EAASR,EAAQS,EACxDrU,EAAcqT,EAAQc,EAASV,EAAQW,EAASP,EAASQ,EAEzD1U,EAAcwT,EAAQoB,EAAShB,EAAQiB,EAASb,EAAQc,EACxD3U,EAAcsT,EAAQmB,EAASf,EAAQgB,EAASZ,EAAQa,EACxDxU,EAAcoT,EAAQkB,EAASd,EAAQe,EAASX,EAASY,EAEzD7U,EAAcuT,EAAQwB,EAASpB,EAAQqB,EAASjB,EAAQkB,EACxD9U,EAAcqT,EAAQuB,EAASnB,EAAQoB,EAAShB,EAAQiB,EACxD3U,EAAcmT,EAAQsB,EAASlB,EAAQmB,EAASf,EAASgB,EAkB7D,OAhBA9T,EAAO,GAAKrB,EACZqB,EAAO,GAAKlB,EACZkB,EAAO,GAAKf,EACZe,EAAO,GAAK,EACZA,EAAO,GAAKpB,EACZoB,EAAO,GAAKjB,EACZiB,EAAO,GAAKd,EACZc,EAAO,GAAK,EACZA,EAAO,GAAKnB,EACZmB,EAAO,GAAKhB,EACZgB,EAAO,IAAMb,EACba,EAAO,IAAM,EACbA,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAME,EAAO,IACbF,GAiBX0M,EAAQ4H,sBAAwB,SAASpU,EAAQ+N,EAAajO,GAE1DL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,cAAeoO,GACnCtO,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAIU,EAAIuN,EAAYvN,EAChBE,EAAIqN,EAAYrN,EAChBE,EAAImN,EAAYnN,EAEhBiQ,EAAMrQ,EAAIR,EAAO,GAAOU,EAAIV,EAAO,GAAOY,EAAIZ,EAAO,GAAMA,EAAO,IAClE8Q,EAAMtQ,EAAIR,EAAO,GAAOU,EAAIV,EAAO,GAAOY,EAAIZ,EAAO,GAAMA,EAAO,IAClE+Q,EAAMvQ,EAAIR,EAAO,GAAOU,EAAIV,EAAO,GAAOY,EAAIZ,EAAO,IAAOA,EAAO,IAkBvE,OAhBAF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAM+Q,EACb/Q,EAAO,IAAMgR,EACbhR,EAAO,IAAMiR,EACbjR,EAAO,IAAME,EAAO,IACbF,GAGX,IAAIuU,EAAsB,IAAI/P,aAsB9BkI,EAAQ8H,uBAAyB,SAAStU,EAAQ6C,EAAO/C,GAUrD,OARAL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOqD,OAAO,QAASF,GAC7BpD,QAAMC,OAAOC,OAAO,SAAUG,GAG9BuU,EAAoB7T,EAAIqC,EACxBwR,EAAoB3T,EAAImC,EACxBwR,EAAoBzT,EAAIiC,EACjB2J,EAAQhH,gBAAgBxF,EAAQqU,EAAqBvU,IAuBhE0M,EAAQhH,gBAAkB,SAASxF,EAAQ6C,EAAO/C,GAE9CL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,QAASkD,GAC7BpD,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAImO,EAASpL,EAAMrC,EACf0N,EAASrL,EAAMnC,EACfyN,EAAStL,EAAMjC,EAGnB,OAAgB,IAAXqN,GAA+B,IAAXC,GAA+B,IAAXC,EAClC3B,EAAQzM,MAAMC,EAAQF,IAGjCA,EAAO,GAAKmO,EAASjO,EAAO,GAC5BF,EAAO,GAAKmO,EAASjO,EAAO,GAC5BF,EAAO,GAAKmO,EAASjO,EAAO,GAC5BF,EAAO,GAAK,EACZA,EAAO,GAAKoO,EAASlO,EAAO,GAC5BF,EAAO,GAAKoO,EAASlO,EAAO,GAC5BF,EAAO,GAAKoO,EAASlO,EAAO,GAC5BF,EAAO,GAAK,EACZA,EAAO,GAAKqO,EAASnO,EAAO,GAC5BF,EAAO,GAAKqO,EAASnO,EAAO,GAC5BF,EAAO,IAAMqO,EAASnO,EAAO,IAC7BF,EAAO,IAAM,EACbA,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAM,EACNA,IAWX0M,EAAQtH,iBAAmB,SAASlF,EAAQkE,EAAWpE,GAEnDL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,YAAauE,GACjCzE,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAIqF,EAAKjB,EAAU1D,EACf4E,EAAKlB,EAAUxD,EACf2E,EAAKnB,EAAUtD,EACf2T,EAAKrQ,EAAUpD,EAEfN,EAAIR,EAAO,GAAKmF,EAAKnF,EAAO,GAAKoF,EAAKpF,EAAO,GAAKqF,EAAKrF,EAAO,IAAMuU,EACpE7T,EAAIV,EAAO,GAAKmF,EAAKnF,EAAO,GAAKoF,EAAKpF,EAAO,GAAKqF,EAAKrF,EAAO,IAAMuU,EACpE3T,EAAIZ,EAAO,GAAKmF,EAAKnF,EAAO,GAAKoF,EAAKpF,EAAO,IAAMqF,EAAKrF,EAAO,IAAMuU,EACrEzT,EAAId,EAAO,GAAKmF,EAAKnF,EAAO,GAAKoF,EAAKpF,EAAO,IAAMqF,EAAKrF,EAAO,IAAMuU,EAMzE,OAJAzU,EAAOU,EAAIA,EACXV,EAAOY,EAAIA,EACXZ,EAAOc,EAAIA,EACXd,EAAOgB,EAAIA,EACJhB,GAmBX0M,EAAQgI,wBAA0B,SAASxU,EAAQkE,EAAWpE,GAE1DL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,YAAauE,GACjCzE,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAIqF,EAAKjB,EAAU1D,EACf4E,EAAKlB,EAAUxD,EACf2E,EAAKnB,EAAUtD,EAEfJ,EAAIR,EAAO,GAAKmF,EAAKnF,EAAO,GAAKoF,EAAKpF,EAAO,GAAKqF,EAClD3E,EAAIV,EAAO,GAAKmF,EAAKnF,EAAO,GAAKoF,EAAKpF,EAAO,GAAKqF,EAClDzE,EAAIZ,EAAO,GAAKmF,EAAKnF,EAAO,GAAKoF,EAAKpF,EAAO,IAAMqF,EAKvD,OAHAvF,EAAOU,EAAIA,EACXV,EAAOY,EAAIA,EACXZ,EAAOc,EAAIA,EACJd,GAgBX0M,EAAQiI,gBAAkB,SAASzU,EAAQkE,EAAWpE,GAElDL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,YAAauE,GACjCzE,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAIqF,EAAKjB,EAAU1D,EACf4E,EAAKlB,EAAUxD,EACf2E,EAAKnB,EAAUtD,EAEfJ,EAAIR,EAAO,GAAKmF,EAAKnF,EAAO,GAAKoF,EAAKpF,EAAO,GAAKqF,EAAKrF,EAAO,IAC9DU,EAAIV,EAAO,GAAKmF,EAAKnF,EAAO,GAAKoF,EAAKpF,EAAO,GAAKqF,EAAKrF,EAAO,IAC9DY,EAAIZ,EAAO,GAAKmF,EAAKnF,EAAO,GAAKoF,EAAKpF,EAAO,IAAMqF,EAAKrF,EAAO,IAKnE,OAHAF,EAAOU,EAAIA,EACXV,EAAOY,EAAIA,EACXZ,EAAOc,EAAIA,EACJd,GA0BX0M,EAAQlH,iBAAmB,SAAStF,EAAQuF,EAAQzF,GAuBhD,OArBAL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOqD,OAAO,SAAUwC,GAC9B9F,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAO,GAAKE,EAAO,GAAKuF,EACxBzF,EAAO,GAAKE,EAAO,GAAKuF,EACxBzF,EAAO,GAAKE,EAAO,GAAKuF,EACxBzF,EAAO,GAAKE,EAAO,GAAKuF,EACxBzF,EAAO,GAAKE,EAAO,GAAKuF,EACxBzF,EAAO,GAAKE,EAAO,GAAKuF,EACxBzF,EAAO,GAAKE,EAAO,GAAKuF,EACxBzF,EAAO,GAAKE,EAAO,GAAKuF,EACxBzF,EAAO,GAAKE,EAAO,GAAKuF,EACxBzF,EAAO,GAAKE,EAAO,GAAKuF,EACxBzF,EAAO,IAAME,EAAO,IAAMuF,EAC1BzF,EAAO,IAAME,EAAO,IAAMuF,EAC1BzF,EAAO,IAAME,EAAO,IAAMuF,EAC1BzF,EAAO,IAAME,EAAO,IAAMuF,EAC1BzF,EAAO,IAAME,EAAO,IAAMuF,EAC1BzF,EAAO,IAAME,EAAO,IAAMuF,EACnBzF,GAyBX0M,EAAQ/G,OAAS,SAASzF,EAAQF,GAsB9B,OApBAL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAO,IAAME,EAAO,GACpBF,EAAO,IAAME,EAAO,GACpBF,EAAO,IAAME,EAAO,GACpBF,EAAO,IAAME,EAAO,GACpBF,EAAO,IAAME,EAAO,GACpBF,EAAO,IAAME,EAAO,GACpBF,EAAO,IAAME,EAAO,GACpBF,EAAO,IAAME,EAAO,GACpBF,EAAO,IAAME,EAAO,GACpBF,EAAO,IAAME,EAAO,GACpBF,EAAO,KAAOE,EAAO,IACrBF,EAAO,KAAOE,EAAO,IACrBF,EAAO,KAAOE,EAAO,IACrBF,EAAO,KAAOE,EAAO,IACrBF,EAAO,KAAOE,EAAO,IACrBF,EAAO,KAAOE,EAAO,IACdF,GAyBX0M,EAAQ9G,UAAY,SAAS1F,EAAQF,GAEjCL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,SAAUG,GAG9B,IAAI4U,EAAU1U,EAAO,GACjB2U,EAAU3U,EAAO,GACjB4U,EAAU5U,EAAO,GACjB6U,EAAU7U,EAAO,GACjB8U,EAAU9U,EAAO,GACjB+U,EAAW/U,EAAO,IAkBtB,OAhBAF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,IACnBF,EAAO,GAAK4U,EACZ5U,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,IACnBF,EAAO,GAAK6U,EACZ7U,EAAO,GAAK+U,EACZ/U,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAME,EAAO,IACpBF,EAAO,IAAM8U,EACb9U,EAAO,IAAMgV,EACbhV,EAAO,IAAMiV,EACbjV,EAAO,IAAME,EAAO,IACbF,GAUX0M,EAAQ5F,IAAM,SAAS5G,EAAQF,GAuB3B,OArBAL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAC5BF,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAC5BF,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAC5BF,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAC5BF,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAC5BF,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAC5BF,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAC5BF,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAC5BF,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAC5BF,EAAO,GAAKmC,KAAK2E,IAAI5G,EAAO,IAC5BF,EAAO,IAAMmC,KAAK2E,IAAI5G,EAAO,KAC7BF,EAAO,IAAMmC,KAAK2E,IAAI5G,EAAO,KAC7BF,EAAO,IAAMmC,KAAK2E,IAAI5G,EAAO,KAC7BF,EAAO,IAAMmC,KAAK2E,IAAI5G,EAAO,KAC7BF,EAAO,IAAMmC,KAAK2E,IAAI5G,EAAO,KAC7BF,EAAO,IAAMmC,KAAK2E,IAAI5G,EAAO,KAEtBF,GAgCX0M,EAAQ/D,OAAS,SAAS3D,EAAMC,GAK5B,OAAQD,IAASC,GACTnF,UAAQkF,IACRlF,UAAQmF,IAERD,EAAK,MAAQC,EAAM,KACnBD,EAAK,MAAQC,EAAM,KACnBD,EAAK,MAAQC,EAAM,KAGnBD,EAAK,KAAOC,EAAM,IAClBD,EAAK,KAAOC,EAAM,IAClBD,EAAK,KAAOC,EAAM,IAClBD,EAAK,KAAOC,EAAM,IAClBD,EAAK,KAAOC,EAAM,IAClBD,EAAK,KAAOC,EAAM,IAClBD,EAAK,KAAOC,EAAM,IAClBD,EAAK,KAAOC,EAAM,IAClBD,EAAK,MAAQC,EAAM,KAGnBD,EAAK,KAAOC,EAAM,IAClBD,EAAK,KAAOC,EAAM,IAClBD,EAAK,MAAQC,EAAM,KACnBD,EAAK,MAAQC,EAAM,KAkC/ByH,EAAQ9D,cAAgB,SAAS5D,EAAMC,EAAOgD,GAK1C,OAHAtI,QAAMC,OAAOqD,OAAO,UAAWgF,GAGvBjD,IAASC,GACTnF,UAAQkF,IACRlF,UAAQmF,IACR9C,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAChC9F,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAChC9F,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAChC9F,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAChC9F,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAChC9F,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAChC9F,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAChC9F,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAChC9F,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAChC9F,KAAK2E,IAAI9B,EAAK,GAAKC,EAAM,KAAOgD,GAChC9F,KAAK2E,IAAI9B,EAAK,IAAMC,EAAM,MAAQgD,GAClC9F,KAAK2E,IAAI9B,EAAK,IAAMC,EAAM,MAAQgD,GAClC9F,KAAK2E,IAAI9B,EAAK,IAAMC,EAAM,MAAQgD,GAClC9F,KAAK2E,IAAI9B,EAAK,IAAMC,EAAM,MAAQgD,GAClC9F,KAAK2E,IAAI9B,EAAK,IAAMC,EAAM,MAAQgD,GAClC9F,KAAK2E,IAAI9B,EAAK,IAAMC,EAAM,MAAQgD,GAU9CyE,EAAQwI,eAAiB,SAAShV,EAAQF,GAStC,OAPAL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAOU,EAAIR,EAAO,IAClBF,EAAOY,EAAIV,EAAO,IAClBF,EAAOc,EAAIZ,EAAO,IACXF,GAyBX0M,EAAQyI,WAAa,SAASjV,EAAQF,GAelC,OAbAL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,SAAUG,GAG9BA,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,GACnBF,EAAO,GAAKE,EAAO,IACZF,GAGX,IAAIoV,EAAyB,IAAI1W,EAC7B2W,EAAqB,IAAI3W,EACzB4W,EAAmB,IAAI9N,EACvB+N,EAA2B,IAAI/N,EAAW,EAAK,EAAK,EAAK,GAc7DkF,EAAQjE,QAAU,SAASvI,EAAQF,GAE/BL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,SAAUG,GAM9B,IAAIwV,EAAOtV,EAAO,GACduV,EAAOvV,EAAO,GACdwV,EAAOxV,EAAO,GACdyV,EAAOzV,EAAO,IACd0V,EAAO1V,EAAO,GACd2V,EAAO3V,EAAO,GACd4V,EAAO5V,EAAO,GACd6V,EAAO7V,EAAO,IACd8V,EAAO9V,EAAO,GACd+V,EAAO/V,EAAO,GACdgW,EAAQhW,EAAO,IACfiW,EAAQjW,EAAO,IACfkW,EAAQlW,EAAO,GACfmW,EAAQnW,EAAO,GACfoW,EAAQpW,EAAO,IACfqW,EAAQrW,EAAO,IAGfsW,EAAON,EAAQK,EACfE,EAAON,EAAQG,EACfI,EAAOT,EAAOM,EACdI,EAAOR,EAAQE,EACfO,EAAOX,EAAOK,EACdO,EAAOX,EAAQG,EACfS,EAAOd,EAAOO,EACdQ,EAAOZ,EAAQC,EACfY,EAAOhB,EAAOM,EACdW,EAAOf,EAAQE,EACfc,EAAQlB,EAAOK,EACfc,EAAQlB,EAAOG,EAGfgB,EAAQZ,EAAOX,EAAOc,EAAOb,EAAOc,EAAOb,GAASU,EAAOZ,EAAOa,EAAOZ,EAAOe,EAAOd,GACvFsB,EAAQZ,EAAOb,EAAOkB,EAAOhB,EAAOmB,EAAOlB,GAASS,EAAOZ,EAAOmB,EAAOjB,EAAOkB,EAAOjB,GACvFuB,EAAQZ,EAAOd,EAAOmB,EAAOlB,EAAOqB,EAAQnB,GAASY,EAAOf,EAAOkB,EAAOjB,EAAOsB,EAAQpB,GACzFwB,EAAQV,EAAOjB,EAAOoB,EAAOnB,EAAOsB,EAAQrB,GAASc,EAAOhB,EAAOqB,EAAOpB,EAAOqB,EAAQpB,GACzF0B,EAAQf,EAAOhB,EAAOiB,EAAOhB,EAAOmB,EAAOlB,GAASa,EAAOf,EAAOkB,EAAOjB,EAAOkB,EAAOjB,GACvF8B,EAAQjB,EAAOhB,EAAOuB,EAAOrB,EAAOsB,EAAOrB,GAASc,EAAOjB,EAAOsB,EAAOpB,EAAOuB,EAAOtB,GACvF+B,EAAQf,EAAOnB,EAAOsB,EAAOrB,EAAO0B,EAAQxB,GAASe,EAAOlB,EAAOuB,EAAOtB,EAAOyB,EAAQvB,GACzFgC,EAAQf,EAAOpB,EAAOyB,EAAOxB,EAAOyB,EAAQxB,GAASmB,EAAOrB,EAAOwB,EAAOvB,EAAO0B,EAAQzB,GAiBzFkC,GAdJpB,EAAOd,EAAOK,GAcKM,GAXnBM,EAAOhB,EAAOE,GAWoBS,GAVlCM,EAAOnB,EAAOK,GAUmCS,IAbjDE,EAAOd,EAAOG,GAaoDO,GAZlEK,EAAOjB,EAAOM,GAYmEO,GATjFO,EAAOnB,EAAOG,GASkFU,GAC5FsB,EAAQpB,EAAOL,GATnBU,EAAOtB,EAAOO,GASoBO,GANlCW,EAAOvB,EAAOE,GAMmCW,GAAUC,EAAOJ,GARlEW,EAAOpB,EAAOC,GAQmEU,GAPjFU,EAAOxB,EAAOM,GAOkFS,GAC5FuB,EAASpB,EAAON,EAAQW,EAAOV,GANnCa,EAAQ1B,EAAOK,GAMoCU,GAAUI,EAAOP,EAAQU,EAAOT,GALnFc,EAAQ1B,EAAOG,GAKoFW,GAC/FwB,EAASlB,EAAOT,EAAQY,EAAOX,EAAQc,EAAQb,GAAUM,EAAOR,EAAQa,EAAOZ,EAAQa,EAAQZ,GAC/F0B,EAAStB,EAAOR,EAAQW,EAAOV,EAAQM,EAAOR,GAASW,EAAOT,EAAQK,EAAOP,EAAOU,EAAOT,GAC3F+B,EAASjB,EAAOb,EAAQK,EAAOR,EAAOe,EAAOb,GAAUY,EAAOZ,EAAQe,EAAOd,EAAQM,EAAOT,GAC5FkC,GAASpB,EAAOb,EAAOkB,EAAQhB,EAAQQ,EAAOX,GAASkB,EAAQf,EAAQO,EAAOV,EAAOe,EAAOd,GAC5FkC,GAASjB,EAAQhB,EAAQU,EAAOZ,EAAOiB,EAAOhB,GAASe,EAAOf,EAAOkB,EAAQjB,EAAQW,EAAOb,GAG5FoC,GAAM5C,EAAO4B,EAAO3B,EAAO4B,EAAO3B,EAAO4B,EAAO3B,EAAO4B,EAE3D,GAAIpV,KAAK2E,IAAIsR,IAAO1R,aAAW2R,UAAW,CAGtC,GAAI3Z,EAAQkK,cAAc8D,EAAQyI,WAAWjV,EAAQkV,GAAyBC,EAAoB3O,aAAW4R,WACzG9Q,EAAWmB,OAAO+D,EAAQrI,OAAOnE,EAAQ,EAAGoV,GAAmBC,GAkB/D,OAhBAvV,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,IAAM,EACbA,EAAO,IAAM,EACbA,EAAO,KAAOE,EAAO,IACrBF,EAAO,KAAOE,EAAO,IACrBF,EAAO,KAAOE,EAAO,IACrBF,EAAO,IAAM,EACNA,EAGX,MAAM,IAAIuY,eAAa,6DAsB3B,OAlBAH,GAAM,EAAMA,GAEZpY,EAAO,GAAKoX,EAAOgB,GACnBpY,EAAO,GAAKqX,EAAOe,GACnBpY,EAAO,GAAKsX,EAAOc,GACnBpY,EAAO,GAAKuX,EAAOa,GACnBpY,EAAO,GAAKwX,EAAOY,GACnBpY,EAAO,GAAKyX,EAAOW,GACnBpY,EAAO,GAAK0X,EAAOU,GACnBpY,EAAO,GAAK2X,EAAOS,GACnBpY,EAAO,GAAK4X,EAAOQ,GACnBpY,EAAO,GAAK6X,EAAOO,GACnBpY,EAAO,IAAM8X,EAAQM,GACrBpY,EAAO,IAAM+X,EAAQK,GACrBpY,EAAO,IAAMgY,EAAQI,GACrBpY,EAAO,IAAMiY,EAAQG,GACrBpY,EAAO,IAAMkY,GAAQE,GACrBpY,EAAO,IAAMmY,GAAQC,GACdpY,GAgBX0M,EAAQ8L,sBAAwB,SAAStY,EAAQF,GAE7CL,QAAMC,OAAOC,OAAO,SAAUK,GAC9BP,QAAMC,OAAOC,OAAO,SAAUG,GAS9B,IAAIyY,EAAUvY,EAAO,GACjB0U,EAAU1U,EAAO,GACjB2U,EAAU3U,EAAO,GACjBwY,EAAUxY,EAAO,GACjByY,EAAUzY,EAAO,GACjB6U,EAAU7U,EAAO,GACjB0Y,EAAU1Y,EAAO,GACjB2Y,EAAU3Y,EAAO,GACjB4Y,EAAW5Y,EAAO,IAElBmF,EAAKnF,EAAO,IACZoF,EAAKpF,EAAO,IACZqF,EAAKrF,EAAO,IAEZQ,GAAK+X,EAAUpT,EAAKuP,EAAUtP,EAAKuP,EAAUtP,EAC7C3E,GAAK8X,EAAUrT,EAAKsT,EAAUrT,EAAKyP,EAAUxP,EAC7CzE,GAAK8X,EAAUvT,EAAKwT,EAAUvT,EAAKwT,EAAWvT,EAkBlD,OAhBAvF,EAAO,GAAKyY,EACZzY,EAAO,GAAK0Y,EACZ1Y,EAAO,GAAK4Y,EACZ5Y,EAAO,GAAK,EACZA,EAAO,GAAK4U,EACZ5U,EAAO,GAAK2Y,EACZ3Y,EAAO,GAAK6Y,EACZ7Y,EAAO,GAAK,EACZA,EAAO,GAAK6U,EACZ7U,EAAO,GAAK+U,EACZ/U,EAAO,IAAM8Y,EACb9Y,EAAO,IAAM,EACbA,EAAO,IAAMU,EACbV,EAAO,IAAMY,EACbZ,EAAO,IAAMc,EACbd,EAAO,IAAM,EACNA,GASX0M,EAAQrF,SAAWwB,OAAOC,OAAO,IAAI4D,EAAQ,EAAK,EAAK,EAAK,EAChB,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,IAQ3DA,EAAQ3D,KAAOF,OAAOC,OAAO,IAAI4D,EAAQ,EAAK,EAAK,EAAK,EAChB,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,IAQvDA,EAAQ1D,YAAc,EAQtB0D,EAAQzD,YAAc,EAQtByD,EAAQxD,YAAc,EAQtBwD,EAAQqM,YAAc,EAQtBrM,EAAQvD,YAAc,EAQtBuD,EAAQtD,YAAc,EAQtBsD,EAAQrD,YAAc,EAQtBqD,EAAQsM,YAAc,EAQtBtM,EAAQpD,YAAc,EAQtBoD,EAAQnD,YAAc,EAQtBmD,EAAQlD,YAAc,GAQtBkD,EAAQuM,YAAc,GAQtBvM,EAAQwM,YAAc,GAQtBxM,EAAQyM,YAAc,GAQtBzM,EAAQ0M,YAAc,GAQtB1M,EAAQ2M,YAAc,GAEtBxQ,OAAOY,iBAAiBiD,EAAQhD,UAAW,CAOvCC,OAAS,CACLC,IAAM,WACF,OAAO8C,EAAQpN,iBAW3BoN,EAAQhD,UAAUzJ,MAAQ,SAASD,GAC/B,OAAO0M,EAAQzM,MAAMb,KAAMY,IAU/B0M,EAAQhD,UAAUf,OAAS,SAAS1D,GAChC,OAAOyH,EAAQ/D,OAAOvJ,KAAM6F,IAMhCyH,EAAQ7C,YAAc,SAAS3J,EAAQT,EAAOqK,GAC1C,OAAO5J,EAAO,KAAOT,EAAMqK,IACpB5J,EAAO,KAAOT,EAAMqK,EAAS,IAC7B5J,EAAO,KAAOT,EAAMqK,EAAS,IAC7B5J,EAAO,KAAOT,EAAMqK,EAAS,IAC7B5J,EAAO,KAAOT,EAAMqK,EAAS,IAC7B5J,EAAO,KAAOT,EAAMqK,EAAS,IAC7B5J,EAAO,KAAOT,EAAMqK,EAAS,IAC7B5J,EAAO,KAAOT,EAAMqK,EAAS,IAC7B5J,EAAO,KAAOT,EAAMqK,EAAS,IAC7B5J,EAAO,KAAOT,EAAMqK,EAAS,IAC7B5J,EAAO,MAAQT,EAAMqK,EAAS,KAC9B5J,EAAO,MAAQT,EAAMqK,EAAS,KAC9B5J,EAAO,MAAQT,EAAMqK,EAAS,KAC9B5J,EAAO,MAAQT,EAAMqK,EAAS,KAC9B5J,EAAO,MAAQT,EAAMqK,EAAS,KAC9B5J,EAAO,MAAQT,EAAMqK,EAAS,KAYzC4C,EAAQhD,UAAUd,cAAgB,SAAS3D,EAAOgD,GAC9C,OAAOyE,EAAQ9D,cAAcxJ,KAAM6F,EAAOgD,IAS9CyE,EAAQhD,UAAUK,SAAW,WACzB,MAAO,IAAM3K,KAAK,GAAK,KAAOA,KAAK,GAAK,KAAOA,KAAK,GAAK,KAAOA,KAAK,IAAM,OAC9DA,KAAK,GAAK,KAAOA,KAAK,GAAK,KAAOA,KAAK,GAAK,KAAOA,KAAK,IAAM,OAC9DA,KAAK,GAAK,KAAOA,KAAK,GAAK,KAAOA,KAAK,IAAM,KAAOA,KAAK,IAAM,OAC/DA,KAAK,GAAK,KAAOA,KAAK,GAAK,KAAOA,KAAK,IAAM,KAAOA,KAAK,IAAM"}