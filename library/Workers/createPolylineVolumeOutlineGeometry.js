/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2017 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["./when-4ca4e419","./Check-430b3551","./defineProperties-163ddb68","./Cartesian3-32451e63","./Ellipsoid-d2aa3b12","./Transforms-7b04d7e0","./Matrix4-33464f2b","./RuntimeError-443472b0","./Cartesian2-f49a1383","./FeatureDetection-0d4fee13","./WebGLConstants-2ddfa2f9","./ComponentDatatype-329b9462","./GeometryAttribute-b8faa946","./GeometryAttributes-614c63f8","./IndexDatatype-153fdd7f","./IntersectionTests-15d018f5","./Plane-84b14a0a","./arrayRemoveDuplicates-c3fd0b84","./BoundingRectangle-c080f887","./EllipsoidTangentPlane-3967708f","./EllipsoidRhumbLine-c004db91","./PolygonPipeline-d25dad97","./PolylineVolumeGeometryLibrary-06ac58f3","./EllipsoidGeodesic-c57b5e5c","./PolylinePipeline-4ac94627"],(function(e,i,r,n,t,o,a,l,s,p,d,u,c,y,f,h,g,v,m,E,P,_,b,C,k){"use strict";function D(o){var a=(o=e.defaultValue(o,e.defaultValue.EMPTY_OBJECT)).polylinePositions,l=o.shapePositions;if(!e.defined(a))throw new i.DeveloperError("options.polylinePositions is required.");if(!e.defined(l))throw new i.DeveloperError("options.shapePositions is required.");this._positions=a,this._shape=l,this._ellipsoid=t.Ellipsoid.clone(e.defaultValue(o.ellipsoid,t.Ellipsoid.WGS84)),this._cornerType=e.defaultValue(o.cornerType,b.CornerType.ROUNDED),this._granularity=e.defaultValue(o.granularity,r.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeOutlineGeometry";var p=1+a.length*n.Cartesian3.packedLength;p+=1+l.length*s.Cartesian2.packedLength,this.packedLength=p+t.Ellipsoid.packedLength+2}D.pack=function(r,o,a){if(!e.defined(r))throw new i.DeveloperError("value is required");if(!e.defined(o))throw new i.DeveloperError("array is required");var l;a=e.defaultValue(a,0);var p=r._positions,d=p.length;for(o[a++]=d,l=0;l<d;++l,a+=n.Cartesian3.packedLength)n.Cartesian3.pack(p[l],o,a);var u=r._shape;for(d=u.length,o[a++]=d,l=0;l<d;++l,a+=s.Cartesian2.packedLength)s.Cartesian2.pack(u[l],o,a);return t.Ellipsoid.pack(r._ellipsoid,o,a),a+=t.Ellipsoid.packedLength,o[a++]=r._cornerType,o[a]=r._granularity,o};var w=t.Ellipsoid.clone(t.Ellipsoid.UNIT_SPHERE),L={polylinePositions:void 0,shapePositions:void 0,ellipsoid:w,height:void 0,cornerType:void 0,granularity:void 0};D.unpack=function(r,o,a){if(!e.defined(r))throw new i.DeveloperError("array is required");var l;o=e.defaultValue(o,0);var p=r[o++],d=new Array(p);for(l=0;l<p;++l,o+=n.Cartesian3.packedLength)d[l]=n.Cartesian3.unpack(r,o);p=r[o++];var u=new Array(p);for(l=0;l<p;++l,o+=s.Cartesian2.packedLength)u[l]=s.Cartesian2.unpack(r,o);var c=t.Ellipsoid.unpack(r,o,w);o+=t.Ellipsoid.packedLength;var y=r[o++],f=r[o];return e.defined(a)?(a._positions=d,a._shape=u,a._ellipsoid=t.Ellipsoid.clone(c,a._ellipsoid),a._cornerType=y,a._granularity=f,a):(L.polylinePositions=d,L.shapePositions=u,L.cornerType=y,L.granularity=f,new D(L))};var T=new m.BoundingRectangle;return D.createGeometry=function(e){var i=e._positions,r=v.arrayRemoveDuplicates(i,n.Cartesian3.equalsEpsilon),t=e._shape;if(t=b.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(t),!(r.length<2||t.length<3)){_.PolygonPipeline.computeWindingOrder2D(t)===_.WindingOrder.CLOCKWISE&&t.reverse();var a=m.BoundingRectangle.fromPoints(t,T);return function(e,i){var r=new y.GeometryAttributes;r.position=new c.GeometryAttribute({componentDatatype:u.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e});var n,t,a=i.length,l=r.position.values.length/3,s=e.length/3/a,p=f.IndexDatatype.createTypedArray(l,2*a*(s+1)),d=0,h=(n=0)*a;for(t=0;t<a-1;t++)p[d++]=t+h,p[d++]=t+h+1;for(p[d++]=a-1+h,p[d++]=h,h=(n=s-1)*a,t=0;t<a-1;t++)p[d++]=t+h,p[d++]=t+h+1;for(p[d++]=a-1+h,p[d++]=h,n=0;n<s-1;n++){var g=a*n,v=g+a;for(t=0;t<a;t++)p[d++]=t+g,p[d++]=t+v}return new c.Geometry({attributes:r,indices:f.IndexDatatype.createTypedArray(l,p),boundingSphere:o.BoundingSphere.fromVertices(e),primitiveType:c.PrimitiveType.LINES})}(b.PolylineVolumeGeometryLibrary.computePositions(r,t,a,e,!1),t)}},function(i,r){return e.defined(r)&&(i=D.unpack(i,r)),i._ellipsoid=t.Ellipsoid.clone(i._ellipsoid),D.createGeometry(i)}}));
