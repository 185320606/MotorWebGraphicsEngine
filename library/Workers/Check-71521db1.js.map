{"version":3,"file":"Check-71521db1.js","sources":["../../../../Source/Core/Check.js"],"sourcesContent":["import defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\n\r\n    /**\r\n     * Contains functions for checking that supplied arguments are of a specified type\r\n     * or meet specified conditions\r\n     * @private\r\n     */\r\n    var Check = {};\r\n\r\n    /**\r\n     * Contains type checking functions, all using the typeof operator\r\n     */\r\n    Check.typeOf = {};\r\n\r\n    function getUndefinedErrorMessage(name) {\r\n        return name + ' is required, actual value was undefined';\r\n    }\r\n\r\n    function getFailedTypeErrorMessage(actual, expected, name) {\r\n        return 'Expected ' + name + ' to be typeof ' + expected + ', actual typeof was ' + actual;\r\n    }\r\n\r\n    /**\r\n     * Throws if test is not defined\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value that is to be checked\r\n     * @exception {DeveloperError} test must be defined\r\n     */\r\n    Check.defined = function (name, test) {\r\n        if (!defined(test)) {\r\n            throw new DeveloperError(getUndefinedErrorMessage(name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'function'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'function'\r\n     */\r\n    Check.typeOf.func = function (name, test) {\r\n        if (typeof test !== 'function') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'function', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'string'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'string'\r\n     */\r\n    Check.typeOf.string = function (name, test) {\r\n        if (typeof test !== 'string') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'string', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'number'\r\n     */\r\n    Check.typeOf.number = function (name, test) {\r\n        if (typeof test !== 'number') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'number', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number' and less than limit\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @param {Number} limit The limit value to compare against\r\n     * @exception {DeveloperError} test must be typeof 'number' and less than limit\r\n     */\r\n    Check.typeOf.number.lessThan = function (name, test, limit) {\r\n        Check.typeOf.number(name, test);\r\n        if (test >= limit) {\r\n            throw new DeveloperError('Expected ' + name + ' to be less than ' + limit + ', actual value was ' + test);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number' and less than or equal to limit\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @param {Number} limit The limit value to compare against\r\n     * @exception {DeveloperError} test must be typeof 'number' and less than or equal to limit\r\n     */\r\n    Check.typeOf.number.lessThanOrEquals = function (name, test, limit) {\r\n        Check.typeOf.number(name, test);\r\n        if (test > limit) {\r\n            throw new DeveloperError('Expected ' + name + ' to be less than or equal to ' + limit + ', actual value was ' + test);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number' and greater than limit\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @param {Number} limit The limit value to compare against\r\n     * @exception {DeveloperError} test must be typeof 'number' and greater than limit\r\n     */\r\n    Check.typeOf.number.greaterThan = function (name, test, limit) {\r\n        Check.typeOf.number(name, test);\r\n        if (test <= limit) {\r\n            throw new DeveloperError('Expected ' + name + ' to be greater than ' + limit + ', actual value was ' + test);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number' and greater than or equal to limit\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @param {Number} limit The limit value to compare against\r\n     * @exception {DeveloperError} test must be typeof 'number' and greater than or equal to limit\r\n     */\r\n    Check.typeOf.number.greaterThanOrEquals = function (name, test, limit) {\r\n        Check.typeOf.number(name, test);\r\n        if (test < limit) {\r\n            throw new DeveloperError('Expected ' + name + ' to be greater than or equal to' + limit + ', actual value was ' + test);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'object'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'object'\r\n     */\r\n    Check.typeOf.object = function (name, test) {\r\n        if (typeof test !== 'object') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'object', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'boolean'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'boolean'\r\n     */\r\n    Check.typeOf.bool = function (name, test) {\r\n        if (typeof test !== 'boolean') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'boolean', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test1 and test2 is not typeof 'number' and not equal in value\r\n     *\r\n     * @param {String} name1 The name of the first variable being tested\r\n     * @param {String} name2 The name of the second variable being tested against\r\n     * @param {*} test1 The value to test\r\n     * @param {*} test2 The value to test against\r\n     * @exception {DeveloperError} test1 and test2 should be type of 'number' and be equal in value\r\n     */\r\n    Check.typeOf.number.equals = function (name1, name2, test1, test2) {\r\n        Check.typeOf.number(name1, test1);\r\n        Check.typeOf.number(name2, test2);\r\n        if (test1 !== test2) {\r\n            throw new DeveloperError(name1 + ' must be equal to ' + name2 + ', the actual values are ' + test1 + ' and ' + test2);\r\n        }\r\n    };\r\nexport default Check;\r\n"],"names":["Check","getFailedTypeErrorMessage","actual","expected","name","typeOf","defined","test","DeveloperError","getUndefinedErrorMessage","func","string","number","lessThan","limit","lessThanOrEquals","greaterThan","greaterThanOrEquals","object","bool","equals","name1","name2","test1","test2"],"mappings":"+FAQI,IAAIA,EAAQ,GAWZ,SAASC,EAA0BC,EAAQC,EAAUC,GACjD,MAAO,YAAcA,EAAO,iBAAmBD,EAAW,uBAAyBD,EAPvFF,EAAMK,OAAS,GAiBfL,EAAMM,QAAU,SAAUF,EAAMG,GAC5B,IAAKD,UAAQC,GACT,MAAM,IAAIC,iBAjBlB,SAAkCJ,GAC9B,OAAOA,EAAO,2CAgBeK,CAAyBL,KAW1DJ,EAAMK,OAAOK,KAAO,SAAUN,EAAMG,GAChC,GAAoB,mBAATA,EACP,MAAM,IAAIC,iBAAeP,SAAiCM,EAAM,WAAYH,KAWpFJ,EAAMK,OAAOM,OAAS,SAAUP,EAAMG,GAClC,GAAoB,iBAATA,EACP,MAAM,IAAIC,iBAAeP,SAAiCM,EAAM,SAAUH,KAWlFJ,EAAMK,OAAOO,OAAS,SAAUR,EAAMG,GAClC,GAAoB,iBAATA,EACP,MAAM,IAAIC,iBAAeP,SAAiCM,EAAM,SAAUH,KAYlFJ,EAAMK,OAAOO,OAAOC,SAAW,SAAUT,EAAMG,EAAMO,GAEjD,GADAd,EAAMK,OAAOO,OAAOR,EAAMG,GACtBA,GAAQO,EACR,MAAM,IAAIN,iBAAe,YAAcJ,EAAO,oBAAsBU,EAAQ,sBAAwBP,IAY5GP,EAAMK,OAAOO,OAAOG,iBAAmB,SAAUX,EAAMG,EAAMO,GAEzD,GADAd,EAAMK,OAAOO,OAAOR,EAAMG,GACtBA,EAAOO,EACP,MAAM,IAAIN,iBAAe,YAAcJ,EAAO,gCAAkCU,EAAQ,sBAAwBP,IAYxHP,EAAMK,OAAOO,OAAOI,YAAc,SAAUZ,EAAMG,EAAMO,GAEpD,GADAd,EAAMK,OAAOO,OAAOR,EAAMG,GACtBA,GAAQO,EACR,MAAM,IAAIN,iBAAe,YAAcJ,EAAO,uBAAyBU,EAAQ,sBAAwBP,IAY/GP,EAAMK,OAAOO,OAAOK,oBAAsB,SAAUb,EAAMG,EAAMO,GAE5D,GADAd,EAAMK,OAAOO,OAAOR,EAAMG,GACtBA,EAAOO,EACP,MAAM,IAAIN,iBAAe,YAAcJ,EAAO,kCAAoCU,EAAQ,sBAAwBP,IAW1HP,EAAMK,OAAOa,OAAS,SAAUd,EAAMG,GAClC,GAAoB,iBAATA,EACP,MAAM,IAAIC,iBAAeP,SAAiCM,EAAM,SAAUH,KAWlFJ,EAAMK,OAAOc,KAAO,SAAUf,EAAMG,GAChC,GAAoB,kBAATA,EACP,MAAM,IAAIC,iBAAeP,SAAiCM,EAAM,UAAWH,KAanFJ,EAAMK,OAAOO,OAAOQ,OAAS,SAAUC,EAAOC,EAAOC,EAAOC,GAGxD,GAFAxB,EAAMK,OAAOO,OAAOS,EAAOE,GAC3BvB,EAAMK,OAAOO,OAAOU,EAAOE,GACvBD,IAAUC,EACV,MAAM,IAAIhB,iBAAea,EAAQ,qBAAuBC,EAAQ,2BAA6BC,EAAQ,QAAUC"}