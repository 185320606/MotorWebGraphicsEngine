{"version":3,"file":"TerrainProvider-f24c668e.js","sources":["../../../../Source/Core/TerrainProvider.js"],"sourcesContent":["import defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\n\r\n    /**\r\n     * Provides terrain or other geometry for the surface of an ellipsoid.  The surface geometry is\r\n     * organized into a pyramid of tiles according to a {@link TilingScheme}.  This type describes an\r\n     * interface and is not intended to be instantiated directly.\r\n     *\r\n     * @alias TerrainProvider\r\n     * @constructor\r\n     *\r\n     * @see EllipsoidTerrainProvider\r\n     * @see CesiumTerrainProvider\r\n     * @see VRTheWorldTerrainProvider\r\n     * @see GoogleEarthEnterpriseTerrainProvider\r\n     */\r\n    function TerrainProvider() {\r\n        DeveloperError.throwInstantiationError();\r\n    }\r\n\r\n    Object.defineProperties(TerrainProvider.prototype, {\r\n        /**\r\n         * Gets an event that is raised when the terrain provider encounters an asynchronous error..  By subscribing\r\n         * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\r\n         * are passed an instance of {@link TileProviderError}.\r\n         * @memberof TerrainProvider.prototype\r\n         * @type {Event}\r\n         */\r\n        errorEvent : {\r\n            get : DeveloperError.throwInstantiationError\r\n        },\r\n\r\n        /**\r\n         * Gets the credit to display when this terrain provider is active.  Typically this is used to credit\r\n         * the source of the terrain. This function should\r\n         * not be called before {@link TerrainProvider#ready} returns true.\r\n         * @memberof TerrainProvider.prototype\r\n         * @type {Credit}\r\n         */\r\n        credit : {\r\n            get : DeveloperError.throwInstantiationError\r\n        },\r\n\r\n        /**\r\n         * Gets the tiling scheme used by the provider.  This function should\r\n         * not be called before {@link TerrainProvider#ready} returns true.\r\n         * @memberof TerrainProvider.prototype\r\n         * @type {TilingScheme}\r\n         */\r\n        tilingScheme : {\r\n            get : DeveloperError.throwInstantiationError\r\n        },\r\n\r\n        /**\r\n         * Gets a value indicating whether or not the provider is ready for use.\r\n         * @memberof TerrainProvider.prototype\r\n         * @type {Boolean}\r\n         */\r\n        ready : {\r\n            get : DeveloperError.throwInstantiationError\r\n        },\r\n\r\n        /**\r\n         * Gets a promise that resolves to true when the provider is ready for use.\r\n         * @memberof TerrainProvider.prototype\r\n         * @type {Promise.<Boolean>}\r\n         * @readonly\r\n         */\r\n        readyPromise : {\r\n            get : DeveloperError.throwInstantiationError\r\n        },\r\n\r\n        /**\r\n         * Gets a value indicating whether or not the provider includes a water mask.  The water mask\r\n         * indicates which areas of the globe are water rather than land, so they can be rendered\r\n         * as a reflective surface with animated waves.  This function should not be\r\n         * called before {@link TerrainProvider#ready} returns true.\r\n         * @memberof TerrainProvider.prototype\r\n         * @type {Boolean}\r\n         */\r\n        hasWaterMask : {\r\n            get : DeveloperError.throwInstantiationError\r\n        },\r\n\r\n        /**\r\n         * Gets a value indicating whether or not the requested tiles include vertex normals.\r\n         * This function should not be called before {@link TerrainProvider#ready} returns true.\r\n         * @memberof TerrainProvider.prototype\r\n         * @type {Boolean}\r\n         */\r\n        hasVertexNormals : {\r\n            get : DeveloperError.throwInstantiationError\r\n        },\r\n\r\n        /**\r\n         * Gets an object that can be used to determine availability of terrain from this provider, such as\r\n         * at points and in rectangles.  This function should not be called before\r\n         * {@link TerrainProvider#ready} returns true.  This property may be undefined if availability\r\n         * information is not available.\r\n         * @memberof TerrainProvider.prototype\r\n         * @type {TileAvailability}\r\n         */\r\n        availability : {\r\n            get : DeveloperError.throwInstantiationError\r\n        }\r\n    });\r\n\r\n    var regularGridIndicesCache = [];\r\n\r\n    /**\r\n     * Gets a list of indices for a triangle mesh representing a regular grid.  Calling\r\n     * this function multiple times with the same grid width and height returns the\r\n     * same list of indices.  The total number of vertices must be less than or equal\r\n     * to 65536.\r\n     *\r\n     * @param {Number} width The number of vertices in the regular grid in the horizontal direction.\r\n     * @param {Number} height The number of vertices in the regular grid in the vertical direction.\r\n     * @returns {Uint16Array|Uint32Array} The list of indices. Uint16Array gets returned for 64KB or less and Uint32Array for 4GB or less.\r\n     */\r\n    TerrainProvider.getRegularGridIndices = function(width, height) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (width * height >= CesiumMath.FOUR_GIGABYTES) {\r\n            throw new DeveloperError('The total number of vertices (width * height) must be less than 4,294,967,296.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var byWidth = regularGridIndicesCache[width];\r\n        if (!defined(byWidth)) {\r\n            regularGridIndicesCache[width] = byWidth = [];\r\n        }\r\n\r\n        var indices = byWidth[height];\r\n        if (!defined(indices)) {\r\n            if (width * height < CesiumMath.SIXTY_FOUR_KILOBYTES) {\r\n                indices = byWidth[height] = new Uint16Array((width - 1) * (height - 1) * 6);\r\n            } else {\r\n                indices = byWidth[height] = new Uint32Array((width - 1) * (height - 1) * 6);\r\n            }\r\n            addRegularGridIndices(width, height, indices, 0);\r\n        }\r\n\r\n        return indices;\r\n    };\r\n\r\n    var regularGridAndEdgeIndicesCache = [];\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    TerrainProvider.getRegularGridIndicesAndEdgeIndices = function(width, height) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (width * height >= CesiumMath.FOUR_GIGABYTES) {\r\n            throw new DeveloperError('The total number of vertices (width * height) must be less than 4,294,967,296.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var byWidth = regularGridAndEdgeIndicesCache[width];\r\n        if (!defined(byWidth)) {\r\n            regularGridAndEdgeIndicesCache[width] = byWidth = [];\r\n        }\r\n\r\n        var indicesAndEdges = byWidth[height];\r\n        if (!defined(indicesAndEdges)) {\r\n            var indices = TerrainProvider.getRegularGridIndices(width, height);\r\n\r\n            var edgeIndices = getEdgeIndices(width, height);\r\n            var westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;\r\n            var southIndicesEastToWest = edgeIndices.southIndicesEastToWest;\r\n            var eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;\r\n            var northIndicesWestToEast = edgeIndices.northIndicesWestToEast;\r\n\r\n            indicesAndEdges = byWidth[height] = {\r\n                indices : indices,\r\n                westIndicesSouthToNorth : westIndicesSouthToNorth,\r\n                southIndicesEastToWest : southIndicesEastToWest,\r\n                eastIndicesNorthToSouth : eastIndicesNorthToSouth,\r\n                northIndicesWestToEast : northIndicesWestToEast\r\n            };\r\n        }\r\n\r\n        return indicesAndEdges;\r\n    };\r\n\r\n    var regularGridAndSkirtAndEdgeIndicesCache = [];\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    TerrainProvider.getRegularGridAndSkirtIndicesAndEdgeIndices = function(width, height) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (width * height >= CesiumMath.FOUR_GIGABYTES) {\r\n            throw new DeveloperError('The total number of vertices (width * height) must be less than 4,294,967,296.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var byWidth = regularGridAndSkirtAndEdgeIndicesCache[width];\r\n        if (!defined(byWidth)) {\r\n            regularGridAndSkirtAndEdgeIndicesCache[width] = byWidth = [];\r\n        }\r\n\r\n        var indicesAndEdges = byWidth[height];\r\n        if (!defined(indicesAndEdges)) {\r\n            var gridVertexCount = width * height;\r\n            var gridIndexCount = (width - 1) * (height - 1) * 6;\r\n            var edgeVertexCount = width * 2 + height * 2;\r\n            var edgeIndexCount = Math.max(0, edgeVertexCount - 4) * 6;\r\n            var vertexCount = gridVertexCount + edgeVertexCount;\r\n            var indexCount = gridIndexCount + edgeIndexCount;\r\n\r\n            var edgeIndices = getEdgeIndices(width, height);\r\n            var westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;\r\n            var southIndicesEastToWest = edgeIndices.southIndicesEastToWest;\r\n            var eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;\r\n            var northIndicesWestToEast = edgeIndices.northIndicesWestToEast;\r\n\r\n            var indices = IndexDatatype.createTypedArray(vertexCount, indexCount);\r\n            addRegularGridIndices(width, height, indices, 0);\r\n            TerrainProvider.addSkirtIndices(westIndicesSouthToNorth, southIndicesEastToWest, eastIndicesNorthToSouth, northIndicesWestToEast, gridVertexCount, indices, gridIndexCount);\r\n\r\n            indicesAndEdges = byWidth[height] = {\r\n                indices : indices,\r\n                westIndicesSouthToNorth : westIndicesSouthToNorth,\r\n                southIndicesEastToWest : southIndicesEastToWest,\r\n                eastIndicesNorthToSouth : eastIndicesNorthToSouth,\r\n                northIndicesWestToEast : northIndicesWestToEast,\r\n                indexCountWithoutSkirts : gridIndexCount\r\n            };\r\n        }\r\n\r\n        return indicesAndEdges;\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    TerrainProvider.addSkirtIndices = function(westIndicesSouthToNorth, southIndicesEastToWest, eastIndicesNorthToSouth, northIndicesWestToEast, vertexCount, indices, offset) {\r\n        var vertexIndex = vertexCount;\r\n        offset = addSkirtIndices(westIndicesSouthToNorth, vertexIndex, indices, offset);\r\n        vertexIndex += westIndicesSouthToNorth.length;\r\n        offset = addSkirtIndices(southIndicesEastToWest, vertexIndex, indices, offset);\r\n        vertexIndex += southIndicesEastToWest.length;\r\n        offset = addSkirtIndices(eastIndicesNorthToSouth, vertexIndex, indices, offset);\r\n        vertexIndex += eastIndicesNorthToSouth.length;\r\n        addSkirtIndices(northIndicesWestToEast, vertexIndex, indices, offset);\r\n    };\r\n\r\n    function getEdgeIndices(width, height) {\r\n        var westIndicesSouthToNorth = new Array(height);\r\n        var southIndicesEastToWest = new Array(width);\r\n        var eastIndicesNorthToSouth = new Array(height);\r\n        var northIndicesWestToEast = new Array(width);\r\n\r\n        var i;\r\n        for (i = 0; i < width; ++i) {\r\n            northIndicesWestToEast[i] = i;\r\n            southIndicesEastToWest[i] = width * height - 1 - i;\r\n        }\r\n\r\n        for (i = 0; i < height; ++i) {\r\n            eastIndicesNorthToSouth[i] = (i + 1) * width - 1;\r\n            westIndicesSouthToNorth[i] = (height - i - 1) * width;\r\n        }\r\n\r\n        return {\r\n            westIndicesSouthToNorth : westIndicesSouthToNorth,\r\n            southIndicesEastToWest : southIndicesEastToWest,\r\n            eastIndicesNorthToSouth : eastIndicesNorthToSouth,\r\n            northIndicesWestToEast : northIndicesWestToEast\r\n        };\r\n    }\r\n\r\n    function addRegularGridIndices(width, height, indices, offset) {\r\n        var index = 0;\r\n        for (var j = 0; j < height - 1; ++j) {\r\n            for (var i = 0; i < width - 1; ++i) {\r\n                var upperLeft = index;\r\n                var lowerLeft = upperLeft + width;\r\n                var lowerRight = lowerLeft + 1;\r\n                var upperRight = upperLeft + 1;\r\n\r\n                indices[offset++] = upperLeft;\r\n                indices[offset++] = lowerLeft;\r\n                indices[offset++] = upperRight;\r\n                indices[offset++] = upperRight;\r\n                indices[offset++] = lowerLeft;\r\n                indices[offset++] = lowerRight;\r\n\r\n                ++index;\r\n            }\r\n            ++index;\r\n        }\r\n    }\r\n\r\n    function addSkirtIndices(edgeIndices, vertexIndex, indices, offset) {\r\n        var previousIndex = edgeIndices[0];\r\n\r\n        var length = edgeIndices.length;\r\n        for (var i = 1; i < length; ++i) {\r\n            var index = edgeIndices[i];\r\n\r\n            indices[offset++] = previousIndex;\r\n            indices[offset++] = index;\r\n            indices[offset++] = vertexIndex;\r\n\r\n            indices[offset++] = vertexIndex;\r\n            indices[offset++] = index;\r\n            indices[offset++] = vertexIndex + 1;\r\n\r\n            previousIndex = index;\r\n            ++vertexIndex;\r\n        }\r\n\r\n        return offset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the quality of terrain created from heightmaps.  A value of 1.0 will\r\n     * ensure that adjacent heightmap vertices are separated by no more than\r\n     * {@link Globe.maximumScreenSpaceError} screen pixels and will probably go very slowly.\r\n     * A value of 0.5 will cut the estimated level zero geometric error in half, allowing twice the\r\n     * screen pixels between adjacent heightmap vertices and thus rendering more quickly.\r\n     * @type {Number}\r\n     */\r\n    TerrainProvider.heightmapTerrainQuality = 0.25;\r\n\r\n    /**\r\n     * Determines an appropriate geometric error estimate when the geometry comes from a heightmap.\r\n     *\r\n     * @param {Ellipsoid} ellipsoid The ellipsoid to which the terrain is attached.\r\n     * @param {Number} tileImageWidth The width, in pixels, of the heightmap associated with a single tile.\r\n     * @param {Number} numberOfTilesAtLevelZero The number of tiles in the horizontal direction at tile level zero.\r\n     * @returns {Number} An estimated geometric error.\r\n     */\r\n    TerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap = function(ellipsoid, tileImageWidth, numberOfTilesAtLevelZero) {\r\n        return ellipsoid.maximumRadius * 2 * Math.PI * TerrainProvider.heightmapTerrainQuality / (tileImageWidth * numberOfTilesAtLevelZero);\r\n    };\r\n\r\n    /**\r\n     * Requests the geometry for a given tile.  This function should not be called before\r\n     * {@link TerrainProvider#ready} returns true.  The result must include terrain data and\r\n     * may optionally include a water mask and an indication of which child tiles are available.\r\n     * @function\r\n     *\r\n     * @param {Number} x The X coordinate of the tile for which to request geometry.\r\n     * @param {Number} y The Y coordinate of the tile for which to request geometry.\r\n     * @param {Number} level The level of the tile for which to request geometry.\r\n     * @param {Request} [request] The request object. Intended for internal use only.\r\n     *\r\n     * @returns {Promise.<TerrainData>|undefined} A promise for the requested geometry.  If this method\r\n     *          returns undefined instead of a promise, it is an indication that too many requests are already\r\n     *          pending and the request will be retried later.\r\n     */\r\n    TerrainProvider.prototype.requestTileGeometry = DeveloperError.throwInstantiationError;\r\n\r\n    /**\r\n     * Gets the maximum geometric error allowed in a tile at a given level.  This function should not be\r\n     * called before {@link TerrainProvider#ready} returns true.\r\n     * @function\r\n     *\r\n     * @param {Number} level The tile level for which to get the maximum geometric error.\r\n     * @returns {Number} The maximum geometric error.\r\n     */\r\n    TerrainProvider.prototype.getLevelMaximumGeometricError = DeveloperError.throwInstantiationError;\r\n\r\n    /**\r\n     * Determines whether data for a tile is available to be loaded.\r\n     * @function\r\n     *\r\n     * @param {Number} x The X coordinate of the tile for which to request geometry.\r\n     * @param {Number} y The Y coordinate of the tile for which to request geometry.\r\n     * @param {Number} level The level of the tile for which to request geometry.\r\n     * @returns {Boolean} Undefined if not supported by the terrain provider, otherwise true or false.\r\n     */\r\n    TerrainProvider.prototype.getTileDataAvailable = DeveloperError.throwInstantiationError;\r\n\r\n    /**\r\n     * Makes sure we load availability data for a tile\r\n     * @function\r\n     *\r\n     * @param {Number} x The X coordinate of the tile for which to request geometry.\r\n     * @param {Number} y The Y coordinate of the tile for which to request geometry.\r\n     * @param {Number} level The level of the tile for which to request geometry.\r\n     * @returns {undefined|Promise} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\r\n     */\r\n    TerrainProvider.prototype.loadTileDataAvailability = DeveloperError.throwInstantiationError;\r\nexport default TerrainProvider;\r\n"],"names":["TerrainProvider","DeveloperError","throwInstantiationError","Object","defineProperties","prototype","errorEvent","get","credit","tilingScheme","ready","readyPromise","hasWaterMask","hasVertexNormals","availability","regularGridIndicesCache","getRegularGridIndices","width","height","CesiumMath","FOUR_GIGABYTES","byWidth","defined","indices","addRegularGridIndices","SIXTY_FOUR_KILOBYTES","Uint16Array","Uint32Array","regularGridAndEdgeIndicesCache","getRegularGridIndicesAndEdgeIndices","indicesAndEdges","edgeIndices","getEdgeIndices","westIndicesSouthToNorth","southIndicesEastToWest","eastIndicesNorthToSouth","northIndicesWestToEast","regularGridAndSkirtAndEdgeIndicesCache","i","Array","offset","index","j","upperLeft","lowerLeft","lowerRight","upperRight","addSkirtIndices","vertexIndex","previousIndex","length","getRegularGridAndSkirtIndicesAndEdgeIndices","gridVertexCount","gridIndexCount","edgeVertexCount","vertexCount","indexCount","Math","max","IndexDatatype","createTypedArray","indexCountWithoutSkirts","heightmapTerrainQuality","getEstimatedLevelZeroGeometricErrorForAHeightmap","ellipsoid","tileImageWidth","numberOfTilesAtLevelZero","maximumRadius","PI","requestTileGeometry","getLevelMaximumGeometricError","getTileDataAvailable","loadTileDataAvailability"],"mappings":"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"}