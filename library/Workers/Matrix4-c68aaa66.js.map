{"version":3,"file":"Matrix4-c68aaa66.js","sources":["../../../../Source/Core/Matrix3.js","../../../../Source/Core/Cartesian4.js","../../../../Source/Core/Matrix4.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\n\r\n    /**\r\n     * A 3x3 matrix, indexable as a column-major order array.\r\n     * Constructor parameters are in row-major order for code readability.\r\n     * @alias Matrix3\r\n     * @constructor\r\n     *\r\n     * @param {Number} [column0Row0=0.0] The value for column 0, row 0.\r\n     * @param {Number} [column1Row0=0.0] The value for column 1, row 0.\r\n     * @param {Number} [column2Row0=0.0] The value for column 2, row 0.\r\n     * @param {Number} [column0Row1=0.0] The value for column 0, row 1.\r\n     * @param {Number} [column1Row1=0.0] The value for column 1, row 1.\r\n     * @param {Number} [column2Row1=0.0] The value for column 2, row 1.\r\n     * @param {Number} [column0Row2=0.0] The value for column 0, row 2.\r\n     * @param {Number} [column1Row2=0.0] The value for column 1, row 2.\r\n     * @param {Number} [column2Row2=0.0] The value for column 2, row 2.\r\n     *\r\n     * @see Matrix3.fromColumnMajorArray\r\n     * @see Matrix3.fromRowMajorArray\r\n     * @see Matrix3.fromQuaternion\r\n     * @see Matrix3.fromScale\r\n     * @see Matrix3.fromUniformScale\r\n     * @see Matrix2\r\n     * @see Matrix4\r\n     */\r\n    function Matrix3(column0Row0, column1Row0, column2Row0,\r\n                           column0Row1, column1Row1, column2Row1,\r\n                           column0Row2, column1Row2, column2Row2) {\r\n        this[0] = defaultValue(column0Row0, 0.0);\r\n        this[1] = defaultValue(column0Row1, 0.0);\r\n        this[2] = defaultValue(column0Row2, 0.0);\r\n        this[3] = defaultValue(column1Row0, 0.0);\r\n        this[4] = defaultValue(column1Row1, 0.0);\r\n        this[5] = defaultValue(column1Row2, 0.0);\r\n        this[6] = defaultValue(column2Row0, 0.0);\r\n        this[7] = defaultValue(column2Row1, 0.0);\r\n        this[8] = defaultValue(column2Row2, 0.0);\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Matrix3.packedLength = 9;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Matrix3} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Matrix3.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value[0];\r\n        array[startingIndex++] = value[1];\r\n        array[startingIndex++] = value[2];\r\n        array[startingIndex++] = value[3];\r\n        array[startingIndex++] = value[4];\r\n        array[startingIndex++] = value[5];\r\n        array[startingIndex++] = value[6];\r\n        array[startingIndex++] = value[7];\r\n        array[startingIndex++] = value[8];\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Matrix3} [result] The object into which to store the result.\r\n     * @returns {Matrix3} The modified result parameter or a new Matrix3 instance if one was not provided.\r\n     */\r\n    Matrix3.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Matrix3();\r\n        }\r\n\r\n        result[0] = array[startingIndex++];\r\n        result[1] = array[startingIndex++];\r\n        result[2] = array[startingIndex++];\r\n        result[3] = array[startingIndex++];\r\n        result[4] = array[startingIndex++];\r\n        result[5] = array[startingIndex++];\r\n        result[6] = array[startingIndex++];\r\n        result[7] = array[startingIndex++];\r\n        result[8] = array[startingIndex++];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Matrix3 instance.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to duplicate.\r\n     * @param {Matrix3} [result] The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter or a new Matrix3 instance if one was not provided. (Returns undefined if matrix is undefined)\r\n     */\r\n    Matrix3.clone = function(matrix, result) {\r\n        if (!defined(matrix)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            return new Matrix3(matrix[0], matrix[3], matrix[6],\r\n                               matrix[1], matrix[4], matrix[7],\r\n                               matrix[2], matrix[5], matrix[8]);\r\n        }\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n        result[4] = matrix[4];\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[6];\r\n        result[7] = matrix[7];\r\n        result[8] = matrix[8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix3 from 9 consecutive elements in an array.\r\n     *\r\n     * @param {Number[]} array The array whose 9 consecutive elements correspond to the positions of the matrix.  Assumes column-major order.\r\n     * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to first column first row position in the matrix.\r\n     * @param {Matrix3} [result] The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Create the Matrix3:\r\n     * // [1.0, 2.0, 3.0]\r\n     * // [1.0, 2.0, 3.0]\r\n     * // [1.0, 2.0, 3.0]\r\n     *\r\n     * var v = [1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0];\r\n     * var m = Cesium.Matrix3.fromArray(v);\r\n     *\r\n     * // Create same Matrix3 with using an offset into an array\r\n     * var v2 = [0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0];\r\n     * var m2 = Cesium.Matrix3.fromArray(v2, 2);\r\n     */\r\n    Matrix3.fromArray = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Matrix3();\r\n        }\r\n\r\n        result[0] = array[startingIndex];\r\n        result[1] = array[startingIndex + 1];\r\n        result[2] = array[startingIndex + 2];\r\n        result[3] = array[startingIndex + 3];\r\n        result[4] = array[startingIndex + 4];\r\n        result[5] = array[startingIndex + 5];\r\n        result[6] = array[startingIndex + 6];\r\n        result[7] = array[startingIndex + 7];\r\n        result[8] = array[startingIndex + 8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix3 instance from a column-major order array.\r\n     *\r\n     * @param {Number[]} values The column-major order array.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     */\r\n    Matrix3.fromColumnMajorArray = function(values, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('values', values);\r\n        //>>includeEnd('debug');\r\n\r\n        return Matrix3.clone(values, result);\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix3 instance from a row-major order array.\r\n     * The resulting matrix will be in column-major order.\r\n     *\r\n     * @param {Number[]} values The row-major order array.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     */\r\n    Matrix3.fromRowMajorArray = function(values, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('values', values);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(values[0], values[1], values[2],\r\n                               values[3], values[4], values[5],\r\n                               values[6], values[7], values[8]);\r\n        }\r\n        result[0] = values[0];\r\n        result[1] = values[3];\r\n        result[2] = values[6];\r\n        result[3] = values[1];\r\n        result[4] = values[4];\r\n        result[5] = values[7];\r\n        result[6] = values[2];\r\n        result[7] = values[5];\r\n        result[8] = values[8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a 3x3 rotation matrix from the provided quaternion.\r\n     *\r\n     * @param {Quaternion} quaternion the quaternion to use.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The 3x3 rotation matrix from this quaternion.\r\n     */\r\n    Matrix3.fromQuaternion = function(quaternion, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('quaternion', quaternion);\r\n        //>>includeEnd('debug');\r\n\r\n        var x2 = quaternion.x * quaternion.x;\r\n        var xy = quaternion.x * quaternion.y;\r\n        var xz = quaternion.x * quaternion.z;\r\n        var xw = quaternion.x * quaternion.w;\r\n        var y2 = quaternion.y * quaternion.y;\r\n        var yz = quaternion.y * quaternion.z;\r\n        var yw = quaternion.y * quaternion.w;\r\n        var z2 = quaternion.z * quaternion.z;\r\n        var zw = quaternion.z * quaternion.w;\r\n        var w2 = quaternion.w * quaternion.w;\r\n\r\n        var m00 = x2 - y2 - z2 + w2;\r\n        var m01 = 2.0 * (xy - zw);\r\n        var m02 = 2.0 * (xz + yw);\r\n\r\n        var m10 = 2.0 * (xy + zw);\r\n        var m11 = -x2 + y2 - z2 + w2;\r\n        var m12 = 2.0 * (yz - xw);\r\n\r\n        var m20 = 2.0 * (xz - yw);\r\n        var m21 = 2.0 * (yz + xw);\r\n        var m22 = -x2 - y2 + z2 + w2;\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(m00, m01, m02,\r\n                               m10, m11, m12,\r\n                               m20, m21, m22);\r\n        }\r\n        result[0] = m00;\r\n        result[1] = m10;\r\n        result[2] = m20;\r\n        result[3] = m01;\r\n        result[4] = m11;\r\n        result[5] = m21;\r\n        result[6] = m02;\r\n        result[7] = m12;\r\n        result[8] = m22;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a 3x3 rotation matrix from the provided headingPitchRoll. (see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles )\r\n     *\r\n     * @param {HeadingPitchRoll} headingPitchRoll the headingPitchRoll to use.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The 3x3 rotation matrix from this headingPitchRoll.\r\n     */\r\n    Matrix3.fromHeadingPitchRoll = function(headingPitchRoll, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('headingPitchRoll', headingPitchRoll);\r\n        //>>includeEnd('debug');\r\n\r\n        var cosTheta = Math.cos(-headingPitchRoll.pitch);\r\n        var cosPsi = Math.cos(-headingPitchRoll.heading);\r\n        var cosPhi = Math.cos(headingPitchRoll.roll);\r\n        var sinTheta = Math.sin(-headingPitchRoll.pitch);\r\n        var sinPsi = Math.sin(-headingPitchRoll.heading);\r\n        var sinPhi = Math.sin(headingPitchRoll.roll);\r\n\r\n        var m00 = cosTheta * cosPsi;\r\n        var m01 = -cosPhi * sinPsi + sinPhi * sinTheta * cosPsi;\r\n        var m02 = sinPhi * sinPsi + cosPhi * sinTheta * cosPsi;\r\n\r\n        var m10 = cosTheta * sinPsi;\r\n        var m11 = cosPhi * cosPsi + sinPhi * sinTheta * sinPsi;\r\n        var m12 = -sinPhi * cosPsi + cosPhi * sinTheta * sinPsi;\r\n\r\n        var m20 = -sinTheta;\r\n        var m21 = sinPhi * cosTheta;\r\n        var m22 = cosPhi * cosTheta;\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(m00, m01, m02,\r\n                m10, m11, m12,\r\n                m20, m21, m22);\r\n        }\r\n        result[0] = m00;\r\n        result[1] = m10;\r\n        result[2] = m20;\r\n        result[3] = m01;\r\n        result[4] = m11;\r\n        result[5] = m21;\r\n        result[6] = m02;\r\n        result[7] = m12;\r\n        result[8] = m22;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix3 instance representing a non-uniform scale.\r\n     *\r\n     * @param {Cartesian3} scale The x, y, and z scale factors.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Creates\r\n     * //   [7.0, 0.0, 0.0]\r\n     * //   [0.0, 8.0, 0.0]\r\n     * //   [0.0, 0.0, 9.0]\r\n     * var m = Cesium.Matrix3.fromScale(new Cesium.Cartesian3(7.0, 8.0, 9.0));\r\n     */\r\n    Matrix3.fromScale = function(scale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('scale', scale);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(\r\n                scale.x, 0.0,     0.0,\r\n                0.0,     scale.y, 0.0,\r\n                0.0,     0.0,     scale.z);\r\n        }\r\n\r\n        result[0] = scale.x;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = scale.y;\r\n        result[5] = 0.0;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = scale.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix3 instance representing a uniform scale.\r\n     *\r\n     * @param {Number} scale The uniform scale factor.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Creates\r\n     * //   [2.0, 0.0, 0.0]\r\n     * //   [0.0, 2.0, 0.0]\r\n     * //   [0.0, 0.0, 2.0]\r\n     * var m = Cesium.Matrix3.fromUniformScale(2.0);\r\n     */\r\n    Matrix3.fromUniformScale = function(scale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('scale', scale);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(\r\n                scale, 0.0,   0.0,\r\n                0.0,   scale, 0.0,\r\n                0.0,   0.0,   scale);\r\n        }\r\n\r\n        result[0] = scale;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = scale;\r\n        result[5] = 0.0;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = scale;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix3 instance representing the cross product equivalent matrix of a Cartesian3 vector.\r\n     *\r\n     * @param {Cartesian3} vector the vector on the left hand side of the cross product operation.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Creates\r\n     * //   [0.0, -9.0,  8.0]\r\n     * //   [9.0,  0.0, -7.0]\r\n     * //   [-8.0, 7.0,  0.0]\r\n     * var m = Cesium.Matrix3.fromCrossProduct(new Cesium.Cartesian3(7.0, 8.0, 9.0));\r\n     */\r\n    Matrix3.fromCrossProduct = function(vector, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('vector', vector);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(\r\n                      0.0, -vector.z,  vector.y,\r\n                 vector.z,       0.0, -vector.x,\r\n                -vector.y,  vector.x,       0.0);\r\n        }\r\n\r\n        result[0] = 0.0;\r\n        result[1] = vector.z;\r\n        result[2] = -vector.y;\r\n        result[3] = -vector.z;\r\n        result[4] = 0.0;\r\n        result[5] = vector.x;\r\n        result[6] = vector.y;\r\n        result[7] = -vector.x;\r\n        result[8] = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a rotation matrix around the x-axis.\r\n     *\r\n     * @param {Number} angle The angle, in radians, of the rotation.  Positive angles are counterclockwise.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Rotate a point 45 degrees counterclockwise around the x-axis.\r\n     * var p = new Cesium.Cartesian3(5, 6, 7);\r\n     * var m = Cesium.Matrix3.fromRotationX(Cesium.Math.toRadians(45.0));\r\n     * var rotated = Cesium.Matrix3.multiplyByVector(m, p, new Cesium.Cartesian3());\r\n     */\r\n    Matrix3.fromRotationX = function(angle, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('angle', angle);\r\n        //>>includeEnd('debug');\r\n\r\n        var cosAngle = Math.cos(angle);\r\n        var sinAngle = Math.sin(angle);\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(\r\n                1.0, 0.0, 0.0,\r\n                0.0, cosAngle, -sinAngle,\r\n                0.0, sinAngle, cosAngle);\r\n        }\r\n\r\n        result[0] = 1.0;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = cosAngle;\r\n        result[5] = sinAngle;\r\n        result[6] = 0.0;\r\n        result[7] = -sinAngle;\r\n        result[8] = cosAngle;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a rotation matrix around the y-axis.\r\n     *\r\n     * @param {Number} angle The angle, in radians, of the rotation.  Positive angles are counterclockwise.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Rotate a point 45 degrees counterclockwise around the y-axis.\r\n     * var p = new Cesium.Cartesian3(5, 6, 7);\r\n     * var m = Cesium.Matrix3.fromRotationY(Cesium.Math.toRadians(45.0));\r\n     * var rotated = Cesium.Matrix3.multiplyByVector(m, p, new Cesium.Cartesian3());\r\n     */\r\n    Matrix3.fromRotationY = function(angle, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('angle', angle);\r\n        //>>includeEnd('debug');\r\n\r\n        var cosAngle = Math.cos(angle);\r\n        var sinAngle = Math.sin(angle);\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(\r\n                cosAngle, 0.0, sinAngle,\r\n                0.0, 1.0, 0.0,\r\n                -sinAngle, 0.0, cosAngle);\r\n        }\r\n\r\n        result[0] = cosAngle;\r\n        result[1] = 0.0;\r\n        result[2] = -sinAngle;\r\n        result[3] = 0.0;\r\n        result[4] = 1.0;\r\n        result[5] = 0.0;\r\n        result[6] = sinAngle;\r\n        result[7] = 0.0;\r\n        result[8] = cosAngle;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a rotation matrix around the z-axis.\r\n     *\r\n     * @param {Number} angle The angle, in radians, of the rotation.  Positive angles are counterclockwise.\r\n     * @param {Matrix3} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix3} The modified result parameter, or a new Matrix3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Rotate a point 45 degrees counterclockwise around the z-axis.\r\n     * var p = new Cesium.Cartesian3(5, 6, 7);\r\n     * var m = Cesium.Matrix3.fromRotationZ(Cesium.Math.toRadians(45.0));\r\n     * var rotated = Cesium.Matrix3.multiplyByVector(m, p, new Cesium.Cartesian3());\r\n     */\r\n    Matrix3.fromRotationZ = function(angle, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('angle', angle);\r\n        //>>includeEnd('debug');\r\n\r\n        var cosAngle = Math.cos(angle);\r\n        var sinAngle = Math.sin(angle);\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix3(\r\n                cosAngle, -sinAngle, 0.0,\r\n                sinAngle, cosAngle, 0.0,\r\n                0.0, 0.0, 1.0);\r\n        }\r\n\r\n        result[0] = cosAngle;\r\n        result[1] = sinAngle;\r\n        result[2] = 0.0;\r\n        result[3] = -sinAngle;\r\n        result[4] = cosAngle;\r\n        result[5] = 0.0;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 1.0;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates an Array from the provided Matrix3 instance.\r\n     * The array will be in column-major order.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to use..\r\n     * @param {Number[]} [result] The Array onto which to store the result.\r\n     * @returns {Number[]} The modified Array parameter or a new Array instance if one was not provided.\r\n     */\r\n    Matrix3.toArray = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return [matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5], matrix[6], matrix[7], matrix[8]];\r\n        }\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n        result[4] = matrix[4];\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[6];\r\n        result[7] = matrix[7];\r\n        result[8] = matrix[8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the array index of the element at the provided row and column.\r\n     *\r\n     * @param {Number} row The zero-based index of the row.\r\n     * @param {Number} column The zero-based index of the column.\r\n     * @returns {Number} The index of the element at the provided row and column.\r\n     *\r\n     * @exception {DeveloperError} row must be 0, 1, or 2.\r\n     * @exception {DeveloperError} column must be 0, 1, or 2.\r\n     *\r\n     * @example\r\n     * var myMatrix = new Cesium.Matrix3();\r\n     * var column1Row0Index = Cesium.Matrix3.getElementIndex(1, 0);\r\n     * var column1Row0 = myMatrix[column1Row0Index]\r\n     * myMatrix[column1Row0Index] = 10.0;\r\n     */\r\n    Matrix3.getElementIndex = function(column, row) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number.greaterThanOrEquals('row', row, 0);\r\n        Check.typeOf.number.lessThanOrEquals('row', row, 2);\r\n        Check.typeOf.number.greaterThanOrEquals('column', column, 0);\r\n        Check.typeOf.number.lessThanOrEquals('column', column, 2);\r\n        //>>includeEnd('debug');\r\n\r\n        return column * 3 + row;\r\n    };\r\n\r\n    /**\r\n     * Retrieves a copy of the matrix column at the provided index as a Cartesian3 instance.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the column to retrieve.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, or 2.\r\n     */\r\n    Matrix3.getColumn = function(matrix, index, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.number.greaterThanOrEquals('index', index, 0);\r\n        Check.typeOf.number.lessThanOrEquals('index', index, 2);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var startIndex = index * 3;\r\n        var x = matrix[startIndex];\r\n        var y = matrix[startIndex + 1];\r\n        var z = matrix[startIndex + 2];\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a new matrix that replaces the specified column in the provided matrix with the provided Cartesian3 instance.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the column to set.\r\n     * @param {Cartesian3} cartesian The Cartesian whose values will be assigned to the specified column.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, or 2.\r\n     */\r\n    Matrix3.setColumn = function(matrix, index, cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.number.greaterThanOrEquals('index', index, 0);\r\n        Check.typeOf.number.lessThanOrEquals('index', index, 2);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result = Matrix3.clone(matrix, result);\r\n        var startIndex = index * 3;\r\n        result[startIndex] = cartesian.x;\r\n        result[startIndex + 1] = cartesian.y;\r\n        result[startIndex + 2] = cartesian.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Retrieves a copy of the matrix row at the provided index as a Cartesian3 instance.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the row to retrieve.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, or 2.\r\n     */\r\n    Matrix3.getRow = function(matrix, index, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.number.greaterThanOrEquals('index', index, 0);\r\n        Check.typeOf.number.lessThanOrEquals('index', index, 2);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var x = matrix[index];\r\n        var y = matrix[index + 3];\r\n        var z = matrix[index + 6];\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a new matrix that replaces the specified row in the provided matrix with the provided Cartesian3 instance.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the row to set.\r\n     * @param {Cartesian3} cartesian The Cartesian whose values will be assigned to the specified row.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, or 2.\r\n     */\r\n    Matrix3.setRow = function(matrix, index, cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.number.greaterThanOrEquals('index', index, 0);\r\n        Check.typeOf.number.lessThanOrEquals('index', index, 2);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result = Matrix3.clone(matrix, result);\r\n        result[index] = cartesian.x;\r\n        result[index + 3] = cartesian.y;\r\n        result[index + 6] = cartesian.z;\r\n        return result;\r\n    };\r\n\r\n    var scratchColumn = new Cartesian3();\r\n\r\n    /**\r\n     * Extracts the non-uniform scale assuming the matrix is an affine transformation.\r\n     *\r\n     * @param {Matrix3} matrix The matrix.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Matrix3.getScale = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = Cartesian3.magnitude(Cartesian3.fromElements(matrix[0], matrix[1], matrix[2], scratchColumn));\r\n        result.y = Cartesian3.magnitude(Cartesian3.fromElements(matrix[3], matrix[4], matrix[5], scratchColumn));\r\n        result.z = Cartesian3.magnitude(Cartesian3.fromElements(matrix[6], matrix[7], matrix[8], scratchColumn));\r\n        return result;\r\n    };\r\n\r\n    var scratchScale = new Cartesian3();\r\n\r\n    /**\r\n     * Computes the maximum scale assuming the matrix is an affine transformation.\r\n     * The maximum scale is the maximum length of the column vectors.\r\n     *\r\n     * @param {Matrix3} matrix The matrix.\r\n     * @returns {Number} The maximum scale.\r\n     */\r\n    Matrix3.getMaximumScale = function(matrix) {\r\n        Matrix3.getScale(matrix, scratchScale);\r\n        return Cartesian3.maximumComponent(scratchScale);\r\n    };\r\n\r\n    /**\r\n     * Computes the product of two matrices.\r\n     *\r\n     * @param {Matrix3} left The first matrix.\r\n     * @param {Matrix3} right The second matrix.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.multiply = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var column0Row0 = left[0] * right[0] + left[3] * right[1] + left[6] * right[2];\r\n        var column0Row1 = left[1] * right[0] + left[4] * right[1] + left[7] * right[2];\r\n        var column0Row2 = left[2] * right[0] + left[5] * right[1] + left[8] * right[2];\r\n\r\n        var column1Row0 = left[0] * right[3] + left[3] * right[4] + left[6] * right[5];\r\n        var column1Row1 = left[1] * right[3] + left[4] * right[4] + left[7] * right[5];\r\n        var column1Row2 = left[2] * right[3] + left[5] * right[4] + left[8] * right[5];\r\n\r\n        var column2Row0 = left[0] * right[6] + left[3] * right[7] + left[6] * right[8];\r\n        var column2Row1 = left[1] * right[6] + left[4] * right[7] + left[7] * right[8];\r\n        var column2Row2 = left[2] * right[6] + left[5] * right[7] + left[8] * right[8];\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = column0Row1;\r\n        result[2] = column0Row2;\r\n        result[3] = column1Row0;\r\n        result[4] = column1Row1;\r\n        result[5] = column1Row2;\r\n        result[6] = column2Row0;\r\n        result[7] = column2Row1;\r\n        result[8] = column2Row2;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the sum of two matrices.\r\n     *\r\n     * @param {Matrix3} left The first matrix.\r\n     * @param {Matrix3} right The second matrix.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.add = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = left[0] + right[0];\r\n        result[1] = left[1] + right[1];\r\n        result[2] = left[2] + right[2];\r\n        result[3] = left[3] + right[3];\r\n        result[4] = left[4] + right[4];\r\n        result[5] = left[5] + right[5];\r\n        result[6] = left[6] + right[6];\r\n        result[7] = left[7] + right[7];\r\n        result[8] = left[8] + right[8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the difference of two matrices.\r\n     *\r\n     * @param {Matrix3} left The first matrix.\r\n     * @param {Matrix3} right The second matrix.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.subtract = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = left[0] - right[0];\r\n        result[1] = left[1] - right[1];\r\n        result[2] = left[2] - right[2];\r\n        result[3] = left[3] - right[3];\r\n        result[4] = left[4] - right[4];\r\n        result[5] = left[5] - right[5];\r\n        result[6] = left[6] - right[6];\r\n        result[7] = left[7] - right[7];\r\n        result[8] = left[8] - right[8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a column vector.\r\n     *\r\n     * @param {Matrix3} matrix The matrix.\r\n     * @param {Cartesian3} cartesian The column.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Matrix3.multiplyByVector = function(matrix, cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var vX = cartesian.x;\r\n        var vY = cartesian.y;\r\n        var vZ = cartesian.z;\r\n\r\n        var x = matrix[0] * vX + matrix[3] * vY + matrix[6] * vZ;\r\n        var y = matrix[1] * vX + matrix[4] * vY + matrix[7] * vZ;\r\n        var z = matrix[2] * vX + matrix[5] * vY + matrix[8] * vZ;\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a scalar.\r\n     *\r\n     * @param {Matrix3} matrix The matrix.\r\n     * @param {Number} scalar The number to multiply by.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.multiplyByScalar = function(matrix, scalar, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.number('scalar', scalar);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = matrix[0] * scalar;\r\n        result[1] = matrix[1] * scalar;\r\n        result[2] = matrix[2] * scalar;\r\n        result[3] = matrix[3] * scalar;\r\n        result[4] = matrix[4] * scalar;\r\n        result[5] = matrix[5] * scalar;\r\n        result[6] = matrix[6] * scalar;\r\n        result[7] = matrix[7] * scalar;\r\n        result[8] = matrix[8] * scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix times a (non-uniform) scale, as if the scale were a scale matrix.\r\n     *\r\n     * @param {Matrix3} matrix The matrix on the left-hand side.\r\n     * @param {Cartesian3} scale The non-uniform scale on the right-hand side.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     *\r\n     *\r\n     * @example\r\n     * // Instead of Cesium.Matrix3.multiply(m, Cesium.Matrix3.fromScale(scale), m);\r\n     * Cesium.Matrix3.multiplyByScale(m, scale, m);\r\n     *\r\n     * @see Matrix3.fromScale\r\n     * @see Matrix3.multiplyByUniformScale\r\n     */\r\n    Matrix3.multiplyByScale = function(matrix, scale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('scale', scale);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = matrix[0] * scale.x;\r\n        result[1] = matrix[1] * scale.x;\r\n        result[2] = matrix[2] * scale.x;\r\n        result[3] = matrix[3] * scale.y;\r\n        result[4] = matrix[4] * scale.y;\r\n        result[5] = matrix[5] * scale.y;\r\n        result[6] = matrix[6] * scale.z;\r\n        result[7] = matrix[7] * scale.z;\r\n        result[8] = matrix[8] * scale.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a negated copy of the provided matrix.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to negate.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.negate = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = -matrix[0];\r\n        result[1] = -matrix[1];\r\n        result[2] = -matrix[2];\r\n        result[3] = -matrix[3];\r\n        result[4] = -matrix[4];\r\n        result[5] = -matrix[5];\r\n        result[6] = -matrix[6];\r\n        result[7] = -matrix[7];\r\n        result[8] = -matrix[8];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the transpose of the provided matrix.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to transpose.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.transpose = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var column0Row0 = matrix[0];\r\n        var column0Row1 = matrix[3];\r\n        var column0Row2 = matrix[6];\r\n        var column1Row0 = matrix[1];\r\n        var column1Row1 = matrix[4];\r\n        var column1Row2 = matrix[7];\r\n        var column2Row0 = matrix[2];\r\n        var column2Row1 = matrix[5];\r\n        var column2Row2 = matrix[8];\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = column0Row1;\r\n        result[2] = column0Row2;\r\n        result[3] = column1Row0;\r\n        result[4] = column1Row1;\r\n        result[5] = column1Row2;\r\n        result[6] = column2Row0;\r\n        result[7] = column2Row1;\r\n        result[8] = column2Row2;\r\n        return result;\r\n    };\r\n\r\n    var UNIT = new Cartesian3(1, 1, 1);\r\n\r\n    /**\r\n     * Extracts the rotation assuming the matrix is an affine transformation.\r\n     *\r\n     * @param {Matrix3} matrix The matrix.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter\r\n     */\r\n    Matrix3.getRotation = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var inverseScale = Cartesian3.divideComponents(UNIT, Matrix3.getScale(matrix, scratchScale), scratchScale);\r\n        result = Matrix3.multiplyByScale(matrix, inverseScale, result);\r\n\r\n        return result;\r\n    };\r\n\r\n    function computeFrobeniusNorm(matrix) {\r\n        var norm = 0.0;\r\n        for (var i = 0; i < 9; ++i) {\r\n            var temp = matrix[i];\r\n            norm += temp * temp;\r\n        }\r\n\r\n        return Math.sqrt(norm);\r\n    }\r\n\r\n    var rowVal = [1, 0, 0];\r\n    var colVal = [2, 2, 1];\r\n\r\n    function offDiagonalFrobeniusNorm(matrix) {\r\n        // Computes the \"off-diagonal\" Frobenius norm.\r\n        // Assumes matrix is symmetric.\r\n\r\n        var norm = 0.0;\r\n        for (var i = 0; i < 3; ++i) {\r\n            var temp = matrix[Matrix3.getElementIndex(colVal[i], rowVal[i])];\r\n            norm += 2.0 * temp * temp;\r\n        }\r\n\r\n        return Math.sqrt(norm);\r\n    }\r\n\r\n    function shurDecomposition(matrix, result) {\r\n        // This routine was created based upon Matrix Computations, 3rd ed., by Golub and Van Loan,\r\n        // section 8.4.2 The 2by2 Symmetric Schur Decomposition.\r\n        //\r\n        // The routine takes a matrix, which is assumed to be symmetric, and\r\n        // finds the largest off-diagonal term, and then creates\r\n        // a matrix (result) which can be used to help reduce it\r\n\r\n        var tolerance = CesiumMath.EPSILON15;\r\n\r\n        var maxDiagonal = 0.0;\r\n        var rotAxis = 1;\r\n\r\n        // find pivot (rotAxis) based on max diagonal of matrix\r\n        for (var i = 0; i < 3; ++i) {\r\n            var temp = Math.abs(matrix[Matrix3.getElementIndex(colVal[i], rowVal[i])]);\r\n            if (temp > maxDiagonal) {\r\n                rotAxis = i;\r\n                maxDiagonal = temp;\r\n            }\r\n        }\r\n\r\n        var c = 1.0;\r\n        var s = 0.0;\r\n\r\n        var p = rowVal[rotAxis];\r\n        var q = colVal[rotAxis];\r\n\r\n        if (Math.abs(matrix[Matrix3.getElementIndex(q, p)]) > tolerance) {\r\n            var qq = matrix[Matrix3.getElementIndex(q, q)];\r\n            var pp = matrix[Matrix3.getElementIndex(p, p)];\r\n            var qp = matrix[Matrix3.getElementIndex(q, p)];\r\n\r\n            var tau = (qq - pp) / 2.0 / qp;\r\n            var t;\r\n\r\n            if (tau < 0.0) {\r\n                t = -1.0 / (-tau + Math.sqrt(1.0 + tau * tau));\r\n            } else {\r\n                t = 1.0 / (tau + Math.sqrt(1.0 + tau * tau));\r\n            }\r\n\r\n            c = 1.0 / Math.sqrt(1.0 + t * t);\r\n            s = t * c;\r\n        }\r\n\r\n        result = Matrix3.clone(Matrix3.IDENTITY, result);\r\n\r\n        result[Matrix3.getElementIndex(p, p)] = result[Matrix3.getElementIndex(q, q)] = c;\r\n        result[Matrix3.getElementIndex(q, p)] = s;\r\n        result[Matrix3.getElementIndex(p, q)] = -s;\r\n\r\n        return result;\r\n    }\r\n\r\n    var jMatrix = new Matrix3();\r\n    var jMatrixTranspose = new Matrix3();\r\n\r\n    /**\r\n     * Computes the eigenvectors and eigenvalues of a symmetric matrix.\r\n     * <p>\r\n     * Returns a diagonal matrix and unitary matrix such that:\r\n     * <code>matrix = unitary matrix * diagonal matrix * transpose(unitary matrix)</code>\r\n     * </p>\r\n     * <p>\r\n     * The values along the diagonal of the diagonal matrix are the eigenvalues. The columns\r\n     * of the unitary matrix are the corresponding eigenvectors.\r\n     * </p>\r\n     *\r\n     * @param {Matrix3} matrix The matrix to decompose into diagonal and unitary matrix. Expected to be symmetric.\r\n     * @param {Object} [result] An object with unitary and diagonal properties which are matrices onto which to store the result.\r\n     * @returns {Object} An object with unitary and diagonal properties which are the unitary and diagonal matrices, respectively.\r\n     *\r\n     * @example\r\n     * var a = //... symetric matrix\r\n     * var result = {\r\n     *     unitary : new Cesium.Matrix3(),\r\n     *     diagonal : new Cesium.Matrix3()\r\n     * };\r\n     * Cesium.Matrix3.computeEigenDecomposition(a, result);\r\n     *\r\n     * var unitaryTranspose = Cesium.Matrix3.transpose(result.unitary, new Cesium.Matrix3());\r\n     * var b = Cesium.Matrix3.multiply(result.unitary, result.diagonal, new Cesium.Matrix3());\r\n     * Cesium.Matrix3.multiply(b, unitaryTranspose, b); // b is now equal to a\r\n     *\r\n     * var lambda = Cesium.Matrix3.getColumn(result.diagonal, 0, new Cesium.Cartesian3()).x;  // first eigenvalue\r\n     * var v = Cesium.Matrix3.getColumn(result.unitary, 0, new Cesium.Cartesian3());          // first eigenvector\r\n     * var c = Cesium.Cartesian3.multiplyByScalar(v, lambda, new Cesium.Cartesian3());        // equal to Cesium.Matrix3.multiplyByVector(a, v)\r\n     */\r\n    Matrix3.computeEigenDecomposition = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        //>>includeEnd('debug');\r\n\r\n        // This routine was created based upon Matrix Computations, 3rd ed., by Golub and Van Loan,\r\n        // section 8.4.3 The Classical Jacobi Algorithm\r\n\r\n        var tolerance = CesiumMath.EPSILON20;\r\n        var maxSweeps = 10;\r\n\r\n        var count = 0;\r\n        var sweep = 0;\r\n\r\n        if (!defined(result)) {\r\n            result = {};\r\n        }\r\n\r\n        var unitaryMatrix = result.unitary = Matrix3.clone(Matrix3.IDENTITY, result.unitary);\r\n        var diagMatrix = result.diagonal = Matrix3.clone(matrix, result.diagonal);\r\n\r\n        var epsilon = tolerance * computeFrobeniusNorm(diagMatrix);\r\n\r\n        while (sweep < maxSweeps && offDiagonalFrobeniusNorm(diagMatrix) > epsilon) {\r\n            shurDecomposition(diagMatrix, jMatrix);\r\n            Matrix3.transpose(jMatrix, jMatrixTranspose);\r\n            Matrix3.multiply(diagMatrix, jMatrix, diagMatrix);\r\n            Matrix3.multiply(jMatrixTranspose, diagMatrix, diagMatrix);\r\n            Matrix3.multiply(unitaryMatrix, jMatrix, unitaryMatrix);\r\n\r\n            if (++count > 2) {\r\n                ++sweep;\r\n                count = 0;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a matrix, which contains the absolute (unsigned) values of the provided matrix's elements.\r\n     *\r\n     * @param {Matrix3} matrix The matrix with signed elements.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     */\r\n    Matrix3.abs = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = Math.abs(matrix[0]);\r\n        result[1] = Math.abs(matrix[1]);\r\n        result[2] = Math.abs(matrix[2]);\r\n        result[3] = Math.abs(matrix[3]);\r\n        result[4] = Math.abs(matrix[4]);\r\n        result[5] = Math.abs(matrix[5]);\r\n        result[6] = Math.abs(matrix[6]);\r\n        result[7] = Math.abs(matrix[7]);\r\n        result[8] = Math.abs(matrix[8]);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the determinant of the provided matrix.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to use.\r\n     * @returns {Number} The value of the determinant of the matrix.\r\n     */\r\n    Matrix3.determinant = function(matrix) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        //>>includeEnd('debug');\r\n\r\n        var m11 = matrix[0];\r\n        var m21 = matrix[3];\r\n        var m31 = matrix[6];\r\n        var m12 = matrix[1];\r\n        var m22 = matrix[4];\r\n        var m32 = matrix[7];\r\n        var m13 = matrix[2];\r\n        var m23 = matrix[5];\r\n        var m33 = matrix[8];\r\n\r\n        return m11 * (m22 * m33 - m23 * m32) + m12 * (m23 * m31 - m21 * m33) + m13 * (m21 * m32 - m22 * m31);\r\n    };\r\n\r\n    /**\r\n     * Computes the inverse of the provided matrix.\r\n     *\r\n     * @param {Matrix3} matrix The matrix to invert.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} matrix is not invertible.\r\n     */\r\n    Matrix3.inverse = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var m11 = matrix[0];\r\n        var m21 = matrix[1];\r\n        var m31 = matrix[2];\r\n        var m12 = matrix[3];\r\n        var m22 = matrix[4];\r\n        var m32 = matrix[5];\r\n        var m13 = matrix[6];\r\n        var m23 = matrix[7];\r\n        var m33 = matrix[8];\r\n\r\n        var determinant = Matrix3.determinant(matrix);\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (Math.abs(determinant) <= CesiumMath.EPSILON15) {\r\n            throw new DeveloperError('matrix is not invertible');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = m22 * m33 - m23 * m32;\r\n        result[1] = m23 * m31 - m21 * m33;\r\n        result[2] = m21 * m32 - m22 * m31;\r\n        result[3] = m13 * m32 - m12 * m33;\r\n        result[4] = m11 * m33 - m13 * m31;\r\n        result[5] = m12 * m31 - m11 * m32;\r\n        result[6] = m12 * m23 - m13 * m22;\r\n        result[7] = m13 * m21 - m11 * m23;\r\n        result[8] = m11 * m22 - m12 * m21;\r\n\r\n       var scale = 1.0 / determinant;\r\n       return Matrix3.multiplyByScalar(result, scale, result);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided matrices componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix3} [left] The first matrix.\r\n     * @param {Matrix3} [right] The second matrix.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Matrix3.equals = function(left, right) {\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                left[0] === right[0] &&\r\n                left[1] === right[1] &&\r\n                left[2] === right[2] &&\r\n                left[3] === right[3] &&\r\n                left[4] === right[4] &&\r\n                left[5] === right[5] &&\r\n                left[6] === right[6] &&\r\n                left[7] === right[7] &&\r\n                left[8] === right[8]);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided matrices componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix3} [left] The first matrix.\r\n     * @param {Matrix3} [right] The second matrix.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Matrix3.equalsEpsilon = function(left, right, epsilon) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('epsilon', epsilon);\r\n        //>>includeEnd('debug');\r\n\r\n        return (left === right) ||\r\n                (defined(left) &&\r\n                defined(right) &&\r\n                Math.abs(left[0] - right[0]) <= epsilon &&\r\n                Math.abs(left[1] - right[1]) <= epsilon &&\r\n                Math.abs(left[2] - right[2]) <= epsilon &&\r\n                Math.abs(left[3] - right[3]) <= epsilon &&\r\n                Math.abs(left[4] - right[4]) <= epsilon &&\r\n                Math.abs(left[5] - right[5]) <= epsilon &&\r\n                Math.abs(left[6] - right[6]) <= epsilon &&\r\n                Math.abs(left[7] - right[7]) <= epsilon &&\r\n                Math.abs(left[8] - right[8]) <= epsilon);\r\n    };\r\n\r\n    /**\r\n     * An immutable Matrix3 instance initialized to the identity matrix.\r\n     *\r\n     * @type {Matrix3}\r\n     * @constant\r\n     */\r\n    Matrix3.IDENTITY = Object.freeze(new Matrix3(1.0, 0.0, 0.0,\r\n                                                0.0, 1.0, 0.0,\r\n                                                0.0, 0.0, 1.0));\r\n\r\n    /**\r\n     * An immutable Matrix3 instance initialized to the zero matrix.\r\n     *\r\n     * @type {Matrix3}\r\n     * @constant\r\n     */\r\n    Matrix3.ZERO = Object.freeze(new Matrix3(0.0, 0.0, 0.0,\r\n                                            0.0, 0.0, 0.0,\r\n                                            0.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * The index into Matrix3 for column 0, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN0ROW0 = 0;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 0, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN0ROW1 = 1;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 0, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN0ROW2 = 2;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 1, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN1ROW0 = 3;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 1, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN1ROW1 = 4;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 1, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN1ROW2 = 5;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 2, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN2ROW0 = 6;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 2, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN2ROW1 = 7;\r\n\r\n    /**\r\n     * The index into Matrix3 for column 2, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix3.COLUMN2ROW2 = 8;\r\n\r\n    Object.defineProperties(Matrix3.prototype, {\r\n        /**\r\n         * Gets the number of items in the collection.\r\n         * @memberof Matrix3.prototype\r\n         *\r\n         * @type {Number}\r\n         */\r\n        length : {\r\n            get : function() {\r\n                return Matrix3.packedLength;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Duplicates the provided Matrix3 instance.\r\n     *\r\n     * @param {Matrix3} [result] The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter or a new Matrix3 instance if one was not provided.\r\n     */\r\n    Matrix3.prototype.clone = function(result) {\r\n        return Matrix3.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this matrix to the provided matrix componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix3} [right] The right hand side matrix.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    Matrix3.prototype.equals = function(right) {\r\n        return Matrix3.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Matrix3.equalsArray = function(matrix, array, offset) {\r\n        return matrix[0] === array[offset] &&\r\n               matrix[1] === array[offset + 1] &&\r\n               matrix[2] === array[offset + 2] &&\r\n               matrix[3] === array[offset + 3] &&\r\n               matrix[4] === array[offset + 4] &&\r\n               matrix[5] === array[offset + 5] &&\r\n               matrix[6] === array[offset + 6] &&\r\n               matrix[7] === array[offset + 7] &&\r\n               matrix[8] === array[offset + 8];\r\n    };\r\n\r\n    /**\r\n     * Compares this matrix to the provided matrix componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix3} [right] The right hand side matrix.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Matrix3.prototype.equalsEpsilon = function(right, epsilon) {\r\n        return Matrix3.equalsEpsilon(this, right, epsilon);\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this Matrix with each row being\r\n     * on a separate line and in the format '(column0, column1, column2)'.\r\n     *\r\n     * @returns {String} A string representing the provided Matrix with each row being on a separate line and in the format '(column0, column1, column2)'.\r\n     */\r\n    Matrix3.prototype.toString = function() {\r\n        return '(' + this[0] + ', ' + this[3] + ', ' + this[6] + ')\\n' +\r\n               '(' + this[1] + ', ' + this[4] + ', ' + this[7] + ')\\n' +\r\n               '(' + this[2] + ', ' + this[5] + ', ' + this[8] + ')';\r\n    };\r\nexport default Matrix3;\r\n","import Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\n\r\n    /**\r\n     * A 4D Cartesian point.\r\n     * @alias Cartesian4\r\n     * @constructor\r\n     *\r\n     * @param {Number} [x=0.0] The X component.\r\n     * @param {Number} [y=0.0] The Y component.\r\n     * @param {Number} [z=0.0] The Z component.\r\n     * @param {Number} [w=0.0] The W component.\r\n     *\r\n     * @see Cartesian2\r\n     * @see Cartesian3\r\n     * @see Packable\r\n     */\r\n    function Cartesian4(x, y, z, w) {\r\n        /**\r\n         * The X component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.x = defaultValue(x, 0.0);\r\n\r\n        /**\r\n         * The Y component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.y = defaultValue(y, 0.0);\r\n\r\n        /**\r\n         * The Z component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.z = defaultValue(z, 0.0);\r\n\r\n        /**\r\n         * The W component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.w = defaultValue(w, 0.0);\r\n    }\r\n\r\n    /**\r\n     * Creates a Cartesian4 instance from x, y, z and w coordinates.\r\n     *\r\n     * @param {Number} x The x coordinate.\r\n     * @param {Number} y The y coordinate.\r\n     * @param {Number} z The z coordinate.\r\n     * @param {Number} w The w coordinate.\r\n     * @param {Cartesian4} [result] The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided.\r\n     */\r\n    Cartesian4.fromElements = function(x, y, z, w, result) {\r\n        if (!defined(result)) {\r\n            return new Cartesian4(x, y, z, w);\r\n        }\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        result.w = w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Cartesian4 instance from a {@link Color}. <code>red</code>, <code>green</code>, <code>blue</code>,\r\n     * and <code>alpha</code> map to <code>x</code>, <code>y</code>, <code>z</code>, and <code>w</code>, respectively.\r\n     *\r\n     * @param {Color} color The source color.\r\n     * @param {Cartesian4} [result] The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided.\r\n     */\r\n    Cartesian4.fromColor = function(color, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('color', color);\r\n        //>>includeEnd('debug');\r\n        if (!defined(result)) {\r\n            return new Cartesian4(color.red, color.green, color.blue, color.alpha);\r\n        }\r\n\r\n        result.x = color.red;\r\n        result.y = color.green;\r\n        result.z = color.blue;\r\n        result.w = color.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Cartesian4 instance.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian to duplicate.\r\n     * @param {Cartesian4} [result] The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided. (Returns undefined if cartesian is undefined)\r\n     */\r\n    Cartesian4.clone = function(cartesian, result) {\r\n        if (!defined(cartesian)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Cartesian4(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\r\n        }\r\n\r\n        result.x = cartesian.x;\r\n        result.y = cartesian.y;\r\n        result.z = cartesian.z;\r\n        result.w = cartesian.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Cartesian4.packedLength = 4;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Cartesian4} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Cartesian4.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value.x;\r\n        array[startingIndex++] = value.y;\r\n        array[startingIndex++] = value.z;\r\n        array[startingIndex] = value.w;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Cartesian4} [result] The object into which to store the result.\r\n     * @returns {Cartesian4}  The modified result parameter or a new Cartesian4 instance if one was not provided.\r\n     */\r\n    Cartesian4.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian4();\r\n        }\r\n        result.x = array[startingIndex++];\r\n        result.y = array[startingIndex++];\r\n        result.z = array[startingIndex++];\r\n        result.w = array[startingIndex];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Flattens an array of Cartesian4s into and array of components.\r\n     *\r\n     * @param {Cartesian4[]} array The array of cartesians to pack.\r\n     * @param {Number[]} [result] The array onto which to store the result. If this is a typed array, it must have array.length * 4 components, else a {@link DeveloperError} will be thrown. If it is a regular array, it will be resized to have (array.length * 4) elements.\r\n\r\n     * @returns {Number[]} The packed array.\r\n     */\r\n    Cartesian4.packArray = function(array, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        var length = array.length;\r\n        var resultLength = length * 4;\r\n        if (!defined(result)) {\r\n            result = new Array(resultLength);\r\n        } else if (!Array.isArray(result) && result.length !== resultLength) {\r\n            throw new DeveloperError('If result is a typed array, it must have exactly array.length * 4 elements');\r\n        } else if (result.length !== resultLength) {\r\n            result.length = resultLength;\r\n        }\r\n\r\n        for (var i = 0; i < length; ++i) {\r\n            Cartesian4.pack(array[i], result, i * 4);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Unpacks an array of cartesian components into and array of Cartesian4s.\r\n     *\r\n     * @param {Number[]} array The array of components to unpack.\r\n     * @param {Cartesian4[]} [result] The array onto which to store the result.\r\n     * @returns {Cartesian4[]} The unpacked array.\r\n     */\r\n    Cartesian4.unpackArray = function(array, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        Check.typeOf.number.greaterThanOrEquals('array.length', array.length, 4);\r\n        if (array.length % 4 !== 0) {\r\n            throw new DeveloperError('array length must be a multiple of 4.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var length = array.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length / 4);\r\n        } else {\r\n            result.length = length / 4;\r\n        }\r\n\r\n        for (var i = 0; i < length; i += 4) {\r\n            var index = i / 4;\r\n            result[index] = Cartesian4.unpack(array, i, result[index]);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Cartesian4 from four consecutive elements in an array.\r\n     * @function\r\n     *\r\n     * @param {Number[]} array The array whose four consecutive elements correspond to the x, y, z, and w components, respectively.\r\n     * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to the x component.\r\n     * @param {Cartesian4} [result] The object onto which to store the result.\r\n     * @returns {Cartesian4}  The modified result parameter or a new Cartesian4 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Create a Cartesian4 with (1.0, 2.0, 3.0, 4.0)\r\n     * var v = [1.0, 2.0, 3.0, 4.0];\r\n     * var p = Cesium.Cartesian4.fromArray(v);\r\n     *\r\n     * // Create a Cartesian4 with (1.0, 2.0, 3.0, 4.0) using an offset into an array\r\n     * var v2 = [0.0, 0.0, 1.0, 2.0, 3.0, 4.0];\r\n     * var p2 = Cesium.Cartesian4.fromArray(v2, 2);\r\n     */\r\n    Cartesian4.fromArray = Cartesian4.unpack;\r\n\r\n    /**\r\n     * Computes the value of the maximum component for the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian4} cartesian The cartesian to use.\r\n     * @returns {Number} The value of the maximum component.\r\n     */\r\n    Cartesian4.maximumComponent = function(cartesian) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        //>>includeEnd('debug');\r\n\r\n        return Math.max(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\r\n    };\r\n\r\n    /**\r\n     * Computes the value of the minimum component for the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian4} cartesian The cartesian to use.\r\n     * @returns {Number} The value of the minimum component.\r\n     */\r\n    Cartesian4.minimumComponent = function(cartesian) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        //>>includeEnd('debug');\r\n\r\n        return Math.min(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\r\n    };\r\n\r\n    /**\r\n     * Compares two Cartesians and computes a Cartesian which contains the minimum components of the supplied Cartesians.\r\n     *\r\n     * @param {Cartesian4} first A cartesian to compare.\r\n     * @param {Cartesian4} second A cartesian to compare.\r\n     * @param {Cartesian4} result The object into which to store the result.\r\n     * @returns {Cartesian4} A cartesian with the minimum components.\r\n     */\r\n    Cartesian4.minimumByComponent = function(first, second, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('first', first);\r\n        Check.typeOf.object('second', second);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = Math.min(first.x, second.x);\r\n        result.y = Math.min(first.y, second.y);\r\n        result.z = Math.min(first.z, second.z);\r\n        result.w = Math.min(first.w, second.w);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares two Cartesians and computes a Cartesian which contains the maximum components of the supplied Cartesians.\r\n     *\r\n     * @param {Cartesian4} first A cartesian to compare.\r\n     * @param {Cartesian4} second A cartesian to compare.\r\n     * @param {Cartesian4} result The object into which to store the result.\r\n     * @returns {Cartesian4} A cartesian with the maximum components.\r\n     */\r\n    Cartesian4.maximumByComponent = function(first, second, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('first', first);\r\n        Check.typeOf.object('second', second);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = Math.max(first.x, second.x);\r\n        result.y = Math.max(first.y, second.y);\r\n        result.z = Math.max(first.z, second.z);\r\n        result.w = Math.max(first.w, second.w);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the provided Cartesian's squared magnitude.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian instance whose squared magnitude is to be computed.\r\n     * @returns {Number} The squared magnitude.\r\n     */\r\n    Cartesian4.magnitudeSquared = function(cartesian) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        //>>includeEnd('debug');\r\n\r\n        return cartesian.x * cartesian.x + cartesian.y * cartesian.y + cartesian.z * cartesian.z + cartesian.w * cartesian.w;\r\n    };\r\n\r\n    /**\r\n     * Computes the Cartesian's magnitude (length).\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian instance whose magnitude is to be computed.\r\n     * @returns {Number} The magnitude.\r\n     */\r\n    Cartesian4.magnitude = function(cartesian) {\r\n        return Math.sqrt(Cartesian4.magnitudeSquared(cartesian));\r\n    };\r\n\r\n    var distanceScratch = new Cartesian4();\r\n\r\n    /**\r\n     * Computes the 4-space distance between two points.\r\n     *\r\n     * @param {Cartesian4} left The first point to compute the distance from.\r\n     * @param {Cartesian4} right The second point to compute the distance to.\r\n     * @returns {Number} The distance between two points.\r\n     *\r\n     * @example\r\n     * // Returns 1.0\r\n     * var d = Cesium.Cartesian4.distance(\r\n     *   new Cesium.Cartesian4(1.0, 0.0, 0.0, 0.0),\r\n     *   new Cesium.Cartesian4(2.0, 0.0, 0.0, 0.0));\r\n     */\r\n    Cartesian4.distance = function(left, right) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        //>>includeEnd('debug');\r\n\r\n        Cartesian4.subtract(left, right, distanceScratch);\r\n        return Cartesian4.magnitude(distanceScratch);\r\n    };\r\n\r\n    /**\r\n     * Computes the squared distance between two points.  Comparing squared distances\r\n     * using this function is more efficient than comparing distances using {@link Cartesian4#distance}.\r\n     *\r\n     * @param {Cartesian4} left The first point to compute the distance from.\r\n     * @param {Cartesian4} right The second point to compute the distance to.\r\n     * @returns {Number} The distance between two points.\r\n     *\r\n     * @example\r\n     * // Returns 4.0, not 2.0\r\n     * var d = Cesium.Cartesian4.distance(\r\n     *   new Cesium.Cartesian4(1.0, 0.0, 0.0, 0.0),\r\n     *   new Cesium.Cartesian4(3.0, 0.0, 0.0, 0.0));\r\n     */\r\n    Cartesian4.distanceSquared = function(left, right) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        //>>includeEnd('debug');\r\n\r\n        Cartesian4.subtract(left, right, distanceScratch);\r\n        return Cartesian4.magnitudeSquared(distanceScratch);\r\n    };\r\n\r\n    /**\r\n     * Computes the normalized form of the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian to be normalized.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.normalize = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var magnitude = Cartesian4.magnitude(cartesian);\r\n\r\n        result.x = cartesian.x / magnitude;\r\n        result.y = cartesian.y / magnitude;\r\n        result.z = cartesian.z / magnitude;\r\n        result.w = cartesian.w / magnitude;\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (isNaN(result.x) || isNaN(result.y) || isNaN(result.z) || isNaN(result.w)) {\r\n            throw new DeveloperError('normalized result is not a number');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the dot (scalar) product of two Cartesians.\r\n     *\r\n     * @param {Cartesian4} left The first Cartesian.\r\n     * @param {Cartesian4} right The second Cartesian.\r\n     * @returns {Number} The dot product.\r\n     */\r\n    Cartesian4.dot = function(left, right) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        //>>includeEnd('debug');\r\n\r\n        return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise product of two Cartesians.\r\n     *\r\n     * @param {Cartesian4} left The first Cartesian.\r\n     * @param {Cartesian4} right The second Cartesian.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.multiplyComponents = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = left.x * right.x;\r\n        result.y = left.y * right.y;\r\n        result.z = left.z * right.z;\r\n        result.w = left.w * right.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise quotient of two Cartesians.\r\n     *\r\n     * @param {Cartesian4} left The first Cartesian.\r\n     * @param {Cartesian4} right The second Cartesian.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.divideComponents = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = left.x / right.x;\r\n        result.y = left.y / right.y;\r\n        result.z = left.z / right.z;\r\n        result.w = left.w / right.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise sum of two Cartesians.\r\n     *\r\n     * @param {Cartesian4} left The first Cartesian.\r\n     * @param {Cartesian4} right The second Cartesian.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.add = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = left.x + right.x;\r\n        result.y = left.y + right.y;\r\n        result.z = left.z + right.z;\r\n        result.w = left.w + right.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise difference of two Cartesians.\r\n     *\r\n     * @param {Cartesian4} left The first Cartesian.\r\n     * @param {Cartesian4} right The second Cartesian.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.subtract = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = left.x - right.x;\r\n        result.y = left.y - right.y;\r\n        result.z = left.z - right.z;\r\n        result.w = left.w - right.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Multiplies the provided Cartesian componentwise by the provided scalar.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian to be scaled.\r\n     * @param {Number} scalar The scalar to multiply with.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.multiplyByScalar = function(cartesian, scalar, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.number('scalar', scalar);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = cartesian.x * scalar;\r\n        result.y = cartesian.y * scalar;\r\n        result.z = cartesian.z * scalar;\r\n        result.w = cartesian.w * scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Divides the provided Cartesian componentwise by the provided scalar.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian to be divided.\r\n     * @param {Number} scalar The scalar to divide by.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.divideByScalar = function(cartesian, scalar, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.number('scalar', scalar);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = cartesian.x / scalar;\r\n        result.y = cartesian.y / scalar;\r\n        result.z = cartesian.z / scalar;\r\n        result.w = cartesian.w / scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Negates the provided Cartesian.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian to be negated.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.negate = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = -cartesian.x;\r\n        result.y = -cartesian.y;\r\n        result.z = -cartesian.z;\r\n        result.w = -cartesian.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the absolute value of the provided Cartesian.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian whose absolute value is to be computed.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.abs = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = Math.abs(cartesian.x);\r\n        result.y = Math.abs(cartesian.y);\r\n        result.z = Math.abs(cartesian.z);\r\n        result.w = Math.abs(cartesian.w);\r\n        return result;\r\n    };\r\n\r\n    var lerpScratch = new Cartesian4();\r\n    /**\r\n     * Computes the linear interpolation or extrapolation at t using the provided cartesians.\r\n     *\r\n     * @param {Cartesian4} start The value corresponding to t at 0.0.\r\n     * @param {Cartesian4}end The value corresponding to t at 1.0.\r\n     * @param {Number} t The point along t at which to interpolate.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Cartesian4.lerp = function(start, end, t, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('start', start);\r\n        Check.typeOf.object('end', end);\r\n        Check.typeOf.number('t', t);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        Cartesian4.multiplyByScalar(end, t, lerpScratch);\r\n        result = Cartesian4.multiplyByScalar(start, 1.0 - t, result);\r\n        return Cartesian4.add(lerpScratch, result, result);\r\n    };\r\n\r\n    var mostOrthogonalAxisScratch = new Cartesian4();\r\n    /**\r\n     * Returns the axis that is most orthogonal to the provided Cartesian.\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian on which to find the most orthogonal axis.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The most orthogonal axis.\r\n     */\r\n    Cartesian4.mostOrthogonalAxis = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var f = Cartesian4.normalize(cartesian, mostOrthogonalAxisScratch);\r\n        Cartesian4.abs(f, f);\r\n\r\n        if (f.x <= f.y) {\r\n            if (f.x <= f.z) {\r\n                if (f.x <= f.w) {\r\n                    result = Cartesian4.clone(Cartesian4.UNIT_X, result);\r\n                } else {\r\n                    result = Cartesian4.clone(Cartesian4.UNIT_W, result);\r\n                }\r\n            } else if (f.z <= f.w) {\r\n                result = Cartesian4.clone(Cartesian4.UNIT_Z, result);\r\n            } else {\r\n                result = Cartesian4.clone(Cartesian4.UNIT_W, result);\r\n            }\r\n        } else if (f.y <= f.z) {\r\n            if (f.y <= f.w) {\r\n                result = Cartesian4.clone(Cartesian4.UNIT_Y, result);\r\n            } else {\r\n                result = Cartesian4.clone(Cartesian4.UNIT_W, result);\r\n            }\r\n        } else if (f.z <= f.w) {\r\n            result = Cartesian4.clone(Cartesian4.UNIT_Z, result);\r\n        } else {\r\n            result = Cartesian4.clone(Cartesian4.UNIT_W, result);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Cartesians componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian4} [left] The first Cartesian.\r\n     * @param {Cartesian4} [right] The second Cartesian.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Cartesian4.equals = function(left, right) {\r\n        return (left === right) ||\r\n               ((defined(left)) &&\r\n                (defined(right)) &&\r\n                (left.x === right.x) &&\r\n                (left.y === right.y) &&\r\n                (left.z === right.z) &&\r\n                (left.w === right.w));\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Cartesian4.equalsArray = function(cartesian, array, offset) {\r\n        return cartesian.x === array[offset] &&\r\n               cartesian.y === array[offset + 1] &&\r\n               cartesian.z === array[offset + 2] &&\r\n               cartesian.w === array[offset + 3];\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Cartesians componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian4} [left] The first Cartesian.\r\n     * @param {Cartesian4} [right] The second Cartesian.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Cartesian4.equalsEpsilon = function(left, right, relativeEpsilon, absoluteEpsilon) {\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                CesiumMath.equalsEpsilon(left.x, right.x, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(left.y, right.y, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(left.z, right.z, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(left.w, right.w, relativeEpsilon, absoluteEpsilon));\r\n    };\r\n\r\n    /**\r\n     * An immutable Cartesian4 instance initialized to (0.0, 0.0, 0.0, 0.0).\r\n     *\r\n     * @type {Cartesian4}\r\n     * @constant\r\n     */\r\n    Cartesian4.ZERO = Object.freeze(new Cartesian4(0.0, 0.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian4 instance initialized to (1.0, 0.0, 0.0, 0.0).\r\n     *\r\n     * @type {Cartesian4}\r\n     * @constant\r\n     */\r\n    Cartesian4.UNIT_X = Object.freeze(new Cartesian4(1.0, 0.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian4 instance initialized to (0.0, 1.0, 0.0, 0.0).\r\n     *\r\n     * @type {Cartesian4}\r\n     * @constant\r\n     */\r\n    Cartesian4.UNIT_Y = Object.freeze(new Cartesian4(0.0, 1.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian4 instance initialized to (0.0, 0.0, 1.0, 0.0).\r\n     *\r\n     * @type {Cartesian4}\r\n     * @constant\r\n     */\r\n    Cartesian4.UNIT_Z = Object.freeze(new Cartesian4(0.0, 0.0, 1.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian4 instance initialized to (0.0, 0.0, 0.0, 1.0).\r\n     *\r\n     * @type {Cartesian4}\r\n     * @constant\r\n     */\r\n    Cartesian4.UNIT_W = Object.freeze(new Cartesian4(0.0, 0.0, 0.0, 1.0));\r\n\r\n    /**\r\n     * Duplicates this Cartesian4 instance.\r\n     *\r\n     * @param {Cartesian4} [result] The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided.\r\n     */\r\n    Cartesian4.prototype.clone = function(result) {\r\n        return Cartesian4.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this Cartesian against the provided Cartesian componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian4} [right] The right hand side Cartesian.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    Cartesian4.prototype.equals = function(right) {\r\n        return Cartesian4.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * Compares this Cartesian against the provided Cartesian componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian4} [right] The right hand side Cartesian.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Cartesian4.prototype.equalsEpsilon = function(right, relativeEpsilon, absoluteEpsilon) {\r\n        return Cartesian4.equalsEpsilon(this, right, relativeEpsilon, absoluteEpsilon);\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this Cartesian in the format '(x, y, z, w)'.\r\n     *\r\n     * @returns {String} A string representing the provided Cartesian in the format '(x, y, z, w)'.\r\n     */\r\n    Cartesian4.prototype.toString = function() {\r\n        return '(' + this.x + ', ' + this.y + ', ' + this.z + ', ' + this.w + ')';\r\n    };\r\n\r\n    var scratchFloatArray = new Float32Array(1);\r\n    var SHIFT_LEFT_8 = 256.0;\r\n    var SHIFT_LEFT_16 = 65536.0;\r\n    var SHIFT_LEFT_24 = 16777216.0;\r\n\r\n    var SHIFT_RIGHT_8 = 1.0 / SHIFT_LEFT_8;\r\n    var SHIFT_RIGHT_16 = 1.0 / SHIFT_LEFT_16;\r\n    var SHIFT_RIGHT_24 = 1.0 / SHIFT_LEFT_24;\r\n\r\n    var BIAS = 38.0;\r\n\r\n    /**\r\n     * Packs an arbitrary floating point value to 4 values representable using uint8.\r\n     *\r\n     * @param {Number} value A floating point number\r\n     * @param {Cartesian4} [result] The Cartesian4 that will contain the packed float.\r\n     * @returns {Cartesian4} A Cartesian4 representing the float packed to values in x, y, z, and w.\r\n     */\r\n    Cartesian4.packFloat = function(value, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('value', value);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian4();\r\n        }\r\n\r\n        // Force the value to 32 bit precision\r\n        scratchFloatArray[0] = value;\r\n        value = scratchFloatArray[0];\r\n\r\n        if (value === 0.0) {\r\n            return Cartesian4.clone(Cartesian4.ZERO, result);\r\n        }\r\n\r\n        var sign = value < 0.0 ? 1.0 : 0.0;\r\n        var exponent;\r\n\r\n        if (!isFinite(value)) {\r\n            value = 0.1;\r\n            exponent = BIAS;\r\n        } else {\r\n            value = Math.abs(value);\r\n            exponent = Math.floor(CesiumMath.logBase(value, 10)) + 1.0;\r\n            value = value / Math.pow(10.0, exponent);\r\n        }\r\n\r\n        var temp = value * SHIFT_LEFT_8;\r\n        result.x = Math.floor(temp);\r\n        temp = (temp - result.x) * SHIFT_LEFT_8;\r\n        result.y = Math.floor(temp);\r\n        temp = (temp - result.y) * SHIFT_LEFT_8;\r\n        result.z = Math.floor(temp);\r\n        result.w = (exponent + BIAS) * 2.0 + sign;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Unpacks a float packed using Cartesian4.packFloat.\r\n     *\r\n     * @param {Cartesian4} packedFloat A Cartesian4 containing a float packed to 4 values representable using uint8.\r\n     * @returns {Number} The unpacked float.\r\n     * @private\r\n     */\r\n    Cartesian4.unpackFloat = function(packedFloat) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('packedFloat', packedFloat);\r\n        //>>includeEnd('debug');\r\n\r\n        var temp = packedFloat.w / 2.0;\r\n        var exponent = Math.floor(temp);\r\n        var sign = (temp - exponent) * 2.0;\r\n        exponent = exponent - BIAS;\r\n\r\n        sign = sign * 2.0 - 1.0;\r\n        sign = -sign;\r\n\r\n        if (exponent >= BIAS) {\r\n            return sign < 0.0 ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\r\n        }\r\n\r\n        var unpacked = sign * packedFloat.x * SHIFT_RIGHT_8;\r\n        unpacked += sign * packedFloat.y * SHIFT_RIGHT_16;\r\n        unpacked += sign * packedFloat.z * SHIFT_RIGHT_24;\r\n\r\n        return unpacked * Math.pow(10.0, exponent);\r\n    };\r\nexport default Cartesian4;\r\n","import Cartesian3 from './Cartesian3.js';\r\nimport Cartesian4 from './Cartesian4.js';\r\nimport Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix3 from './Matrix3.js';\r\nimport RuntimeError from './RuntimeError.js';\r\n\r\n    /**\r\n     * A 4x4 matrix, indexable as a column-major order array.\r\n     * Constructor parameters are in row-major order for code readability.\r\n     * @alias Matrix4\r\n     * @constructor\r\n     *\r\n     * @param {Number} [column0Row0=0.0] The value for column 0, row 0.\r\n     * @param {Number} [column1Row0=0.0] The value for column 1, row 0.\r\n     * @param {Number} [column2Row0=0.0] The value for column 2, row 0.\r\n     * @param {Number} [column3Row0=0.0] The value for column 3, row 0.\r\n     * @param {Number} [column0Row1=0.0] The value for column 0, row 1.\r\n     * @param {Number} [column1Row1=0.0] The value for column 1, row 1.\r\n     * @param {Number} [column2Row1=0.0] The value for column 2, row 1.\r\n     * @param {Number} [column3Row1=0.0] The value for column 3, row 1.\r\n     * @param {Number} [column0Row2=0.0] The value for column 0, row 2.\r\n     * @param {Number} [column1Row2=0.0] The value for column 1, row 2.\r\n     * @param {Number} [column2Row2=0.0] The value for column 2, row 2.\r\n     * @param {Number} [column3Row2=0.0] The value for column 3, row 2.\r\n     * @param {Number} [column0Row3=0.0] The value for column 0, row 3.\r\n     * @param {Number} [column1Row3=0.0] The value for column 1, row 3.\r\n     * @param {Number} [column2Row3=0.0] The value for column 2, row 3.\r\n     * @param {Number} [column3Row3=0.0] The value for column 3, row 3.\r\n     *\r\n     * @see Matrix4.fromColumnMajorArray\r\n     * @see Matrix4.fromRowMajorArray\r\n     * @see Matrix4.fromRotationTranslation\r\n     * @see Matrix4.fromTranslationRotationScale\r\n     * @see Matrix4.fromTranslationQuaternionRotationScale\r\n     * @see Matrix4.fromTranslation\r\n     * @see Matrix4.fromScale\r\n     * @see Matrix4.fromUniformScale\r\n     * @see Matrix4.fromCamera\r\n     * @see Matrix4.computePerspectiveFieldOfView\r\n     * @see Matrix4.computeOrthographicOffCenter\r\n     * @see Matrix4.computePerspectiveOffCenter\r\n     * @see Matrix4.computeInfinitePerspectiveOffCenter\r\n     * @see Matrix4.computeViewportTransformation\r\n     * @see Matrix4.computeView\r\n     * @see Matrix2\r\n     * @see Matrix3\r\n     * @see Packable\r\n     */\r\n    function Matrix4(column0Row0, column1Row0, column2Row0, column3Row0,\r\n                     column0Row1, column1Row1, column2Row1, column3Row1,\r\n                     column0Row2, column1Row2, column2Row2, column3Row2,\r\n                     column0Row3, column1Row3, column2Row3, column3Row3) {\r\n        this[0] = defaultValue(column0Row0, 0.0);\r\n        this[1] = defaultValue(column0Row1, 0.0);\r\n        this[2] = defaultValue(column0Row2, 0.0);\r\n        this[3] = defaultValue(column0Row3, 0.0);\r\n        this[4] = defaultValue(column1Row0, 0.0);\r\n        this[5] = defaultValue(column1Row1, 0.0);\r\n        this[6] = defaultValue(column1Row2, 0.0);\r\n        this[7] = defaultValue(column1Row3, 0.0);\r\n        this[8] = defaultValue(column2Row0, 0.0);\r\n        this[9] = defaultValue(column2Row1, 0.0);\r\n        this[10] = defaultValue(column2Row2, 0.0);\r\n        this[11] = defaultValue(column2Row3, 0.0);\r\n        this[12] = defaultValue(column3Row0, 0.0);\r\n        this[13] = defaultValue(column3Row1, 0.0);\r\n        this[14] = defaultValue(column3Row2, 0.0);\r\n        this[15] = defaultValue(column3Row3, 0.0);\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Matrix4.packedLength = 16;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Matrix4} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Matrix4.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value[0];\r\n        array[startingIndex++] = value[1];\r\n        array[startingIndex++] = value[2];\r\n        array[startingIndex++] = value[3];\r\n        array[startingIndex++] = value[4];\r\n        array[startingIndex++] = value[5];\r\n        array[startingIndex++] = value[6];\r\n        array[startingIndex++] = value[7];\r\n        array[startingIndex++] = value[8];\r\n        array[startingIndex++] = value[9];\r\n        array[startingIndex++] = value[10];\r\n        array[startingIndex++] = value[11];\r\n        array[startingIndex++] = value[12];\r\n        array[startingIndex++] = value[13];\r\n        array[startingIndex++] = value[14];\r\n        array[startingIndex] = value[15];\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Matrix4} [result] The object into which to store the result.\r\n     * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Matrix4();\r\n        }\r\n\r\n        result[0] = array[startingIndex++];\r\n        result[1] = array[startingIndex++];\r\n        result[2] = array[startingIndex++];\r\n        result[3] = array[startingIndex++];\r\n        result[4] = array[startingIndex++];\r\n        result[5] = array[startingIndex++];\r\n        result[6] = array[startingIndex++];\r\n        result[7] = array[startingIndex++];\r\n        result[8] = array[startingIndex++];\r\n        result[9] = array[startingIndex++];\r\n        result[10] = array[startingIndex++];\r\n        result[11] = array[startingIndex++];\r\n        result[12] = array[startingIndex++];\r\n        result[13] = array[startingIndex++];\r\n        result[14] = array[startingIndex++];\r\n        result[15] = array[startingIndex];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Matrix4 instance.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to duplicate.\r\n     * @param {Matrix4} [result] The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided. (Returns undefined if matrix is undefined)\r\n     */\r\n    Matrix4.clone = function(matrix, result) {\r\n        if (!defined(matrix)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            return new Matrix4(matrix[0], matrix[4], matrix[8], matrix[12],\r\n                               matrix[1], matrix[5], matrix[9], matrix[13],\r\n                               matrix[2], matrix[6], matrix[10], matrix[14],\r\n                               matrix[3], matrix[7], matrix[11], matrix[15]);\r\n        }\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n        result[4] = matrix[4];\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[6];\r\n        result[7] = matrix[7];\r\n        result[8] = matrix[8];\r\n        result[9] = matrix[9];\r\n        result[10] = matrix[10];\r\n        result[11] = matrix[11];\r\n        result[12] = matrix[12];\r\n        result[13] = matrix[13];\r\n        result[14] = matrix[14];\r\n        result[15] = matrix[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix4 from 16 consecutive elements in an array.\r\n     * @function\r\n     *\r\n     * @param {Number[]} array The array whose 16 consecutive elements correspond to the positions of the matrix.  Assumes column-major order.\r\n     * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to first column first row position in the matrix.\r\n     * @param {Matrix4} [result] The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Create the Matrix4:\r\n     * // [1.0, 2.0, 3.0, 4.0]\r\n     * // [1.0, 2.0, 3.0, 4.0]\r\n     * // [1.0, 2.0, 3.0, 4.0]\r\n     * // [1.0, 2.0, 3.0, 4.0]\r\n     *\r\n     * var v = [1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0];\r\n     * var m = Cesium.Matrix4.fromArray(v);\r\n     *\r\n     * // Create same Matrix4 with using an offset into an array\r\n     * var v2 = [0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0];\r\n     * var m2 = Cesium.Matrix4.fromArray(v2, 2);\r\n     */\r\n    Matrix4.fromArray = Matrix4.unpack;\r\n\r\n    /**\r\n     * Computes a Matrix4 instance from a column-major order array.\r\n     *\r\n     * @param {Number[]} values The column-major order array.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.fromColumnMajorArray = function(values, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('values', values);\r\n        //>>includeEnd('debug');\r\n\r\n        return Matrix4.clone(values, result);\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance from a row-major order array.\r\n     * The resulting matrix will be in column-major order.\r\n     *\r\n     * @param {Number[]} values The row-major order array.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.fromRowMajorArray = function(values, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('values', values);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix4(values[0], values[1], values[2], values[3],\r\n                               values[4], values[5], values[6], values[7],\r\n                               values[8], values[9], values[10], values[11],\r\n                               values[12], values[13], values[14], values[15]);\r\n        }\r\n        result[0] = values[0];\r\n        result[1] = values[4];\r\n        result[2] = values[8];\r\n        result[3] = values[12];\r\n        result[4] = values[1];\r\n        result[5] = values[5];\r\n        result[6] = values[9];\r\n        result[7] = values[13];\r\n        result[8] = values[2];\r\n        result[9] = values[6];\r\n        result[10] = values[10];\r\n        result[11] = values[14];\r\n        result[12] = values[3];\r\n        result[13] = values[7];\r\n        result[14] = values[11];\r\n        result[15] = values[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance from a Matrix3 representing the rotation\r\n     * and a Cartesian3 representing the translation.\r\n     *\r\n     * @param {Matrix3} rotation The upper left portion of the matrix representing the rotation.\r\n     * @param {Cartesian3} [translation=Cartesian3.ZERO] The upper right portion of the matrix representing the translation.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.fromRotationTranslation = function(rotation, translation, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rotation', rotation);\r\n        //>>includeEnd('debug');\r\n\r\n        translation = defaultValue(translation, Cartesian3.ZERO);\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix4(rotation[0], rotation[3], rotation[6], translation.x,\r\n                               rotation[1], rotation[4], rotation[7], translation.y,\r\n                               rotation[2], rotation[5], rotation[8], translation.z,\r\n                                       0.0,         0.0,         0.0,           1.0);\r\n        }\r\n\r\n        result[0] = rotation[0];\r\n        result[1] = rotation[1];\r\n        result[2] = rotation[2];\r\n        result[3] = 0.0;\r\n        result[4] = rotation[3];\r\n        result[5] = rotation[4];\r\n        result[6] = rotation[5];\r\n        result[7] = 0.0;\r\n        result[8] = rotation[6];\r\n        result[9] = rotation[7];\r\n        result[10] = rotation[8];\r\n        result[11] = 0.0;\r\n        result[12] = translation.x;\r\n        result[13] = translation.y;\r\n        result[14] = translation.z;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance from a translation, rotation, and scale (TRS)\r\n     * representation with the rotation represented as a quaternion.\r\n     *\r\n     * @param {Cartesian3} translation The translation transformation.\r\n     * @param {Quaternion} rotation The rotation transformation.\r\n     * @param {Cartesian3} scale The non-uniform scale transformation.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * var result = Cesium.Matrix4.fromTranslationQuaternionRotationScale(\r\n     *   new Cesium.Cartesian3(1.0, 2.0, 3.0), // translation\r\n     *   Cesium.Quaternion.IDENTITY,           // rotation\r\n     *   new Cesium.Cartesian3(7.0, 8.0, 9.0), // scale\r\n     *   result);\r\n     */\r\n    Matrix4.fromTranslationQuaternionRotationScale = function(translation, rotation, scale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('translation', translation);\r\n        Check.typeOf.object('rotation', rotation);\r\n        Check.typeOf.object('scale', scale);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            result = new Matrix4();\r\n        }\r\n\r\n        var scaleX = scale.x;\r\n        var scaleY = scale.y;\r\n        var scaleZ = scale.z;\r\n\r\n        var x2 = rotation.x * rotation.x;\r\n        var xy = rotation.x * rotation.y;\r\n        var xz = rotation.x * rotation.z;\r\n        var xw = rotation.x * rotation.w;\r\n        var y2 = rotation.y * rotation.y;\r\n        var yz = rotation.y * rotation.z;\r\n        var yw = rotation.y * rotation.w;\r\n        var z2 = rotation.z * rotation.z;\r\n        var zw = rotation.z * rotation.w;\r\n        var w2 = rotation.w * rotation.w;\r\n\r\n        var m00 = x2 - y2 - z2 + w2;\r\n        var m01 = 2.0 * (xy - zw);\r\n        var m02 = 2.0 * (xz + yw);\r\n\r\n        var m10 = 2.0 * (xy + zw);\r\n        var m11 = -x2 + y2 - z2 + w2;\r\n        var m12 = 2.0 * (yz - xw);\r\n\r\n        var m20 = 2.0 * (xz - yw);\r\n        var m21 = 2.0 * (yz + xw);\r\n        var m22 = -x2 - y2 + z2 + w2;\r\n\r\n        result[0] = m00 * scaleX;\r\n        result[1] = m10 * scaleX;\r\n        result[2] = m20 * scaleX;\r\n        result[3] = 0.0;\r\n        result[4] = m01 * scaleY;\r\n        result[5] = m11 * scaleY;\r\n        result[6] = m21 * scaleY;\r\n        result[7] = 0.0;\r\n        result[8] = m02 * scaleZ;\r\n        result[9] = m12 * scaleZ;\r\n        result[10] = m22 * scaleZ;\r\n        result[11] = 0.0;\r\n        result[12] = translation.x;\r\n        result[13] = translation.y;\r\n        result[14] = translation.z;\r\n        result[15] = 1.0;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix4 instance from a {@link TranslationRotationScale} instance.\r\n     *\r\n     * @param {TranslationRotationScale} translationRotationScale The instance.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.fromTranslationRotationScale = function(translationRotationScale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('translationRotationScale', translationRotationScale);\r\n        //>>includeEnd('debug');\r\n\r\n        return Matrix4.fromTranslationQuaternionRotationScale(translationRotationScale.translation, translationRotationScale.rotation, translationRotationScale.scale, result);\r\n    };\r\n\r\n    /**\r\n     * Creates a Matrix4 instance from a Cartesian3 representing the translation.\r\n     *\r\n     * @param {Cartesian3} translation The upper right portion of the matrix representing the translation.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     *\r\n     * @see Matrix4.multiplyByTranslation\r\n     */\r\n    Matrix4.fromTranslation = function(translation, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('translation', translation);\r\n        //>>includeEnd('debug');\r\n\r\n        return Matrix4.fromRotationTranslation(Matrix3.IDENTITY, translation, result);\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance representing a non-uniform scale.\r\n     *\r\n     * @param {Cartesian3} scale The x, y, and z scale factors.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Creates\r\n     * //   [7.0, 0.0, 0.0, 0.0]\r\n     * //   [0.0, 8.0, 0.0, 0.0]\r\n     * //   [0.0, 0.0, 9.0, 0.0]\r\n     * //   [0.0, 0.0, 0.0, 1.0]\r\n     * var m = Cesium.Matrix4.fromScale(new Cesium.Cartesian3(7.0, 8.0, 9.0));\r\n     */\r\n    Matrix4.fromScale = function(scale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('scale', scale);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix4(\r\n                scale.x, 0.0,     0.0,     0.0,\r\n                0.0,     scale.y, 0.0,     0.0,\r\n                0.0,     0.0,     scale.z, 0.0,\r\n                0.0,     0.0,     0.0,     1.0);\r\n        }\r\n\r\n        result[0] = scale.x;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = scale.y;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 0.0;\r\n        result[9] = 0.0;\r\n        result[10] = scale.z;\r\n        result[11] = 0.0;\r\n        result[12] = 0.0;\r\n        result[13] = 0.0;\r\n        result[14] = 0.0;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance representing a uniform scale.\r\n     *\r\n     * @param {Number} scale The uniform scale factor.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Creates\r\n     * //   [2.0, 0.0, 0.0, 0.0]\r\n     * //   [0.0, 2.0, 0.0, 0.0]\r\n     * //   [0.0, 0.0, 2.0, 0.0]\r\n     * //   [0.0, 0.0, 0.0, 1.0]\r\n     * var m = Cesium.Matrix4.fromUniformScale(2.0);\r\n     */\r\n    Matrix4.fromUniformScale = function(scale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('scale', scale);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Matrix4(scale, 0.0,   0.0,   0.0,\r\n                               0.0,   scale, 0.0,   0.0,\r\n                               0.0,   0.0,   scale, 0.0,\r\n                               0.0,   0.0,   0.0,   1.0);\r\n        }\r\n\r\n        result[0] = scale;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = scale;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 0.0;\r\n        result[9] = 0.0;\r\n        result[10] = scale;\r\n        result[11] = 0.0;\r\n        result[12] = 0.0;\r\n        result[13] = 0.0;\r\n        result[14] = 0.0;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    var fromCameraF = new Cartesian3();\r\n    var fromCameraR = new Cartesian3();\r\n    var fromCameraU = new Cartesian3();\r\n\r\n    /**\r\n     * Computes a Matrix4 instance from a Camera.\r\n     *\r\n     * @param {Camera} camera The camera to use.\r\n     * @param {Matrix4} [result] The object in which the result will be stored, if undefined a new instance will be created.\r\n     * @returns {Matrix4} The modified result parameter, or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.fromCamera = function(camera, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('camera', camera);\r\n        //>>includeEnd('debug');\r\n\r\n        var position = camera.position;\r\n        var direction = camera.direction;\r\n        var up = camera.up;\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('camera.position', position);\r\n        Check.typeOf.object('camera.direction', direction);\r\n        Check.typeOf.object('camera.up', up);\r\n        //>>includeEnd('debug');\r\n\r\n        Cartesian3.normalize(direction, fromCameraF);\r\n        Cartesian3.normalize(Cartesian3.cross(fromCameraF, up, fromCameraR), fromCameraR);\r\n        Cartesian3.normalize(Cartesian3.cross(fromCameraR, fromCameraF, fromCameraU), fromCameraU);\r\n\r\n        var sX = fromCameraR.x;\r\n        var sY = fromCameraR.y;\r\n        var sZ = fromCameraR.z;\r\n        var fX = fromCameraF.x;\r\n        var fY = fromCameraF.y;\r\n        var fZ = fromCameraF.z;\r\n        var uX = fromCameraU.x;\r\n        var uY = fromCameraU.y;\r\n        var uZ = fromCameraU.z;\r\n        var positionX = position.x;\r\n        var positionY = position.y;\r\n        var positionZ = position.z;\r\n        var t0 = sX * -positionX + sY * -positionY + sZ * -positionZ;\r\n        var t1 = uX * -positionX + uY * -positionY + uZ * -positionZ;\r\n        var t2 = fX * positionX + fY * positionY + fZ * positionZ;\r\n\r\n        // The code below this comment is an optimized\r\n        // version of the commented lines.\r\n        // Rather that create two matrices and then multiply,\r\n        // we just bake in the multiplcation as part of creation.\r\n        // var rotation = new Matrix4(\r\n        //                 sX,  sY,  sZ, 0.0,\r\n        //                 uX,  uY,  uZ, 0.0,\r\n        //                -fX, -fY, -fZ, 0.0,\r\n        //                 0.0,  0.0,  0.0, 1.0);\r\n        // var translation = new Matrix4(\r\n        //                 1.0, 0.0, 0.0, -position.x,\r\n        //                 0.0, 1.0, 0.0, -position.y,\r\n        //                 0.0, 0.0, 1.0, -position.z,\r\n        //                 0.0, 0.0, 0.0, 1.0);\r\n        // return rotation.multiply(translation);\r\n        if (!defined(result)) {\r\n            return new Matrix4(\r\n                    sX,   sY,  sZ, t0,\r\n                    uX,   uY,  uZ, t1,\r\n                   -fX,  -fY, -fZ, t2,\r\n                    0.0, 0.0, 0.0, 1.0);\r\n        }\r\n        result[0] = sX;\r\n        result[1] = uX;\r\n        result[2] = -fX;\r\n        result[3] = 0.0;\r\n        result[4] = sY;\r\n        result[5] = uY;\r\n        result[6] = -fY;\r\n        result[7] = 0.0;\r\n        result[8] = sZ;\r\n        result[9] = uZ;\r\n        result[10] = -fZ;\r\n        result[11] = 0.0;\r\n        result[12] = t0;\r\n        result[13] = t1;\r\n        result[14] = t2;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance representing a perspective transformation matrix.\r\n     *\r\n     * @param {Number} fovY The field of view along the Y axis in radians.\r\n     * @param {Number} aspectRatio The aspect ratio.\r\n     * @param {Number} near The distance to the near plane in meters.\r\n     * @param {Number} far The distance to the far plane in meters.\r\n     * @param {Matrix4} result The object in which the result will be stored.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} fovY must be in (0, PI].\r\n     * @exception {DeveloperError} aspectRatio must be greater than zero.\r\n     * @exception {DeveloperError} near must be greater than zero.\r\n     * @exception {DeveloperError} far must be greater than zero.\r\n     */\r\n    Matrix4.computePerspectiveFieldOfView = function(fovY, aspectRatio, near, far, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number.greaterThan('fovY', fovY, 0.0);\r\n        Check.typeOf.number.lessThan('fovY', fovY, Math.PI);\r\n        Check.typeOf.number.greaterThan('near', near, 0.0);\r\n        Check.typeOf.number.greaterThan('far', far, 0.0);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var bottom = Math.tan(fovY * 0.5);\r\n\r\n        var column1Row1 = 1.0 / bottom;\r\n        var column0Row0 = column1Row1 / aspectRatio;\r\n        var column2Row2 = (far + near) / (near - far);\r\n        var column3Row2 = (2.0 * far * near) / (near - far);\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = column1Row1;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 0.0;\r\n        result[9] = 0.0;\r\n        result[10] = column2Row2;\r\n        result[11] = -1.0;\r\n        result[12] = 0.0;\r\n        result[13] = 0.0;\r\n        result[14] = column3Row2;\r\n        result[15] = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance representing an orthographic transformation matrix.\r\n     *\r\n     * @param {Number} left The number of meters to the left of the camera that will be in view.\r\n     * @param {Number} right The number of meters to the right of the camera that will be in view.\r\n     * @param {Number} bottom The number of meters below of the camera that will be in view.\r\n     * @param {Number} top The number of meters above of the camera that will be in view.\r\n     * @param {Number} near The distance to the near plane in meters.\r\n     * @param {Number} far The distance to the far plane in meters.\r\n     * @param {Matrix4} result The object in which the result will be stored.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.computeOrthographicOffCenter = function(left, right, bottom, top, near, far, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('left', left);\r\n        Check.typeOf.number('right', right);\r\n        Check.typeOf.number('bottom', bottom);\r\n        Check.typeOf.number('top', top);\r\n        Check.typeOf.number('near', near);\r\n        Check.typeOf.number('far', far);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var a = 1.0 / (right - left);\r\n        var b = 1.0 / (top - bottom);\r\n        var c = 1.0 / (far - near);\r\n\r\n        var tx = -(right + left) * a;\r\n        var ty = -(top + bottom) * b;\r\n        var tz = -(far + near) * c;\r\n        a *= 2.0;\r\n        b *= 2.0;\r\n        c *= -2.0;\r\n\r\n        result[0] = a;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = b;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 0.0;\r\n        result[9] = 0.0;\r\n        result[10] = c;\r\n        result[11] = 0.0;\r\n        result[12] = tx;\r\n        result[13] = ty;\r\n        result[14] = tz;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance representing an off center perspective transformation.\r\n     *\r\n     * @param {Number} left The number of meters to the left of the camera that will be in view.\r\n     * @param {Number} right The number of meters to the right of the camera that will be in view.\r\n     * @param {Number} bottom The number of meters below of the camera that will be in view.\r\n     * @param {Number} top The number of meters above of the camera that will be in view.\r\n     * @param {Number} near The distance to the near plane in meters.\r\n     * @param {Number} far The distance to the far plane in meters.\r\n     * @param {Matrix4} result The object in which the result will be stored.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.computePerspectiveOffCenter = function(left, right, bottom, top, near, far, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('left', left);\r\n        Check.typeOf.number('right', right);\r\n        Check.typeOf.number('bottom', bottom);\r\n        Check.typeOf.number('top', top);\r\n        Check.typeOf.number('near', near);\r\n        Check.typeOf.number('far', far);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var column0Row0 = 2.0 * near / (right - left);\r\n        var column1Row1 = 2.0 * near / (top - bottom);\r\n        var column2Row0 = (right + left) / (right - left);\r\n        var column2Row1 = (top + bottom) / (top - bottom);\r\n        var column2Row2 = -(far + near) / (far - near);\r\n        var column2Row3 = -1.0;\r\n        var column3Row2 = -2.0 * far * near / (far - near);\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = column1Row1;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = column2Row0;\r\n        result[9] = column2Row1;\r\n        result[10] = column2Row2;\r\n        result[11] = column2Row3;\r\n        result[12] = 0.0;\r\n        result[13] = 0.0;\r\n        result[14] = column3Row2;\r\n        result[15] = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance representing an infinite off center perspective transformation.\r\n     *\r\n     * @param {Number} left The number of meters to the left of the camera that will be in view.\r\n     * @param {Number} right The number of meters to the right of the camera that will be in view.\r\n     * @param {Number} bottom The number of meters below of the camera that will be in view.\r\n     * @param {Number} top The number of meters above of the camera that will be in view.\r\n     * @param {Number} near The distance to the near plane in meters.\r\n     * @param {Matrix4} result The object in which the result will be stored.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.computeInfinitePerspectiveOffCenter = function(left, right, bottom, top, near, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('left', left);\r\n        Check.typeOf.number('right', right);\r\n        Check.typeOf.number('bottom', bottom);\r\n        Check.typeOf.number('top', top);\r\n        Check.typeOf.number('near', near);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var column0Row0 = 2.0 * near / (right - left);\r\n        var column1Row1 = 2.0 * near / (top - bottom);\r\n        var column2Row0 = (right + left) / (right - left);\r\n        var column2Row1 = (top + bottom) / (top - bottom);\r\n        var column2Row2 = -1.0;\r\n        var column2Row3 = -1.0;\r\n        var column3Row2 = -2.0 * near;\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = column1Row1;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = column2Row0;\r\n        result[9] = column2Row1;\r\n        result[10] = column2Row2;\r\n        result[11] = column2Row3;\r\n        result[12] = 0.0;\r\n        result[13] = 0.0;\r\n        result[14] = column3Row2;\r\n        result[15] = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance that transforms from normalized device coordinates to window coordinates.\r\n     *\r\n     * @param {Object}[viewport = { x : 0.0, y : 0.0, width : 0.0, height : 0.0 }] The viewport's corners as shown in Example 1.\r\n     * @param {Number}[nearDepthRange=0.0] The near plane distance in window coordinates.\r\n     * @param {Number}[farDepthRange=1.0] The far plane distance in window coordinates.\r\n     * @param {Matrix4} result The object in which the result will be stored.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * // Create viewport transformation using an explicit viewport and depth range.\r\n     * var m = Cesium.Matrix4.computeViewportTransformation({\r\n     *     x : 0.0,\r\n     *     y : 0.0,\r\n     *     width : 1024.0,\r\n     *     height : 768.0\r\n     * }, 0.0, 1.0, new Cesium.Matrix4());\r\n     */\r\n    Matrix4.computeViewportTransformation = function(viewport, nearDepthRange, farDepthRange, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        viewport = defaultValue(viewport, defaultValue.EMPTY_OBJECT);\r\n        var x = defaultValue(viewport.x, 0.0);\r\n        var y = defaultValue(viewport.y, 0.0);\r\n        var width = defaultValue(viewport.width, 0.0);\r\n        var height = defaultValue(viewport.height, 0.0);\r\n        nearDepthRange = defaultValue(nearDepthRange, 0.0);\r\n        farDepthRange = defaultValue(farDepthRange, 1.0);\r\n\r\n        var halfWidth = width * 0.5;\r\n        var halfHeight = height * 0.5;\r\n        var halfDepth = (farDepthRange - nearDepthRange) * 0.5;\r\n\r\n        var column0Row0 = halfWidth;\r\n        var column1Row1 = halfHeight;\r\n        var column2Row2 = halfDepth;\r\n        var column3Row0 = x + halfWidth;\r\n        var column3Row1 = y + halfHeight;\r\n        var column3Row2 = nearDepthRange + halfDepth;\r\n        var column3Row3 = 1.0;\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = 0.0;\r\n        result[2] = 0.0;\r\n        result[3] = 0.0;\r\n        result[4] = 0.0;\r\n        result[5] = column1Row1;\r\n        result[6] = 0.0;\r\n        result[7] = 0.0;\r\n        result[8] = 0.0;\r\n        result[9] = 0.0;\r\n        result[10] = column2Row2;\r\n        result[11] = 0.0;\r\n        result[12] = column3Row0;\r\n        result[13] = column3Row1;\r\n        result[14] = column3Row2;\r\n        result[15] = column3Row3;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a Matrix4 instance that transforms from world space to view space.\r\n     *\r\n     * @param {Cartesian3} position The position of the camera.\r\n     * @param {Cartesian3} direction The forward direction.\r\n     * @param {Cartesian3} up The up direction.\r\n     * @param {Cartesian3} right The right direction.\r\n     * @param {Matrix4} result The object in which the result will be stored.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.computeView = function(position, direction, up, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('position', position);\r\n        Check.typeOf.object('direction', direction);\r\n        Check.typeOf.object('up', up);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = right.x;\r\n        result[1] = up.x;\r\n        result[2] = -direction.x;\r\n        result[3] = 0.0;\r\n        result[4] = right.y;\r\n        result[5] = up.y;\r\n        result[6] = -direction.y;\r\n        result[7] = 0.0;\r\n        result[8] = right.z;\r\n        result[9] = up.z;\r\n        result[10] = -direction.z;\r\n        result[11] = 0.0;\r\n        result[12] = -Cartesian3.dot(right, position);\r\n        result[13] = -Cartesian3.dot(up, position);\r\n        result[14] = Cartesian3.dot(direction, position);\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes an Array from the provided Matrix4 instance.\r\n     * The array will be in column-major order.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use..\r\n     * @param {Number[]} [result] The Array onto which to store the result.\r\n     * @returns {Number[]} The modified Array parameter or a new Array instance if one was not provided.\r\n     *\r\n     * @example\r\n     * //create an array from an instance of Matrix4\r\n     * // m = [10.0, 14.0, 18.0, 22.0]\r\n     * //     [11.0, 15.0, 19.0, 23.0]\r\n     * //     [12.0, 16.0, 20.0, 24.0]\r\n     * //     [13.0, 17.0, 21.0, 25.0]\r\n     * var a = Cesium.Matrix4.toArray(m);\r\n     *\r\n     * // m remains the same\r\n     * //creates a = [10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0]\r\n     */\r\n    Matrix4.toArray = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return [matrix[0], matrix[1], matrix[2], matrix[3],\r\n                    matrix[4], matrix[5], matrix[6], matrix[7],\r\n                    matrix[8], matrix[9], matrix[10], matrix[11],\r\n                    matrix[12], matrix[13], matrix[14], matrix[15]];\r\n        }\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n        result[4] = matrix[4];\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[6];\r\n        result[7] = matrix[7];\r\n        result[8] = matrix[8];\r\n        result[9] = matrix[9];\r\n        result[10] = matrix[10];\r\n        result[11] = matrix[11];\r\n        result[12] = matrix[12];\r\n        result[13] = matrix[13];\r\n        result[14] = matrix[14];\r\n        result[15] = matrix[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the array index of the element at the provided row and column.\r\n     *\r\n     * @param {Number} row The zero-based index of the row.\r\n     * @param {Number} column The zero-based index of the column.\r\n     * @returns {Number} The index of the element at the provided row and column.\r\n     *\r\n     * @exception {DeveloperError} row must be 0, 1, 2, or 3.\r\n     * @exception {DeveloperError} column must be 0, 1, 2, or 3.\r\n     *\r\n     * @example\r\n     * var myMatrix = new Cesium.Matrix4();\r\n     * var column1Row0Index = Cesium.Matrix4.getElementIndex(1, 0);\r\n     * var column1Row0 = myMatrix[column1Row0Index];\r\n     * myMatrix[column1Row0Index] = 10.0;\r\n     */\r\n    Matrix4.getElementIndex = function(column, row) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number.greaterThanOrEquals('row', row, 0);\r\n        Check.typeOf.number.lessThanOrEquals('row', row, 3);\r\n\r\n        Check.typeOf.number.greaterThanOrEquals('column', column, 0);\r\n        Check.typeOf.number.lessThanOrEquals('column', column, 3);\r\n        //>>includeEnd('debug');\r\n\r\n        return column * 4 + row;\r\n    };\r\n\r\n    /**\r\n     * Retrieves a copy of the matrix column at the provided index as a Cartesian4 instance.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the column to retrieve.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, 2, or 3.\r\n     *\r\n     * @example\r\n     * //returns a Cartesian4 instance with values from the specified column\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * //Example 1: Creates an instance of Cartesian\r\n     * var a = Cesium.Matrix4.getColumn(m, 2, new Cesium.Cartesian4());\r\n     *\r\n     * @example\r\n     * //Example 2: Sets values for Cartesian instance\r\n     * var a = new Cesium.Cartesian4();\r\n     * Cesium.Matrix4.getColumn(m, 2, a);\r\n     *\r\n     * // a.x = 12.0; a.y = 16.0; a.z = 20.0; a.w = 24.0;\r\n     */\r\n    Matrix4.getColumn = function(matrix, index, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n\r\n        Check.typeOf.number.greaterThanOrEquals('index', index, 0);\r\n        Check.typeOf.number.lessThanOrEquals('index', index, 3);\r\n\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var startIndex = index * 4;\r\n        var x = matrix[startIndex];\r\n        var y = matrix[startIndex + 1];\r\n        var z = matrix[startIndex + 2];\r\n        var w = matrix[startIndex + 3];\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        result.w = w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a new matrix that replaces the specified column in the provided matrix with the provided Cartesian4 instance.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the column to set.\r\n     * @param {Cartesian4} cartesian The Cartesian whose values will be assigned to the specified column.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, 2, or 3.\r\n     *\r\n     * @example\r\n     * //creates a new Matrix4 instance with new column values from the Cartesian4 instance\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * var a = Cesium.Matrix4.setColumn(m, 2, new Cesium.Cartesian4(99.0, 98.0, 97.0, 96.0), new Cesium.Matrix4());\r\n     *\r\n     * // m remains the same\r\n     * // a = [10.0, 11.0, 99.0, 13.0]\r\n     * //     [14.0, 15.0, 98.0, 17.0]\r\n     * //     [18.0, 19.0, 97.0, 21.0]\r\n     * //     [22.0, 23.0, 96.0, 25.0]\r\n     */\r\n    Matrix4.setColumn = function(matrix, index, cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n\r\n        Check.typeOf.number.greaterThanOrEquals('index', index, 0);\r\n        Check.typeOf.number.lessThanOrEquals('index', index, 3);\r\n\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result = Matrix4.clone(matrix, result);\r\n        var startIndex = index * 4;\r\n        result[startIndex] = cartesian.x;\r\n        result[startIndex + 1] = cartesian.y;\r\n        result[startIndex + 2] = cartesian.z;\r\n        result[startIndex + 3] = cartesian.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a new matrix that replaces the translation in the rightmost column of the provided\r\n     * matrix with the provided translation.  This assumes the matrix is an affine transformation\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Cartesian3} translation The translation that replaces the translation of the provided matrix.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.setTranslation = function(matrix, translation, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('translation', translation);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n\r\n        result[4] = matrix[4];\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[6];\r\n        result[7] = matrix[7];\r\n\r\n        result[8] = matrix[8];\r\n        result[9] = matrix[9];\r\n        result[10] = matrix[10];\r\n        result[11] = matrix[11];\r\n\r\n        result[12] = translation.x;\r\n        result[13] = translation.y;\r\n        result[14] = translation.z;\r\n        result[15] = matrix[15];\r\n\r\n        return result;\r\n    };\r\n\r\n    var scaleScratch = new Cartesian3();\r\n    /**\r\n     * Computes a new matrix that replaces the scale with the provided scale.  This assumes the matrix is an affine transformation\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Cartesian3} scale The scale that replaces the scale of the provided matrix.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.setScale = function(matrix, scale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('scale', scale);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var existingScale = Matrix4.getScale(matrix, scaleScratch);\r\n        var newScale = Cartesian3.divideComponents(scale, existingScale, scaleScratch);\r\n        return Matrix4.multiplyByScale(matrix, newScale, result);\r\n    };\r\n\r\n    /**\r\n     * Retrieves a copy of the matrix row at the provided index as a Cartesian4 instance.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the row to retrieve.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, 2, or 3.\r\n     *\r\n     * @example\r\n     * //returns a Cartesian4 instance with values from the specified column\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * //Example 1: Returns an instance of Cartesian\r\n     * var a = Cesium.Matrix4.getRow(m, 2, new Cesium.Cartesian4());\r\n     *\r\n     * @example\r\n     * //Example 2: Sets values for a Cartesian instance\r\n     * var a = new Cesium.Cartesian4();\r\n     * Cesium.Matrix4.getRow(m, 2, a);\r\n     *\r\n     * // a.x = 18.0; a.y = 19.0; a.z = 20.0; a.w = 21.0;\r\n     */\r\n    Matrix4.getRow = function(matrix, index, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n\r\n        Check.typeOf.number.greaterThanOrEquals('index', index, 0);\r\n        Check.typeOf.number.lessThanOrEquals('index', index, 3);\r\n\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var x = matrix[index];\r\n        var y = matrix[index + 4];\r\n        var z = matrix[index + 8];\r\n        var w = matrix[index + 12];\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        result.w = w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a new matrix that replaces the specified row in the provided matrix with the provided Cartesian4 instance.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Number} index The zero-based index of the row to set.\r\n     * @param {Cartesian4} cartesian The Cartesian whose values will be assigned to the specified row.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} index must be 0, 1, 2, or 3.\r\n     *\r\n     * @example\r\n     * //create a new Matrix4 instance with new row values from the Cartesian4 instance\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * var a = Cesium.Matrix4.setRow(m, 2, new Cesium.Cartesian4(99.0, 98.0, 97.0, 96.0), new Cesium.Matrix4());\r\n     *\r\n     * // m remains the same\r\n     * // a = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [99.0, 98.0, 97.0, 96.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     */\r\n    Matrix4.setRow = function(matrix, index, cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n\r\n        Check.typeOf.number.greaterThanOrEquals('index', index, 0);\r\n        Check.typeOf.number.lessThanOrEquals('index', index, 3);\r\n\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result = Matrix4.clone(matrix, result);\r\n        result[index] = cartesian.x;\r\n        result[index + 4] = cartesian.y;\r\n        result[index + 8] = cartesian.z;\r\n        result[index + 12] = cartesian.w;\r\n        return result;\r\n    };\r\n\r\n    var scratchColumn = new Cartesian3();\r\n\r\n    /**\r\n     * Extracts the non-uniform scale assuming the matrix is an affine transformation.\r\n     *\r\n     * @param {Matrix4} matrix The matrix.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter\r\n     */\r\n    Matrix4.getScale = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = Cartesian3.magnitude(Cartesian3.fromElements(matrix[0], matrix[1], matrix[2], scratchColumn));\r\n        result.y = Cartesian3.magnitude(Cartesian3.fromElements(matrix[4], matrix[5], matrix[6], scratchColumn));\r\n        result.z = Cartesian3.magnitude(Cartesian3.fromElements(matrix[8], matrix[9], matrix[10], scratchColumn));\r\n        return result;\r\n    };\r\n\r\n    var scratchScale = new Cartesian3();\r\n\r\n    /**\r\n     * Computes the maximum scale assuming the matrix is an affine transformation.\r\n     * The maximum scale is the maximum length of the column vectors in the upper-left\r\n     * 3x3 matrix.\r\n     *\r\n     * @param {Matrix4} matrix The matrix.\r\n     * @returns {Number} The maximum scale.\r\n     */\r\n    Matrix4.getMaximumScale = function(matrix) {\r\n        Matrix4.getScale(matrix, scratchScale);\r\n        return Cartesian3.maximumComponent(scratchScale);\r\n    };\r\n\r\n    /**\r\n     * Computes the product of two matrices.\r\n     *\r\n     * @param {Matrix4} left The first matrix.\r\n     * @param {Matrix4} right The second matrix.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.multiply = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var left0 = left[0];\r\n        var left1 = left[1];\r\n        var left2 = left[2];\r\n        var left3 = left[3];\r\n        var left4 = left[4];\r\n        var left5 = left[5];\r\n        var left6 = left[6];\r\n        var left7 = left[7];\r\n        var left8 = left[8];\r\n        var left9 = left[9];\r\n        var left10 = left[10];\r\n        var left11 = left[11];\r\n        var left12 = left[12];\r\n        var left13 = left[13];\r\n        var left14 = left[14];\r\n        var left15 = left[15];\r\n\r\n        var right0 = right[0];\r\n        var right1 = right[1];\r\n        var right2 = right[2];\r\n        var right3 = right[3];\r\n        var right4 = right[4];\r\n        var right5 = right[5];\r\n        var right6 = right[6];\r\n        var right7 = right[7];\r\n        var right8 = right[8];\r\n        var right9 = right[9];\r\n        var right10 = right[10];\r\n        var right11 = right[11];\r\n        var right12 = right[12];\r\n        var right13 = right[13];\r\n        var right14 = right[14];\r\n        var right15 = right[15];\r\n\r\n        var column0Row0 = left0 * right0 + left4 * right1 + left8 * right2 + left12 * right3;\r\n        var column0Row1 = left1 * right0 + left5 * right1 + left9 * right2 + left13 * right3;\r\n        var column0Row2 = left2 * right0 + left6 * right1 + left10 * right2 + left14 * right3;\r\n        var column0Row3 = left3 * right0 + left7 * right1 + left11 * right2 + left15 * right3;\r\n\r\n        var column1Row0 = left0 * right4 + left4 * right5 + left8 * right6 + left12 * right7;\r\n        var column1Row1 = left1 * right4 + left5 * right5 + left9 * right6 + left13 * right7;\r\n        var column1Row2 = left2 * right4 + left6 * right5 + left10 * right6 + left14 * right7;\r\n        var column1Row3 = left3 * right4 + left7 * right5 + left11 * right6 + left15 * right7;\r\n\r\n        var column2Row0 = left0 * right8 + left4 * right9 + left8 * right10 + left12 * right11;\r\n        var column2Row1 = left1 * right8 + left5 * right9 + left9 * right10 + left13 * right11;\r\n        var column2Row2 = left2 * right8 + left6 * right9 + left10 * right10 + left14 * right11;\r\n        var column2Row3 = left3 * right8 + left7 * right9 + left11 * right10 + left15 * right11;\r\n\r\n        var column3Row0 = left0 * right12 + left4 * right13 + left8 * right14 + left12 * right15;\r\n        var column3Row1 = left1 * right12 + left5 * right13 + left9 * right14 + left13 * right15;\r\n        var column3Row2 = left2 * right12 + left6 * right13 + left10 * right14 + left14 * right15;\r\n        var column3Row3 = left3 * right12 + left7 * right13 + left11 * right14 + left15 * right15;\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = column0Row1;\r\n        result[2] = column0Row2;\r\n        result[3] = column0Row3;\r\n        result[4] = column1Row0;\r\n        result[5] = column1Row1;\r\n        result[6] = column1Row2;\r\n        result[7] = column1Row3;\r\n        result[8] = column2Row0;\r\n        result[9] = column2Row1;\r\n        result[10] = column2Row2;\r\n        result[11] = column2Row3;\r\n        result[12] = column3Row0;\r\n        result[13] = column3Row1;\r\n        result[14] = column3Row2;\r\n        result[15] = column3Row3;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the sum of two matrices.\r\n     *\r\n     * @param {Matrix4} left The first matrix.\r\n     * @param {Matrix4} right The second matrix.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.add = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = left[0] + right[0];\r\n        result[1] = left[1] + right[1];\r\n        result[2] = left[2] + right[2];\r\n        result[3] = left[3] + right[3];\r\n        result[4] = left[4] + right[4];\r\n        result[5] = left[5] + right[5];\r\n        result[6] = left[6] + right[6];\r\n        result[7] = left[7] + right[7];\r\n        result[8] = left[8] + right[8];\r\n        result[9] = left[9] + right[9];\r\n        result[10] = left[10] + right[10];\r\n        result[11] = left[11] + right[11];\r\n        result[12] = left[12] + right[12];\r\n        result[13] = left[13] + right[13];\r\n        result[14] = left[14] + right[14];\r\n        result[15] = left[15] + right[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the difference of two matrices.\r\n     *\r\n     * @param {Matrix4} left The first matrix.\r\n     * @param {Matrix4} right The second matrix.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.subtract = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = left[0] - right[0];\r\n        result[1] = left[1] - right[1];\r\n        result[2] = left[2] - right[2];\r\n        result[3] = left[3] - right[3];\r\n        result[4] = left[4] - right[4];\r\n        result[5] = left[5] - right[5];\r\n        result[6] = left[6] - right[6];\r\n        result[7] = left[7] - right[7];\r\n        result[8] = left[8] - right[8];\r\n        result[9] = left[9] - right[9];\r\n        result[10] = left[10] - right[10];\r\n        result[11] = left[11] - right[11];\r\n        result[12] = left[12] - right[12];\r\n        result[13] = left[13] - right[13];\r\n        result[14] = left[14] - right[14];\r\n        result[15] = left[15] - right[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of two matrices assuming the matrices are\r\n     * affine transformation matrices, where the upper left 3x3 elements\r\n     * are a rotation matrix, and the upper three elements in the fourth\r\n     * column are the translation.  The bottom row is assumed to be [0, 0, 0, 1].\r\n     * The matrix is not verified to be in the proper form.\r\n     * This method is faster than computing the product for general 4x4\r\n     * matrices using {@link Matrix4.multiply}.\r\n     *\r\n     * @param {Matrix4} left The first matrix.\r\n     * @param {Matrix4} right The second matrix.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * var m1 = new Cesium.Matrix4(1.0, 6.0, 7.0, 0.0, 2.0, 5.0, 8.0, 0.0, 3.0, 4.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0);\r\n     * var m2 = Cesium.Transforms.eastNorthUpToFixedFrame(new Cesium.Cartesian3(1.0, 1.0, 1.0));\r\n     * var m3 = Cesium.Matrix4.multiplyTransformation(m1, m2, new Cesium.Matrix4());\r\n     */\r\n    Matrix4.multiplyTransformation = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var left0 = left[0];\r\n        var left1 = left[1];\r\n        var left2 = left[2];\r\n        var left4 = left[4];\r\n        var left5 = left[5];\r\n        var left6 = left[6];\r\n        var left8 = left[8];\r\n        var left9 = left[9];\r\n        var left10 = left[10];\r\n        var left12 = left[12];\r\n        var left13 = left[13];\r\n        var left14 = left[14];\r\n\r\n        var right0 = right[0];\r\n        var right1 = right[1];\r\n        var right2 = right[2];\r\n        var right4 = right[4];\r\n        var right5 = right[5];\r\n        var right6 = right[6];\r\n        var right8 = right[8];\r\n        var right9 = right[9];\r\n        var right10 = right[10];\r\n        var right12 = right[12];\r\n        var right13 = right[13];\r\n        var right14 = right[14];\r\n\r\n        var column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;\r\n        var column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;\r\n        var column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;\r\n\r\n        var column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;\r\n        var column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;\r\n        var column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;\r\n\r\n        var column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;\r\n        var column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;\r\n        var column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;\r\n\r\n        var column3Row0 = left0 * right12 + left4 * right13 + left8 * right14 + left12;\r\n        var column3Row1 = left1 * right12 + left5 * right13 + left9 * right14 + left13;\r\n        var column3Row2 = left2 * right12 + left6 * right13 + left10 * right14 + left14;\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = column0Row1;\r\n        result[2] = column0Row2;\r\n        result[3] = 0.0;\r\n        result[4] = column1Row0;\r\n        result[5] = column1Row1;\r\n        result[6] = column1Row2;\r\n        result[7] = 0.0;\r\n        result[8] = column2Row0;\r\n        result[9] = column2Row1;\r\n        result[10] = column2Row2;\r\n        result[11] = 0.0;\r\n        result[12] = column3Row0;\r\n        result[13] = column3Row1;\r\n        result[14] = column3Row2;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\r\n     * by a 3x3 rotation matrix.  This is an optimization\r\n     * for <code>Matrix4.multiply(m, Matrix4.fromRotationTranslation(rotation), m);</code> with less allocations and arithmetic operations.\r\n     *\r\n     * @param {Matrix4} matrix The matrix on the left-hand side.\r\n     * @param {Matrix3} rotation The 3x3 rotation matrix on the right-hand side.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromRotationTranslation(rotation), m);\r\n     * Cesium.Matrix4.multiplyByMatrix3(m, rotation, m);\r\n     */\r\n    Matrix4.multiplyByMatrix3 = function(matrix, rotation, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('rotation', rotation);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var left0 = matrix[0];\r\n        var left1 = matrix[1];\r\n        var left2 = matrix[2];\r\n        var left4 = matrix[4];\r\n        var left5 = matrix[5];\r\n        var left6 = matrix[6];\r\n        var left8 = matrix[8];\r\n        var left9 = matrix[9];\r\n        var left10 = matrix[10];\r\n\r\n        var right0 = rotation[0];\r\n        var right1 = rotation[1];\r\n        var right2 = rotation[2];\r\n        var right4 = rotation[3];\r\n        var right5 = rotation[4];\r\n        var right6 = rotation[5];\r\n        var right8 = rotation[6];\r\n        var right9 = rotation[7];\r\n        var right10 = rotation[8];\r\n\r\n        var column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;\r\n        var column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;\r\n        var column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;\r\n\r\n        var column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;\r\n        var column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;\r\n        var column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;\r\n\r\n        var column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;\r\n        var column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;\r\n        var column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;\r\n\r\n        result[0] = column0Row0;\r\n        result[1] = column0Row1;\r\n        result[2] = column0Row2;\r\n        result[3] = 0.0;\r\n        result[4] = column1Row0;\r\n        result[5] = column1Row1;\r\n        result[6] = column1Row2;\r\n        result[7] = 0.0;\r\n        result[8] = column2Row0;\r\n        result[9] = column2Row1;\r\n        result[10] = column2Row2;\r\n        result[11] = 0.0;\r\n        result[12] = matrix[12];\r\n        result[13] = matrix[13];\r\n        result[14] = matrix[14];\r\n        result[15] = matrix[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\r\n     * by an implicit translation matrix defined by a {@link Cartesian3}.  This is an optimization\r\n     * for <code>Matrix4.multiply(m, Matrix4.fromTranslation(position), m);</code> with less allocations and arithmetic operations.\r\n     *\r\n     * @param {Matrix4} matrix The matrix on the left-hand side.\r\n     * @param {Cartesian3} translation The translation on the right-hand side.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromTranslation(position), m);\r\n     * Cesium.Matrix4.multiplyByTranslation(m, position, m);\r\n     */\r\n    Matrix4.multiplyByTranslation = function(matrix, translation, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('translation', translation);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var x = translation.x;\r\n        var y = translation.y;\r\n        var z = translation.z;\r\n\r\n        var tx = (x * matrix[0]) + (y * matrix[4]) + (z * matrix[8]) + matrix[12];\r\n        var ty = (x * matrix[1]) + (y * matrix[5]) + (z * matrix[9]) + matrix[13];\r\n        var tz = (x * matrix[2]) + (y * matrix[6]) + (z * matrix[10]) + matrix[14];\r\n\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[3];\r\n        result[4] = matrix[4];\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[6];\r\n        result[7] = matrix[7];\r\n        result[8] = matrix[8];\r\n        result[9] = matrix[9];\r\n        result[10] = matrix[10];\r\n        result[11] = matrix[11];\r\n        result[12] = tx;\r\n        result[13] = ty;\r\n        result[14] = tz;\r\n        result[15] = matrix[15];\r\n        return result;\r\n    };\r\n\r\n    var uniformScaleScratch = new Cartesian3();\r\n\r\n    /**\r\n     * Multiplies an affine transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\r\n     * by an implicit uniform scale matrix.  This is an optimization\r\n     * for <code>Matrix4.multiply(m, Matrix4.fromUniformScale(scale), m);</code>, where\r\n     * <code>m</code> must be an affine matrix.\r\n     * This function performs fewer allocations and arithmetic operations.\r\n     *\r\n     * @param {Matrix4} matrix The affine matrix on the left-hand side.\r\n     * @param {Number} scale The uniform scale on the right-hand side.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     *\r\n     * @example\r\n     * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromUniformScale(scale), m);\r\n     * Cesium.Matrix4.multiplyByUniformScale(m, scale, m);\r\n     *\r\n     * @see Matrix4.fromUniformScale\r\n     * @see Matrix4.multiplyByScale\r\n     */\r\n    Matrix4.multiplyByUniformScale = function(matrix, scale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.number('scale', scale);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        uniformScaleScratch.x = scale;\r\n        uniformScaleScratch.y = scale;\r\n        uniformScaleScratch.z = scale;\r\n        return Matrix4.multiplyByScale(matrix, uniformScaleScratch, result);\r\n    };\r\n\r\n    /**\r\n     * Multiplies an affine transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)\r\n     * by an implicit non-uniform scale matrix.  This is an optimization\r\n     * for <code>Matrix4.multiply(m, Matrix4.fromUniformScale(scale), m);</code>, where\r\n     * <code>m</code> must be an affine matrix.\r\n     * This function performs fewer allocations and arithmetic operations.\r\n     *\r\n     * @param {Matrix4} matrix The affine matrix on the left-hand side.\r\n     * @param {Cartesian3} scale The non-uniform scale on the right-hand side.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     *\r\n     * @example\r\n     * // Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromScale(scale), m);\r\n     * Cesium.Matrix4.multiplyByScale(m, scale, m);\r\n     *\r\n     * @see Matrix4.fromScale\r\n     * @see Matrix4.multiplyByUniformScale\r\n     */\r\n    Matrix4.multiplyByScale = function(matrix, scale, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('scale', scale);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var scaleX = scale.x;\r\n        var scaleY = scale.y;\r\n        var scaleZ = scale.z;\r\n\r\n        // Faster than Cartesian3.equals\r\n        if ((scaleX === 1.0) && (scaleY === 1.0) && (scaleZ === 1.0)) {\r\n            return Matrix4.clone(matrix, result);\r\n        }\r\n\r\n        result[0] = scaleX * matrix[0];\r\n        result[1] = scaleX * matrix[1];\r\n        result[2] = scaleX * matrix[2];\r\n        result[3] = 0.0;\r\n        result[4] = scaleY * matrix[4];\r\n        result[5] = scaleY * matrix[5];\r\n        result[6] = scaleY * matrix[6];\r\n        result[7] = 0.0;\r\n        result[8] = scaleZ * matrix[8];\r\n        result[9] = scaleZ * matrix[9];\r\n        result[10] = scaleZ * matrix[10];\r\n        result[11] = 0.0;\r\n        result[12] = matrix[12];\r\n        result[13] = matrix[13];\r\n        result[14] = matrix[14];\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a column vector.\r\n     *\r\n     * @param {Matrix4} matrix The matrix.\r\n     * @param {Cartesian4} cartesian The vector.\r\n     * @param {Cartesian4} result The object onto which to store the result.\r\n     * @returns {Cartesian4} The modified result parameter.\r\n     */\r\n    Matrix4.multiplyByVector = function(matrix, cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var vX = cartesian.x;\r\n        var vY = cartesian.y;\r\n        var vZ = cartesian.z;\r\n        var vW = cartesian.w;\r\n\r\n        var x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12] * vW;\r\n        var y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13] * vW;\r\n        var z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14] * vW;\r\n        var w = matrix[3] * vX + matrix[7] * vY + matrix[11] * vZ + matrix[15] * vW;\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        result.w = w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a {@link Cartesian3}.  This is equivalent to calling {@link Matrix4.multiplyByVector}\r\n     * with a {@link Cartesian4} with a <code>w</code> component of zero.\r\n     *\r\n     * @param {Matrix4} matrix The matrix.\r\n     * @param {Cartesian3} cartesian The point.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     *\r\n     * @example\r\n     * var p = new Cesium.Cartesian3(1.0, 2.0, 3.0);\r\n     * var result = Cesium.Matrix4.multiplyByPointAsVector(matrix, p, new Cesium.Cartesian3());\r\n     * // A shortcut for\r\n     * //   Cartesian3 p = ...\r\n     * //   Cesium.Matrix4.multiplyByVector(matrix, new Cesium.Cartesian4(p.x, p.y, p.z, 0.0), result);\r\n     */\r\n    Matrix4.multiplyByPointAsVector = function(matrix, cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var vX = cartesian.x;\r\n        var vY = cartesian.y;\r\n        var vZ = cartesian.z;\r\n\r\n        var x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ;\r\n        var y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ;\r\n        var z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ;\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a {@link Cartesian3}. This is equivalent to calling {@link Matrix4.multiplyByVector}\r\n     * with a {@link Cartesian4} with a <code>w</code> component of 1, but returns a {@link Cartesian3} instead of a {@link Cartesian4}.\r\n     *\r\n     * @param {Matrix4} matrix The matrix.\r\n     * @param {Cartesian3} cartesian The point.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     *\r\n     * @example\r\n     * var p = new Cesium.Cartesian3(1.0, 2.0, 3.0);\r\n     * var result = Cesium.Matrix4.multiplyByPoint(matrix, p, new Cesium.Cartesian3());\r\n     */\r\n    Matrix4.multiplyByPoint = function(matrix, cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var vX = cartesian.x;\r\n        var vY = cartesian.y;\r\n        var vZ = cartesian.z;\r\n\r\n        var x = matrix[0] * vX + matrix[4] * vY + matrix[8] * vZ + matrix[12];\r\n        var y = matrix[1] * vX + matrix[5] * vY + matrix[9] * vZ + matrix[13];\r\n        var z = matrix[2] * vX + matrix[6] * vY + matrix[10] * vZ + matrix[14];\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the product of a matrix and a scalar.\r\n     *\r\n     * @param {Matrix4} matrix The matrix.\r\n     * @param {Number} scalar The number to multiply by.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * //create a Matrix4 instance which is a scaled version of the supplied Matrix4\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * var a = Cesium.Matrix4.multiplyByScalar(m, -2, new Cesium.Matrix4());\r\n     *\r\n     * // m remains the same\r\n     * // a = [-20.0, -22.0, -24.0, -26.0]\r\n     * //     [-28.0, -30.0, -32.0, -34.0]\r\n     * //     [-36.0, -38.0, -40.0, -42.0]\r\n     * //     [-44.0, -46.0, -48.0, -50.0]\r\n     */\r\n    Matrix4.multiplyByScalar = function(matrix, scalar, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.number('scalar', scalar);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = matrix[0] * scalar;\r\n        result[1] = matrix[1] * scalar;\r\n        result[2] = matrix[2] * scalar;\r\n        result[3] = matrix[3] * scalar;\r\n        result[4] = matrix[4] * scalar;\r\n        result[5] = matrix[5] * scalar;\r\n        result[6] = matrix[6] * scalar;\r\n        result[7] = matrix[7] * scalar;\r\n        result[8] = matrix[8] * scalar;\r\n        result[9] = matrix[9] * scalar;\r\n        result[10] = matrix[10] * scalar;\r\n        result[11] = matrix[11] * scalar;\r\n        result[12] = matrix[12] * scalar;\r\n        result[13] = matrix[13] * scalar;\r\n        result[14] = matrix[14] * scalar;\r\n        result[15] = matrix[15] * scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a negated copy of the provided matrix.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to negate.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * //create a new Matrix4 instance which is a negation of a Matrix4\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * var a = Cesium.Matrix4.negate(m, new Cesium.Matrix4());\r\n     *\r\n     * // m remains the same\r\n     * // a = [-10.0, -11.0, -12.0, -13.0]\r\n     * //     [-14.0, -15.0, -16.0, -17.0]\r\n     * //     [-18.0, -19.0, -20.0, -21.0]\r\n     * //     [-22.0, -23.0, -24.0, -25.0]\r\n     */\r\n    Matrix4.negate = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = -matrix[0];\r\n        result[1] = -matrix[1];\r\n        result[2] = -matrix[2];\r\n        result[3] = -matrix[3];\r\n        result[4] = -matrix[4];\r\n        result[5] = -matrix[5];\r\n        result[6] = -matrix[6];\r\n        result[7] = -matrix[7];\r\n        result[8] = -matrix[8];\r\n        result[9] = -matrix[9];\r\n        result[10] = -matrix[10];\r\n        result[11] = -matrix[11];\r\n        result[12] = -matrix[12];\r\n        result[13] = -matrix[13];\r\n        result[14] = -matrix[14];\r\n        result[15] = -matrix[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the transpose of the provided matrix.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to transpose.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @example\r\n     * //returns transpose of a Matrix4\r\n     * // m = [10.0, 11.0, 12.0, 13.0]\r\n     * //     [14.0, 15.0, 16.0, 17.0]\r\n     * //     [18.0, 19.0, 20.0, 21.0]\r\n     * //     [22.0, 23.0, 24.0, 25.0]\r\n     *\r\n     * var a = Cesium.Matrix4.transpose(m, new Cesium.Matrix4());\r\n     *\r\n     * // m remains the same\r\n     * // a = [10.0, 14.0, 18.0, 22.0]\r\n     * //     [11.0, 15.0, 19.0, 23.0]\r\n     * //     [12.0, 16.0, 20.0, 24.0]\r\n     * //     [13.0, 17.0, 21.0, 25.0]\r\n     */\r\n    Matrix4.transpose = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var matrix1 = matrix[1];\r\n        var matrix2 = matrix[2];\r\n        var matrix3 = matrix[3];\r\n        var matrix6 = matrix[6];\r\n        var matrix7 = matrix[7];\r\n        var matrix11 = matrix[11];\r\n\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[4];\r\n        result[2] = matrix[8];\r\n        result[3] = matrix[12];\r\n        result[4] = matrix1;\r\n        result[5] = matrix[5];\r\n        result[6] = matrix[9];\r\n        result[7] = matrix[13];\r\n        result[8] = matrix2;\r\n        result[9] = matrix6;\r\n        result[10] = matrix[10];\r\n        result[11] = matrix[14];\r\n        result[12] = matrix3;\r\n        result[13] = matrix7;\r\n        result[14] = matrix11;\r\n        result[15] = matrix[15];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a matrix, which contains the absolute (unsigned) values of the provided matrix's elements.\r\n     *\r\n     * @param {Matrix4} matrix The matrix with signed elements.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.abs = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = Math.abs(matrix[0]);\r\n        result[1] = Math.abs(matrix[1]);\r\n        result[2] = Math.abs(matrix[2]);\r\n        result[3] = Math.abs(matrix[3]);\r\n        result[4] = Math.abs(matrix[4]);\r\n        result[5] = Math.abs(matrix[5]);\r\n        result[6] = Math.abs(matrix[6]);\r\n        result[7] = Math.abs(matrix[7]);\r\n        result[8] = Math.abs(matrix[8]);\r\n        result[9] = Math.abs(matrix[9]);\r\n        result[10] = Math.abs(matrix[10]);\r\n        result[11] = Math.abs(matrix[11]);\r\n        result[12] = Math.abs(matrix[12]);\r\n        result[13] = Math.abs(matrix[13]);\r\n        result[14] = Math.abs(matrix[14]);\r\n        result[15] = Math.abs(matrix[15]);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided matrices componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix4} [left] The first matrix.\r\n     * @param {Matrix4} [right] The second matrix.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     *\r\n     * @example\r\n     * //compares two Matrix4 instances\r\n     *\r\n     * // a = [10.0, 14.0, 18.0, 22.0]\r\n     * //     [11.0, 15.0, 19.0, 23.0]\r\n     * //     [12.0, 16.0, 20.0, 24.0]\r\n     * //     [13.0, 17.0, 21.0, 25.0]\r\n     *\r\n     * // b = [10.0, 14.0, 18.0, 22.0]\r\n     * //     [11.0, 15.0, 19.0, 23.0]\r\n     * //     [12.0, 16.0, 20.0, 24.0]\r\n     * //     [13.0, 17.0, 21.0, 25.0]\r\n     *\r\n     * if(Cesium.Matrix4.equals(a,b)) {\r\n     *      console.log(\"Both matrices are equal\");\r\n     * } else {\r\n     *      console.log(\"They are not equal\");\r\n     * }\r\n     *\r\n     * //Prints \"Both matrices are equal\" on the console\r\n     */\r\n    Matrix4.equals = function(left, right) {\r\n        // Given that most matrices will be transformation matrices, the elements\r\n        // are tested in order such that the test is likely to fail as early\r\n        // as possible.  I _think_ this is just as friendly to the L1 cache\r\n        // as testing in index order.  It is certainty faster in practice.\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                // Translation\r\n                left[12] === right[12] &&\r\n                left[13] === right[13] &&\r\n                left[14] === right[14] &&\r\n\r\n                // Rotation/scale\r\n                left[0] === right[0] &&\r\n                left[1] === right[1] &&\r\n                left[2] === right[2] &&\r\n                left[4] === right[4] &&\r\n                left[5] === right[5] &&\r\n                left[6] === right[6] &&\r\n                left[8] === right[8] &&\r\n                left[9] === right[9] &&\r\n                left[10] === right[10] &&\r\n\r\n                // Bottom row\r\n                left[3] === right[3] &&\r\n                left[7] === right[7] &&\r\n                left[11] === right[11] &&\r\n                left[15] === right[15]);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided matrices componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix4} [left] The first matrix.\r\n     * @param {Matrix4} [right] The second matrix.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     *\r\n     * @example\r\n     * //compares two Matrix4 instances\r\n     *\r\n     * // a = [10.5, 14.5, 18.5, 22.5]\r\n     * //     [11.5, 15.5, 19.5, 23.5]\r\n     * //     [12.5, 16.5, 20.5, 24.5]\r\n     * //     [13.5, 17.5, 21.5, 25.5]\r\n     *\r\n     * // b = [10.0, 14.0, 18.0, 22.0]\r\n     * //     [11.0, 15.0, 19.0, 23.0]\r\n     * //     [12.0, 16.0, 20.0, 24.0]\r\n     * //     [13.0, 17.0, 21.0, 25.0]\r\n     *\r\n     * if(Cesium.Matrix4.equalsEpsilon(a,b,0.1)){\r\n     *      console.log(\"Difference between both the matrices is less than 0.1\");\r\n     * } else {\r\n     *      console.log(\"Difference between both the matrices is not less than 0.1\");\r\n     * }\r\n     *\r\n     * //Prints \"Difference between both the matrices is not less than 0.1\" on the console\r\n     */\r\n    Matrix4.equalsEpsilon = function(left, right, epsilon) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('epsilon', epsilon);\r\n        //>>includeEnd('debug');\r\n\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                Math.abs(left[0] - right[0]) <= epsilon &&\r\n                Math.abs(left[1] - right[1]) <= epsilon &&\r\n                Math.abs(left[2] - right[2]) <= epsilon &&\r\n                Math.abs(left[3] - right[3]) <= epsilon &&\r\n                Math.abs(left[4] - right[4]) <= epsilon &&\r\n                Math.abs(left[5] - right[5]) <= epsilon &&\r\n                Math.abs(left[6] - right[6]) <= epsilon &&\r\n                Math.abs(left[7] - right[7]) <= epsilon &&\r\n                Math.abs(left[8] - right[8]) <= epsilon &&\r\n                Math.abs(left[9] - right[9]) <= epsilon &&\r\n                Math.abs(left[10] - right[10]) <= epsilon &&\r\n                Math.abs(left[11] - right[11]) <= epsilon &&\r\n                Math.abs(left[12] - right[12]) <= epsilon &&\r\n                Math.abs(left[13] - right[13]) <= epsilon &&\r\n                Math.abs(left[14] - right[14]) <= epsilon &&\r\n                Math.abs(left[15] - right[15]) <= epsilon);\r\n    };\r\n\r\n    /**\r\n     * Gets the translation portion of the provided matrix, assuming the matrix is a affine transformation matrix.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Matrix4.getTranslation = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = matrix[12];\r\n        result.y = matrix[13];\r\n        result.z = matrix[14];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Gets the upper left 3x3 rotation matrix of the provided matrix, assuming the matrix is an affine transformation matrix.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to use.\r\n     * @param {Matrix3} result The object onto which to store the result.\r\n     * @returns {Matrix3} The modified result parameter.\r\n     *\r\n     * @example\r\n     * // returns a Matrix3 instance from a Matrix4 instance\r\n     *\r\n     * // m = [10.0, 14.0, 18.0, 22.0]\r\n     * //     [11.0, 15.0, 19.0, 23.0]\r\n     * //     [12.0, 16.0, 20.0, 24.0]\r\n     * //     [13.0, 17.0, 21.0, 25.0]\r\n     *\r\n     * var b = new Cesium.Matrix3();\r\n     * Cesium.Matrix4.getMatrix3(m,b);\r\n     *\r\n     * // b = [10.0, 14.0, 18.0]\r\n     * //     [11.0, 15.0, 19.0]\r\n     * //     [12.0, 16.0, 20.0]\r\n     */\r\n    Matrix4.getMatrix3 = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result[0] = matrix[0];\r\n        result[1] = matrix[1];\r\n        result[2] = matrix[2];\r\n        result[3] = matrix[4];\r\n        result[4] = matrix[5];\r\n        result[5] = matrix[6];\r\n        result[6] = matrix[8];\r\n        result[7] = matrix[9];\r\n        result[8] = matrix[10];\r\n        return result;\r\n    };\r\n\r\n    var scratchInverseRotation = new Matrix3();\r\n    var scratchMatrix3Zero = new Matrix3();\r\n    var scratchBottomRow = new Cartesian4();\r\n    var scratchExpectedBottomRow = new Cartesian4(0.0, 0.0, 0.0, 1.0);\r\n\r\n    /**\r\n     * Computes the inverse of the provided matrix using Cramers Rule.\r\n     * If the determinant is zero, the matrix can not be inverted, and an exception is thrown.\r\n     * If the matrix is an affine transformation matrix, it is more efficient\r\n     * to invert it with {@link Matrix4.inverseTransformation}.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to invert.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     *\r\n     * @exception {RuntimeError} matrix is not invertible because its determinate is zero.\r\n     */\r\n    Matrix4.inverse = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n        //\r\n        // Ported from:\r\n        //   ftp://download.intel.com/design/PentiumIII/sml/24504301.pdf\r\n        //\r\n        var src0 = matrix[0];\r\n        var src1 = matrix[4];\r\n        var src2 = matrix[8];\r\n        var src3 = matrix[12];\r\n        var src4 = matrix[1];\r\n        var src5 = matrix[5];\r\n        var src6 = matrix[9];\r\n        var src7 = matrix[13];\r\n        var src8 = matrix[2];\r\n        var src9 = matrix[6];\r\n        var src10 = matrix[10];\r\n        var src11 = matrix[14];\r\n        var src12 = matrix[3];\r\n        var src13 = matrix[7];\r\n        var src14 = matrix[11];\r\n        var src15 = matrix[15];\r\n\r\n        // calculate pairs for first 8 elements (cofactors)\r\n        var tmp0 = src10 * src15;\r\n        var tmp1 = src11 * src14;\r\n        var tmp2 = src9 * src15;\r\n        var tmp3 = src11 * src13;\r\n        var tmp4 = src9 * src14;\r\n        var tmp5 = src10 * src13;\r\n        var tmp6 = src8 * src15;\r\n        var tmp7 = src11 * src12;\r\n        var tmp8 = src8 * src14;\r\n        var tmp9 = src10 * src12;\r\n        var tmp10 = src8 * src13;\r\n        var tmp11 = src9 * src12;\r\n\r\n        // calculate first 8 elements (cofactors)\r\n        var dst0 = (tmp0 * src5 + tmp3 * src6 + tmp4 * src7) - (tmp1 * src5 + tmp2 * src6 + tmp5 * src7);\r\n        var dst1 = (tmp1 * src4 + tmp6 * src6 + tmp9 * src7) - (tmp0 * src4 + tmp7 * src6 + tmp8 * src7);\r\n        var dst2 = (tmp2 * src4 + tmp7 * src5 + tmp10 * src7) - (tmp3 * src4 + tmp6 * src5 + tmp11 * src7);\r\n        var dst3 = (tmp5 * src4 + tmp8 * src5 + tmp11 * src6) - (tmp4 * src4 + tmp9 * src5 + tmp10 * src6);\r\n        var dst4 = (tmp1 * src1 + tmp2 * src2 + tmp5 * src3) - (tmp0 * src1 + tmp3 * src2 + tmp4 * src3);\r\n        var dst5 = (tmp0 * src0 + tmp7 * src2 + tmp8 * src3) - (tmp1 * src0 + tmp6 * src2 + tmp9 * src3);\r\n        var dst6 = (tmp3 * src0 + tmp6 * src1 + tmp11 * src3) - (tmp2 * src0 + tmp7 * src1 + tmp10 * src3);\r\n        var dst7 = (tmp4 * src0 + tmp9 * src1 + tmp10 * src2) - (tmp5 * src0 + tmp8 * src1 + tmp11 * src2);\r\n\r\n        // calculate pairs for second 8 elements (cofactors)\r\n        tmp0 = src2 * src7;\r\n        tmp1 = src3 * src6;\r\n        tmp2 = src1 * src7;\r\n        tmp3 = src3 * src5;\r\n        tmp4 = src1 * src6;\r\n        tmp5 = src2 * src5;\r\n        tmp6 = src0 * src7;\r\n        tmp7 = src3 * src4;\r\n        tmp8 = src0 * src6;\r\n        tmp9 = src2 * src4;\r\n        tmp10 = src0 * src5;\r\n        tmp11 = src1 * src4;\r\n\r\n        // calculate second 8 elements (cofactors)\r\n        var dst8 = (tmp0 * src13 + tmp3 * src14 + tmp4 * src15) - (tmp1 * src13 + tmp2 * src14 + tmp5 * src15);\r\n        var dst9 = (tmp1 * src12 + tmp6 * src14 + tmp9 * src15) - (tmp0 * src12 + tmp7 * src14 + tmp8 * src15);\r\n        var dst10 = (tmp2 * src12 + tmp7 * src13 + tmp10 * src15) - (tmp3 * src12 + tmp6 * src13 + tmp11 * src15);\r\n        var dst11 = (tmp5 * src12 + tmp8 * src13 + tmp11 * src14) - (tmp4 * src12 + tmp9 * src13 + tmp10 * src14);\r\n        var dst12 = (tmp2 * src10 + tmp5 * src11 + tmp1 * src9) - (tmp4 * src11 + tmp0 * src9 + tmp3 * src10);\r\n        var dst13 = (tmp8 * src11 + tmp0 * src8 + tmp7 * src10) - (tmp6 * src10 + tmp9 * src11 + tmp1 * src8);\r\n        var dst14 = (tmp6 * src9 + tmp11 * src11 + tmp3 * src8) - (tmp10 * src11 + tmp2 * src8 + tmp7 * src9);\r\n        var dst15 = (tmp10 * src10 + tmp4 * src8 + tmp9 * src9) - (tmp8 * src9 + tmp11 * src10 + tmp5 * src8);\r\n\r\n        // calculate determinant\r\n        var det = src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;\r\n\r\n        if (Math.abs(det) < CesiumMath.EPSILON21) {\r\n            // Special case for a zero scale matrix that can occur, for example,\r\n            // when a model's node has a [0, 0, 0] scale.\r\n            if (Matrix3.equalsEpsilon(Matrix4.getMatrix3(matrix, scratchInverseRotation), scratchMatrix3Zero, CesiumMath.EPSILON7) &&\r\n                Cartesian4.equals(Matrix4.getRow(matrix, 3, scratchBottomRow), scratchExpectedBottomRow)) {\r\n\r\n                result[0] = 0.0;\r\n                result[1] = 0.0;\r\n                result[2] = 0.0;\r\n                result[3] = 0.0;\r\n                result[4] = 0.0;\r\n                result[5] = 0.0;\r\n                result[6] = 0.0;\r\n                result[7] = 0.0;\r\n                result[8] = 0.0;\r\n                result[9] = 0.0;\r\n                result[10] = 0.0;\r\n                result[11] = 0.0;\r\n                result[12] = -matrix[12];\r\n                result[13] = -matrix[13];\r\n                result[14] = -matrix[14];\r\n                result[15] = 1.0;\r\n                return result;\r\n            }\r\n\r\n            throw new RuntimeError('matrix is not invertible because its determinate is zero.');\r\n        }\r\n\r\n        // calculate matrix inverse\r\n        det = 1.0 / det;\r\n\r\n        result[0] = dst0 * det;\r\n        result[1] = dst1 * det;\r\n        result[2] = dst2 * det;\r\n        result[3] = dst3 * det;\r\n        result[4] = dst4 * det;\r\n        result[5] = dst5 * det;\r\n        result[6] = dst6 * det;\r\n        result[7] = dst7 * det;\r\n        result[8] = dst8 * det;\r\n        result[9] = dst9 * det;\r\n        result[10] = dst10 * det;\r\n        result[11] = dst11 * det;\r\n        result[12] = dst12 * det;\r\n        result[13] = dst13 * det;\r\n        result[14] = dst14 * det;\r\n        result[15] = dst15 * det;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the inverse of the provided matrix assuming it is\r\n     * an affine transformation matrix, where the upper left 3x3 elements\r\n     * are a rotation matrix, and the upper three elements in the fourth\r\n     * column are the translation.  The bottom row is assumed to be [0, 0, 0, 1].\r\n     * The matrix is not verified to be in the proper form.\r\n     * This method is faster than computing the inverse for a general 4x4\r\n     * matrix using {@link Matrix4.inverse}.\r\n     *\r\n     * @param {Matrix4} matrix The matrix to invert.\r\n     * @param {Matrix4} result The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter.\r\n     */\r\n    Matrix4.inverseTransformation = function(matrix, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('matrix', matrix);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        //This function is an optimized version of the below 4 lines.\r\n        //var rT = Matrix3.transpose(Matrix4.getMatrix3(matrix));\r\n        //var rTN = Matrix3.negate(rT);\r\n        //var rTT = Matrix3.multiplyByVector(rTN, Matrix4.getTranslation(matrix));\r\n        //return Matrix4.fromRotationTranslation(rT, rTT, result);\r\n\r\n        var matrix0 = matrix[0];\r\n        var matrix1 = matrix[1];\r\n        var matrix2 = matrix[2];\r\n        var matrix4 = matrix[4];\r\n        var matrix5 = matrix[5];\r\n        var matrix6 = matrix[6];\r\n        var matrix8 = matrix[8];\r\n        var matrix9 = matrix[9];\r\n        var matrix10 = matrix[10];\r\n\r\n        var vX = matrix[12];\r\n        var vY = matrix[13];\r\n        var vZ = matrix[14];\r\n\r\n        var x = -matrix0 * vX - matrix1 * vY - matrix2 * vZ;\r\n        var y = -matrix4 * vX - matrix5 * vY - matrix6 * vZ;\r\n        var z = -matrix8 * vX - matrix9 * vY - matrix10 * vZ;\r\n\r\n        result[0] = matrix0;\r\n        result[1] = matrix4;\r\n        result[2] = matrix8;\r\n        result[3] = 0.0;\r\n        result[4] = matrix1;\r\n        result[5] = matrix5;\r\n        result[6] = matrix9;\r\n        result[7] = 0.0;\r\n        result[8] = matrix2;\r\n        result[9] = matrix6;\r\n        result[10] = matrix10;\r\n        result[11] = 0.0;\r\n        result[12] = x;\r\n        result[13] = y;\r\n        result[14] = z;\r\n        result[15] = 1.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * An immutable Matrix4 instance initialized to the identity matrix.\r\n     *\r\n     * @type {Matrix4}\r\n     * @constant\r\n     */\r\n    Matrix4.IDENTITY = Object.freeze(new Matrix4(1.0, 0.0, 0.0, 0.0,\r\n                                                0.0, 1.0, 0.0, 0.0,\r\n                                                0.0, 0.0, 1.0, 0.0,\r\n                                                0.0, 0.0, 0.0, 1.0));\r\n\r\n    /**\r\n     * An immutable Matrix4 instance initialized to the zero matrix.\r\n     *\r\n     * @type {Matrix4}\r\n     * @constant\r\n     */\r\n    Matrix4.ZERO = Object.freeze(new Matrix4(0.0, 0.0, 0.0, 0.0,\r\n                                            0.0, 0.0, 0.0, 0.0,\r\n                                            0.0, 0.0, 0.0, 0.0,\r\n                                            0.0, 0.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * The index into Matrix4 for column 0, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN0ROW0 = 0;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 0, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN0ROW1 = 1;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 0, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN0ROW2 = 2;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 0, row 3.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN0ROW3 = 3;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 1, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN1ROW0 = 4;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 1, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN1ROW1 = 5;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 1, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN1ROW2 = 6;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 1, row 3.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN1ROW3 = 7;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 2, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN2ROW0 = 8;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 2, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN2ROW1 = 9;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 2, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN2ROW2 = 10;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 2, row 3.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN2ROW3 = 11;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 3, row 0.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN3ROW0 = 12;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 3, row 1.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN3ROW1 = 13;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 3, row 2.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN3ROW2 = 14;\r\n\r\n    /**\r\n     * The index into Matrix4 for column 3, row 3.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    Matrix4.COLUMN3ROW3 = 15;\r\n\r\n    Object.defineProperties(Matrix4.prototype, {\r\n        /**\r\n         * Gets the number of items in the collection.\r\n         * @memberof Matrix4.prototype\r\n         *\r\n         * @type {Number}\r\n         */\r\n        length : {\r\n            get : function() {\r\n                return Matrix4.packedLength;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Duplicates the provided Matrix4 instance.\r\n     *\r\n     * @param {Matrix4} [result] The object onto which to store the result.\r\n     * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided.\r\n     */\r\n    Matrix4.prototype.clone = function(result) {\r\n        return Matrix4.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this matrix to the provided matrix componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix4} [right] The right hand side matrix.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    Matrix4.prototype.equals = function(right) {\r\n        return Matrix4.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Matrix4.equalsArray = function(matrix, array, offset) {\r\n        return matrix[0] === array[offset] &&\r\n               matrix[1] === array[offset + 1] &&\r\n               matrix[2] === array[offset + 2] &&\r\n               matrix[3] === array[offset + 3] &&\r\n               matrix[4] === array[offset + 4] &&\r\n               matrix[5] === array[offset + 5] &&\r\n               matrix[6] === array[offset + 6] &&\r\n               matrix[7] === array[offset + 7] &&\r\n               matrix[8] === array[offset + 8] &&\r\n               matrix[9] === array[offset + 9] &&\r\n               matrix[10] === array[offset + 10] &&\r\n               matrix[11] === array[offset + 11] &&\r\n               matrix[12] === array[offset + 12] &&\r\n               matrix[13] === array[offset + 13] &&\r\n               matrix[14] === array[offset + 14] &&\r\n               matrix[15] === array[offset + 15];\r\n    };\r\n\r\n    /**\r\n     * Compares this matrix to the provided matrix componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Matrix4} [right] The right hand side matrix.\r\n     * @param {Number} epsilon The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Matrix4.prototype.equalsEpsilon = function(right, epsilon) {\r\n        return Matrix4.equalsEpsilon(this, right, epsilon);\r\n    };\r\n\r\n    /**\r\n     * Computes a string representing this Matrix with each row being\r\n     * on a separate line and in the format '(column0, column1, column2, column3)'.\r\n     *\r\n     * @returns {String} A string representing the provided Matrix with each row being on a separate line and in the format '(column0, column1, column2, column3)'.\r\n     */\r\n    Matrix4.prototype.toString = function() {\r\n        return '(' + this[0] + ', ' + this[4] + ', ' + this[8] + ', ' + this[12] + ')\\n' +\r\n               '(' + this[1] + ', ' + this[5] + ', ' + this[9] + ', ' + this[13] + ')\\n' +\r\n               '(' + this[2] + ', ' + this[6] + ', ' + this[10] + ', ' + this[14] + ')\\n' +\r\n               '(' + this[3] + ', ' + this[7] + ', ' + this[11] + ', ' + this[15] + ')';\r\n    };\r\nexport default Matrix4;\r\n"],"names":["defaultValue","Check","defined","Cartesian3","CesiumMath","DeveloperError","scratchColumn","scratchScale","RuntimeError"],"mappings":"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AAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACvF,QAAQ,IAAI,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACvF,QAAQ,IAAI,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACvF;IACA,QAAQ,IAAI,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACvF,QAAQ,IAAI,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACvF,QAAQ,IAAI,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACvF;IACA,QAAQ,IAAI,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACvF,QAAQ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AM,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,QAAQ,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1C,QAAQ,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1C,QAAQ,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1C,QAAQ,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1C,QAAQ,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAA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"}