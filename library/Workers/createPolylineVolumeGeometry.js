/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2017 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["./when-4ca4e419","./Check-430b3551","./defineProperties-163ddb68","./Cartesian3-32451e63","./Ellipsoid-d2aa3b12","./Transforms-7b04d7e0","./Matrix4-33464f2b","./RuntimeError-443472b0","./Cartesian2-f49a1383","./FeatureDetection-0d4fee13","./WebGLConstants-2ddfa2f9","./ComponentDatatype-329b9462","./GeometryAttribute-b8faa946","./GeometryAttributes-614c63f8","./AttributeCompression-7809eba4","./GeometryPipeline-f9bdb2cf","./EncodedCartesian3-63b18b5e","./IndexDatatype-153fdd7f","./IntersectionTests-15d018f5","./Plane-84b14a0a","./VertexFormat-a4fe3a21","./arrayRemoveDuplicates-c3fd0b84","./BoundingRectangle-c080f887","./EllipsoidTangentPlane-3967708f","./EllipsoidRhumbLine-c004db91","./PolygonPipeline-d25dad97","./PolylineVolumeGeometryLibrary-06ac58f3","./EllipsoidGeodesic-c57b5e5c","./PolylinePipeline-4ac94627"],(function(e,t,r,i,n,a,o,l,s,p,d,u,c,y,m,f,g,h,v,b,E,P,_,k,C,w,D,F,L){"use strict";function V(a){var o=(a=e.defaultValue(a,e.defaultValue.EMPTY_OBJECT)).polylinePositions,l=a.shapePositions;if(!e.defined(o))throw new t.DeveloperError("options.polylinePositions is required.");if(!e.defined(l))throw new t.DeveloperError("options.shapePositions is required.");this._positions=o,this._shape=l,this._ellipsoid=n.Ellipsoid.clone(e.defaultValue(a.ellipsoid,n.Ellipsoid.WGS84)),this._cornerType=e.defaultValue(a.cornerType,D.CornerType.ROUNDED),this._vertexFormat=E.VertexFormat.clone(e.defaultValue(a.vertexFormat,E.VertexFormat.DEFAULT)),this._granularity=e.defaultValue(a.granularity,r.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry";var p=1+o.length*i.Cartesian3.packedLength;p+=1+l.length*s.Cartesian2.packedLength,this.packedLength=p+n.Ellipsoid.packedLength+E.VertexFormat.packedLength+2}V.pack=function(r,a,o){if(!e.defined(r))throw new t.DeveloperError("value is required");if(!e.defined(a))throw new t.DeveloperError("array is required");var l;o=e.defaultValue(o,0);var p=r._positions,d=p.length;for(a[o++]=d,l=0;l<d;++l,o+=i.Cartesian3.packedLength)i.Cartesian3.pack(p[l],a,o);var u=r._shape;for(d=u.length,a[o++]=d,l=0;l<d;++l,o+=s.Cartesian2.packedLength)s.Cartesian2.pack(u[l],a,o);return n.Ellipsoid.pack(r._ellipsoid,a,o),o+=n.Ellipsoid.packedLength,E.VertexFormat.pack(r._vertexFormat,a,o),o+=E.VertexFormat.packedLength,a[o++]=r._cornerType,a[o]=r._granularity,a};var T=n.Ellipsoid.clone(n.Ellipsoid.UNIT_SPHERE),x=new E.VertexFormat,G={polylinePositions:void 0,shapePositions:void 0,ellipsoid:T,vertexFormat:x,cornerType:void 0,granularity:void 0};V.unpack=function(r,a,o){if(!e.defined(r))throw new t.DeveloperError("array is required");var l;a=e.defaultValue(a,0);var p=r[a++],d=new Array(p);for(l=0;l<p;++l,a+=i.Cartesian3.packedLength)d[l]=i.Cartesian3.unpack(r,a);p=r[a++];var u=new Array(p);for(l=0;l<p;++l,a+=s.Cartesian2.packedLength)u[l]=s.Cartesian2.unpack(r,a);var c=n.Ellipsoid.unpack(r,a,T);a+=n.Ellipsoid.packedLength;var y=E.VertexFormat.unpack(r,a,x);a+=E.VertexFormat.packedLength;var m=r[a++],f=r[a];return e.defined(o)?(o._positions=d,o._shape=u,o._ellipsoid=n.Ellipsoid.clone(c,o._ellipsoid),o._vertexFormat=E.VertexFormat.clone(y,o._vertexFormat),o._cornerType=m,o._granularity=f,o):(G.polylinePositions=d,G.shapePositions=u,G.cornerType=m,G.granularity=f,new V(G))};var A=new _.BoundingRectangle;return V.createGeometry=function(e){var t=e._positions,r=P.arrayRemoveDuplicates(t,i.Cartesian3.equalsEpsilon),n=e._shape;if(n=D.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(n),!(r.length<2||n.length<3)){w.PolygonPipeline.computeWindingOrder2D(n)===w.WindingOrder.CLOCKWISE&&n.reverse();var o=_.BoundingRectangle.fromPoints(n,A);return function(e,t,r,i){var n=new y.GeometryAttributes;i.position&&(n.position=new c.GeometryAttribute({componentDatatype:u.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e}));var o,l,s,p,d,m,g=t.length,v=e.length/3,b=(v-2*g)/(2*g),E=w.PolygonPipeline.triangulate(t),P=(b-1)*g*6+2*E.length,_=h.IndexDatatype.createTypedArray(v,P),k=2*g,C=0;for(o=0;o<b-1;o++){for(l=0;l<g-1;l++)m=(s=2*l+o*g*2)+k,d=(p=s+1)+k,_[C++]=p,_[C++]=s,_[C++]=d,_[C++]=d,_[C++]=s,_[C++]=m;d=(p=(s=2*g-2+o*g*2)+1)+k,m=s+k,_[C++]=p,_[C++]=s,_[C++]=d,_[C++]=d,_[C++]=s,_[C++]=m}if(i.st||i.tangent||i.bitangent){var D,F,L=new Float32Array(2*v),V=1/(b-1),T=1/r.height,x=r.height/2,G=0;for(o=0;o<b;o++){for(D=o*V,F=T*(t[0].y+x),L[G++]=D,L[G++]=F,l=1;l<g;l++)F=T*(t[l].y+x),L[G++]=D,L[G++]=F,L[G++]=D,L[G++]=F;F=T*(t[0].y+x),L[G++]=D,L[G++]=F}for(l=0;l<g;l++)D=0,F=T*(t[l].y+x),L[G++]=D,L[G++]=F;for(l=0;l<g;l++)D=(b-1)*V,F=T*(t[l].y+x),L[G++]=D,L[G++]=F;n.st=new c.GeometryAttribute({componentDatatype:u.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(L)})}var A=v-2*g;for(o=0;o<E.length;o+=3){var R=E[o]+A,S=E[o+1]+A,B=E[o+2]+A;_[C++]=R,_[C++]=S,_[C++]=B,_[C++]=B+g,_[C++]=S+g,_[C++]=R+g}var I=new c.Geometry({attributes:n,indices:_,boundingSphere:a.BoundingSphere.fromVertices(e),primitiveType:c.PrimitiveType.TRIANGLES});if(i.normal&&(I=f.GeometryPipeline.computeNormal(I)),i.tangent||i.bitangent){try{I=f.GeometryPipeline.computeTangentAndBitangent(I)}catch(e){a.oneTimeWarning("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}i.tangent||(I.attributes.tangent=void 0),i.bitangent||(I.attributes.bitangent=void 0),i.st||(I.attributes.st=void 0)}return I}(D.PolylineVolumeGeometryLibrary.computePositions(r,n,o,e,!0),n,o,e._vertexFormat)}},function(t,r){return e.defined(r)&&(t=V.unpack(t,r)),t._ellipsoid=n.Ellipsoid.clone(t._ellipsoid),V.createGeometry(t)}}));
