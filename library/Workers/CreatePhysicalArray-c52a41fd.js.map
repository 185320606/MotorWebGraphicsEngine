{"version":3,"file":"CreatePhysicalArray-c52a41fd.js","sources":["../../../../Source/Extension/Source/Worker/CreatePhysicalArray.js"],"sourcesContent":["import defined from '../../../Core/defined.js';\r\nimport Cartesian3 from '../../../Core/Cartesian3.js';\r\nimport Matrix4 from '../../../Core/Matrix4.js';\r\nimport PrimitiveType from '../../../Core/PrimitiveType.js';\r\n\r\nexport default class CreatePhysicalArray {\r\n}\r\n\r\nvar negateRelativeToCenter = new Cartesian3();\r\nvar negateRelativeToCenterMatrix = new Matrix4();\r\nvar relativePosition = new Cartesian3();\r\n\r\nCreatePhysicalArray.createPhysicalArrayFromTerrain = function (physical, lbSpaMgr, relativeToCenter, positions, indices) {\r\n    var hasRelativeToCenter = defined(relativeToCenter);\r\n    relativeToCenter = hasRelativeToCenter ? relativeToCenter : Cartesian3.ZERO;\r\n    Cartesian3.negate(relativeToCenter, negateRelativeToCenter);\r\n    Matrix4.fromTranslation(negateRelativeToCenter, negateRelativeToCenterMatrix);\r\n\r\n    var physicalVertices = new Float32Array(positions.length * 3.0);\r\n    var indexVertices = 0;\r\n    for (var index = 0; index < positions.length; ++index) {\r\n        var position = positions[index];\r\n        Matrix4.multiplyByPoint(negateRelativeToCenterMatrix, position, relativePosition);\r\n\r\n        physicalVertices[indexVertices++] = relativePosition.x;\r\n        physicalVertices[indexVertices++] = relativePosition.y;\r\n        physicalVertices[indexVertices++] = relativePosition.z;\r\n    }\r\n\r\n    var pPrimitive = new physical.LBSpaPrimitive();\r\n    initSpaTrianglePrimitive(pPrimitive, physicalVertices, undefined, indices, undefined);\r\n    var pPrimitiveSpatial = lbSpaMgr.CreateTriangleSpatial(pPrimitive);\r\n\r\n    //serial write\r\n    var pSerialWrite = new physical.LBSpaSerial();\r\n    pSerialWrite.WriteSpatial(pPrimitiveSpatial);\r\n    var physicalArray = new Uint8Array(pSerialWrite.GetBufferSize());\r\n    for (var i = 0; i < physicalArray.length; ++i) {\r\n        physicalArray[i] = pSerialWrite.GetBufferVal(i);\r\n    }\r\n    physical.destroy(pSerialWrite);\r\n    physical.destroy(pPrimitiveSpatial);\r\n\r\n    return physicalArray;\r\n};\r\n\r\nCreatePhysicalArray.createPhysicalArrayFromModel = function (physical, lbSpaMgr, primitiveMode, pPtAry, pBatchIdAry, pIndexAry, pEdgeCheckAry) {\r\n    var pPrimitive = new physical.LBSpaPrimitive();\r\n    initSpaPrimitive(pPrimitive, pPtAry, pBatchIdAry, pIndexAry, pEdgeCheckAry);\r\n\r\n    var pPrimitiveSpatial;\r\n    if (PrimitiveType.LINES === primitiveMode) {\r\n        pPrimitiveSpatial = lbSpaMgr.CreateStepLineSpatial(pPrimitive);\r\n    } else {\r\n        pPrimitiveSpatial = lbSpaMgr.CreateTriangleSpatial(pPrimitive);\r\n    }\r\n\r\n    //serial write\r\n    var pSerialWrite = new physical.LBSpaSerial();\r\n    pSerialWrite.WriteSpatial(pPrimitiveSpatial);\r\n    var physicalArray = new Uint8Array(pSerialWrite.GetBufferSize());\r\n    for (var index = 0; index < physicalArray.length; ++index) {\r\n        physicalArray[index] = pSerialWrite.GetBufferVal(index);\r\n    }\r\n\r\n    physical.destroy(pSerialWrite);\r\n    physical.destroy(pPrimitiveSpatial);\r\n    return physicalArray;\r\n};\r\n\r\nfunction initSpaPrimitive(pPrimitive, pPtAry, pBatchIdAry, pIndexAry, pEdgeCheckAry) {\r\n    var bBatchId = defined(pBatchIdAry);\r\n    pPrimitive.SetPtValNum(pPtAry.length, bBatchId);//true desc have batch\r\n    var i;\r\n    for (i = 0; i < pPtAry.length; ++i) {\r\n        pPrimitive.SetPtValVal(i, pPtAry[i]);\r\n    }\r\n    if (bBatchId) {\r\n        for (i = 0; i < pBatchIdAry.length; ++i) {\r\n            pPrimitive.SetBatchIdVal(i, pBatchIdAry[i]);\r\n        }\r\n    }\r\n    if(defined(pIndexAry)){\r\n        var bEdgeCheck = defined(pEdgeCheckAry);\r\n        pPrimitive.SetIndexNum(pIndexAry.length, bEdgeCheck);//need edge\r\n        for (i = 0; i < pIndexAry.length; ++i) {\r\n            pPrimitive.SetIndexVal(i, pIndexAry[i]);\r\n        }\r\n        if (bEdgeCheck) {\r\n            for (i = 0; i < pEdgeCheckAry.length; ++i) {\r\n                pPrimitive.SetEdgeCheckVal(i, pEdgeCheckAry[i]);\r\n            }\r\n        }\r\n    }\r\n    else{\r\n        pPrimitive.InitIndexByPt();\r\n    }\r\n}\r\n"],"names":["Cartesian3","Matrix4","defined","PrimitiveType"],"mappings":"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"}