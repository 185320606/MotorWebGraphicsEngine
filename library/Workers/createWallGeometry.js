/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2017 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["./when-4ca4e419","./Check-430b3551","./defineProperties-163ddb68","./Cartesian3-32451e63","./Ellipsoid-d2aa3b12","./Transforms-7b04d7e0","./Matrix4-33464f2b","./RuntimeError-443472b0","./Cartesian2-f49a1383","./FeatureDetection-0d4fee13","./WebGLConstants-2ddfa2f9","./ComponentDatatype-329b9462","./GeometryAttribute-b8faa946","./GeometryAttributes-614c63f8","./IndexDatatype-153fdd7f","./IntersectionTests-15d018f5","./Plane-84b14a0a","./VertexFormat-a4fe3a21","./EllipsoidTangentPlane-3967708f","./EllipsoidRhumbLine-c004db91","./PolygonPipeline-d25dad97","./EllipsoidGeodesic-c57b5e5c","./PolylinePipeline-4ac94627","./WallGeometryLibrary-8829821e"],(function(e,t,i,a,r,n,o,s,l,m,d,p,u,f,h,c,g,y,v,C,w,E,b,x){"use strict";var A=new a.Cartesian3,_=new a.Cartesian3,F=new a.Cartesian3,D=new a.Cartesian3,L=new a.Cartesian3,H=new a.Cartesian3,P=new a.Cartesian3,k=new a.Cartesian3;function G(n){var o=(n=e.defaultValue(n,e.defaultValue.EMPTY_OBJECT)).positions,s=n.maximumHeights,l=n.minimumHeights;if(!e.defined(o))throw new t.DeveloperError("options.positions is required.");if(e.defined(s)&&s.length!==o.length)throw new t.DeveloperError("options.positions and options.maximumHeights must have the same length.");if(e.defined(l)&&l.length!==o.length)throw new t.DeveloperError("options.positions and options.minimumHeights must have the same length.");var m=e.defaultValue(n.vertexFormat,y.VertexFormat.DEFAULT),d=e.defaultValue(n.granularity,i.CesiumMath.RADIANS_PER_DEGREE),p=e.defaultValue(n.ellipsoid,r.Ellipsoid.WGS84);this._positions=o,this._minimumHeights=l,this._maximumHeights=s,this._vertexFormat=y.VertexFormat.clone(m),this._granularity=d,this._ellipsoid=r.Ellipsoid.clone(p),this._workerName="createWallGeometry";var u=1+o.length*a.Cartesian3.packedLength+2;e.defined(l)&&(u+=l.length),e.defined(s)&&(u+=s.length),this.packedLength=u+r.Ellipsoid.packedLength+y.VertexFormat.packedLength+1}G.pack=function(i,n,o){if(!e.defined(i))throw new t.DeveloperError("value is required");if(!e.defined(n))throw new t.DeveloperError("array is required");var s;o=e.defaultValue(o,0);var l=i._positions,m=l.length;for(n[o++]=m,s=0;s<m;++s,o+=a.Cartesian3.packedLength)a.Cartesian3.pack(l[s],n,o);var d=i._minimumHeights;if(m=e.defined(d)?d.length:0,n[o++]=m,e.defined(d))for(s=0;s<m;++s)n[o++]=d[s];var p=i._maximumHeights;if(m=e.defined(p)?p.length:0,n[o++]=m,e.defined(p))for(s=0;s<m;++s)n[o++]=p[s];return r.Ellipsoid.pack(i._ellipsoid,n,o),o+=r.Ellipsoid.packedLength,y.VertexFormat.pack(i._vertexFormat,n,o),n[o+=y.VertexFormat.packedLength]=i._granularity,n};var V=r.Ellipsoid.clone(r.Ellipsoid.UNIT_SPHERE),T=new y.VertexFormat,z={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:V,vertexFormat:T,granularity:void 0};return G.unpack=function(i,n,o){if(!e.defined(i))throw new t.DeveloperError("array is required");var s;n=e.defaultValue(n,0);var l,m,d=i[n++],p=new Array(d);for(s=0;s<d;++s,n+=a.Cartesian3.packedLength)p[s]=a.Cartesian3.unpack(i,n);if((d=i[n++])>0)for(l=new Array(d),s=0;s<d;++s)l[s]=i[n++];if((d=i[n++])>0)for(m=new Array(d),s=0;s<d;++s)m[s]=i[n++];var u=r.Ellipsoid.unpack(i,n,V);n+=r.Ellipsoid.packedLength;var f=y.VertexFormat.unpack(i,n,T),h=i[n+=y.VertexFormat.packedLength];return e.defined(o)?(o._positions=p,o._minimumHeights=l,o._maximumHeights=m,o._ellipsoid=r.Ellipsoid.clone(u,o._ellipsoid),o._vertexFormat=y.VertexFormat.clone(f,o._vertexFormat),o._granularity=h,o):(z.positions=p,z.minimumHeights=l,z.maximumHeights=m,z.granularity=h,new G(z))},G.fromConstantHeights=function(i){var a,r,n=(i=e.defaultValue(i,e.defaultValue.EMPTY_OBJECT)).positions;if(!e.defined(n))throw new t.DeveloperError("options.positions is required.");var o=i.minimumHeight,s=i.maximumHeight,l=e.defined(o),m=e.defined(s);if(l||m){var d=n.length;a=l?new Array(d):void 0,r=m?new Array(d):void 0;for(var p=0;p<d;++p)l&&(a[p]=o),m&&(r[p]=s)}return new G({positions:n,maximumHeights:r,minimumHeights:a,ellipsoid:i.ellipsoid,vertexFormat:i.vertexFormat})},G.createGeometry=function(t){var r=t._positions,o=t._minimumHeights,s=t._maximumHeights,l=t._vertexFormat,m=t._granularity,d=t._ellipsoid,c=x.WallGeometryLibrary.computePositions(d,r,s,o,m,!0);if(e.defined(c)){var g,y=c.bottomPositions,v=c.topPositions,C=c.numCorners,w=v.length,E=2*w,b=l.position?new Float64Array(E):void 0,G=l.normal?new Float32Array(E):void 0,V=l.tangent?new Float32Array(E):void 0,T=l.bitangent?new Float32Array(E):void 0,z=l.st?new Float32Array(E/3*2):void 0,O=0,S=0,I=0,R=0,q=0,M=k,N=P,W=H,B=!0,U=0,J=1/((w/=3)-r.length+1);for(g=0;g<w;++g){var Y=3*g,Z=a.Cartesian3.fromArray(v,Y,A),j=a.Cartesian3.fromArray(y,Y,_);if(l.position&&(b[O++]=j.x,b[O++]=j.y,b[O++]=j.z,b[O++]=Z.x,b[O++]=Z.y,b[O++]=Z.z),l.st&&(z[q++]=U,z[q++]=0,z[q++]=U,z[q++]=1),l.normal||l.tangent||l.bitangent){var K,Q=a.Cartesian3.clone(a.Cartesian3.ZERO,L),X=d.scaleToGeodeticSurface(a.Cartesian3.fromArray(v,Y,_),_);if(g+1<w&&(K=d.scaleToGeodeticSurface(a.Cartesian3.fromArray(v,Y+3,F),F),Q=a.Cartesian3.fromArray(v,Y+3,L)),B){var $=a.Cartesian3.subtract(Q,Z,D),ee=a.Cartesian3.subtract(X,Z,A);M=a.Cartesian3.normalize(a.Cartesian3.cross(ee,$,M),M),B=!1}a.Cartesian3.equalsEpsilon(K,X,i.CesiumMath.EPSILON10)?B=!0:(U+=J,l.tangent&&(N=a.Cartesian3.normalize(a.Cartesian3.subtract(K,X,N),N)),l.bitangent&&(W=a.Cartesian3.normalize(a.Cartesian3.cross(M,N,W),W))),l.normal&&(G[S++]=M.x,G[S++]=M.y,G[S++]=M.z,G[S++]=M.x,G[S++]=M.y,G[S++]=M.z),l.tangent&&(V[R++]=N.x,V[R++]=N.y,V[R++]=N.z,V[R++]=N.x,V[R++]=N.y,V[R++]=N.z),l.bitangent&&(T[I++]=W.x,T[I++]=W.y,T[I++]=W.z,T[I++]=W.x,T[I++]=W.y,T[I++]=W.z)}}var te=new f.GeometryAttributes;l.position&&(te.position=new u.GeometryAttribute({componentDatatype:p.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:b})),l.normal&&(te.normal=new u.GeometryAttribute({componentDatatype:p.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:G})),l.tangent&&(te.tangent=new u.GeometryAttribute({componentDatatype:p.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:V})),l.bitangent&&(te.bitangent=new u.GeometryAttribute({componentDatatype:p.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:T})),l.st&&(te.st=new u.GeometryAttribute({componentDatatype:p.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:z}));var ie=E/3;E-=6*(C+1);var ae=h.IndexDatatype.createTypedArray(ie,E),re=0;for(g=0;g<ie-2;g+=2){var ne=g,oe=g+2,se=a.Cartesian3.fromArray(b,3*ne,A),le=a.Cartesian3.fromArray(b,3*oe,_);if(!a.Cartesian3.equalsEpsilon(se,le,i.CesiumMath.EPSILON10)){var me=g+1,de=g+3;ae[re++]=me,ae[re++]=ne,ae[re++]=de,ae[re++]=de,ae[re++]=ne,ae[re++]=oe}}return new u.Geometry({attributes:te,indices:ae,primitiveType:u.PrimitiveType.TRIANGLES,boundingSphere:new n.BoundingSphere.fromVertices(b)})}},function(t,i){return e.defined(i)&&(t=G.unpack(t,i)),t._ellipsoid=r.Ellipsoid.clone(t._ellipsoid),G.createGeometry(t)}}));
