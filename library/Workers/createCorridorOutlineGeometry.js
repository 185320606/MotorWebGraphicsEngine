/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2017 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["./when-4ca4e419","./Check-430b3551","./defineProperties-163ddb68","./Cartesian3-32451e63","./Ellipsoid-d2aa3b12","./Transforms-7b04d7e0","./Matrix4-33464f2b","./RuntimeError-443472b0","./Cartesian2-f49a1383","./FeatureDetection-0d4fee13","./WebGLConstants-2ddfa2f9","./ComponentDatatype-329b9462","./GeometryAttribute-b8faa946","./GeometryAttributes-614c63f8","./IndexDatatype-153fdd7f","./IntersectionTests-15d018f5","./Plane-84b14a0a","./arrayFill-11a46844","./arrayRemoveDuplicates-c3fd0b84","./EllipsoidTangentPlane-3967708f","./EllipsoidRhumbLine-c004db91","./PolygonPipeline-d25dad97","./PolylineVolumeGeometryLibrary-06ac58f3","./EllipsoidGeodesic-c57b5e5c","./PolylinePipeline-4ac94627","./CorridorGeometryLibrary-dbfd4edb"],(function(e,t,i,r,o,a,n,s,l,d,u,p,f,h,y,c,b,g,v,m,A,C,_,E,G,P){"use strict";var T=new r.Cartesian3,w=new r.Cartesian3,L=new r.Cartesian3;function D(t,i){var o,a,n,s=[],l=t.positions,d=t.corners,u=t.endPositions,c=new h.GeometryAttributes,b=0,g=0,v=0;for(a=0;a<l.length;a+=2)b+=n=l[a].length-3,v+=n/3*4,g+=l[a+1].length-3;for(b+=3,g+=3,a=0;a<d.length;a++){o=d[a];var m=d[a].leftPositions;e.defined(m)?(b+=n=m.length,v+=n/3*2):(g+=n=d[a].rightPositions.length,v+=n/3*2)}var A,C=e.defined(u);C&&(b+=A=u[0].length-3,g+=A,v+=4*(A/=3));var E,G,D,k,O,x,N=b+g,V=new Float64Array(N),H=0,I=N-1,S=A/2,M=y.IndexDatatype.createTypedArray(N/3,v+4),R=0;if(M[R++]=H/3,M[R++]=(I-2)/3,C){s.push(H/3),x=T,O=w;var F=u[0];for(a=0;a<S;a++)x=r.Cartesian3.fromArray(F,3*(S-1-a),x),O=r.Cartesian3.fromArray(F,3*(S+a),O),P.CorridorGeometryLibrary.addAttribute(V,O,H),P.CorridorGeometryLibrary.addAttribute(V,x,void 0,I),k=(G=H/3)+1,D=(E=(I-2)/3)-1,M[R++]=E,M[R++]=D,M[R++]=G,M[R++]=k,H+=3,I-=3}var B=0,U=l[B++],j=l[B++];for(V.set(U,H),V.set(j,I-j.length+1),n=j.length-3,s.push(H/3,(I-2)/3),a=0;a<n;a+=3)k=(G=H/3)+1,D=(E=(I-2)/3)-1,M[R++]=E,M[R++]=D,M[R++]=G,M[R++]=k,H+=3,I-=3;for(a=0;a<d.length;a++){var Y,q,W=(o=d[a]).leftPositions,J=o.rightPositions,z=L;if(e.defined(W)){for(I-=3,q=D,s.push(k),Y=0;Y<W.length/3;Y++)z=r.Cartesian3.fromArray(W,3*Y,z),M[R++]=q-Y-1,M[R++]=q-Y,P.CorridorGeometryLibrary.addAttribute(V,z,void 0,I),I-=3;s.push(q-Math.floor(W.length/6)),i===_.CornerType.BEVELED&&s.push((I-2)/3+1),H+=3}else{for(H+=3,q=k,s.push(D),Y=0;Y<J.length/3;Y++)z=r.Cartesian3.fromArray(J,3*Y,z),M[R++]=q+Y,M[R++]=q+Y+1,P.CorridorGeometryLibrary.addAttribute(V,z,H),H+=3;s.push(q+Math.floor(J.length/6)),i===_.CornerType.BEVELED&&s.push(H/3-1),I-=3}for(U=l[B++],j=l[B++],U.splice(0,3),j.splice(j.length-3,3),V.set(U,H),V.set(j,I-j.length+1),n=j.length-3,Y=0;Y<j.length;Y+=3)G=(k=H/3)-1,E=(D=(I-2)/3)+1,M[R++]=E,M[R++]=D,M[R++]=G,M[R++]=k,H+=3,I-=3;H-=3,I+=3,s.push(H/3,(I-2)/3)}if(C){H+=3,I-=3,x=T,O=w;var K=u[1];for(a=0;a<S;a++)x=r.Cartesian3.fromArray(K,3*(A-a-1),x),O=r.Cartesian3.fromArray(K,3*a,O),P.CorridorGeometryLibrary.addAttribute(V,x,void 0,I),P.CorridorGeometryLibrary.addAttribute(V,O,H),G=(k=H/3)-1,E=(D=(I-2)/3)+1,M[R++]=E,M[R++]=D,M[R++]=G,M[R++]=k,H+=3,I-=3;s.push(H/3)}else s.push(H/3,(I-2)/3);return M[R++]=H/3,M[R++]=(I-2)/3,c.position=new f.GeometryAttribute({componentDatatype:p.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:V}),{attributes:c,indices:M,wallIndices:s}}function k(a){var n=(a=e.defaultValue(a,e.defaultValue.EMPTY_OBJECT)).positions,s=a.width;t.Check.typeOf.object("options.positions",n),t.Check.typeOf.number("options.width",s);var l=e.defaultValue(a.height,0),d=e.defaultValue(a.extrudedHeight,l);this._positions=n,this._ellipsoid=o.Ellipsoid.clone(e.defaultValue(a.ellipsoid,o.Ellipsoid.WGS84)),this._width=s,this._height=Math.max(l,d),this._extrudedHeight=Math.min(l,d),this._cornerType=e.defaultValue(a.cornerType,_.CornerType.ROUNDED),this._granularity=e.defaultValue(a.granularity,i.CesiumMath.RADIANS_PER_DEGREE),this._offsetAttribute=a.offsetAttribute,this._workerName="createCorridorOutlineGeometry",this.packedLength=1+n.length*r.Cartesian3.packedLength+o.Ellipsoid.packedLength+6}k.pack=function(i,a,n){t.Check.typeOf.object("value",i),t.Check.typeOf.object("array",a),n=e.defaultValue(n,0);var s=i._positions,l=s.length;a[n++]=l;for(var d=0;d<l;++d,n+=r.Cartesian3.packedLength)r.Cartesian3.pack(s[d],a,n);return o.Ellipsoid.pack(i._ellipsoid,a,n),n+=o.Ellipsoid.packedLength,a[n++]=i._width,a[n++]=i._height,a[n++]=i._extrudedHeight,a[n++]=i._cornerType,a[n++]=i._granularity,a[n]=e.defaultValue(i._offsetAttribute,-1),a};var O=o.Ellipsoid.clone(o.Ellipsoid.UNIT_SPHERE),x={positions:void 0,ellipsoid:O,width:void 0,height:void 0,extrudedHeight:void 0,cornerType:void 0,granularity:void 0,offsetAttribute:void 0};return k.unpack=function(i,a,n){t.Check.typeOf.object("array",i),a=e.defaultValue(a,0);for(var s=i[a++],l=new Array(s),d=0;d<s;++d,a+=r.Cartesian3.packedLength)l[d]=r.Cartesian3.unpack(i,a);var u=o.Ellipsoid.unpack(i,a,O);a+=o.Ellipsoid.packedLength;var p=i[a++],f=i[a++],h=i[a++],y=i[a++],c=i[a++],b=i[a];return e.defined(n)?(n._positions=l,n._ellipsoid=o.Ellipsoid.clone(u,n._ellipsoid),n._width=p,n._height=f,n._extrudedHeight=h,n._cornerType=y,n._granularity=c,n._offsetAttribute=-1===b?void 0:b,n):(x.positions=l,x.width=p,x.height=f,x.extrudedHeight=h,x.cornerType=y,x.granularity=c,x.offsetAttribute=-1===b?void 0:b,new k(x))},k.createGeometry=function(t){var o=t._positions,n=t._width,s=t._ellipsoid;o=function(e,t){for(var i=0;i<e.length;i++)e[i]=t.scaleToGeodeticSurface(e[i],e[i]);return e}(o,s);var l=v.arrayRemoveDuplicates(o,r.Cartesian3.equalsEpsilon);if(!(l.length<2||n<=0)){var d,u=t._height,h=t._extrudedHeight,c=!i.CesiumMath.equalsEpsilon(u,h,0,i.CesiumMath.EPSILON2),b={ellipsoid:s,positions:l,width:n,cornerType:t._cornerType,granularity:t._granularity,saveAttributes:!1};if(c)b.height=u,b.extrudedHeight=h,b.offsetAttribute=t._offsetAttribute,d=function(t){var i=t.ellipsoid,r=D(P.CorridorGeometryLibrary.computePositions(t),t.cornerType),o=r.wallIndices,a=t.height,n=t.extrudedHeight,s=r.attributes,l=r.indices,d=s.position.values,u=d.length,h=new Float64Array(u);h.set(d);var c,b=new Float64Array(2*u);if(d=C.PolygonPipeline.scaleToGeodeticHeight(d,a,i),h=C.PolygonPipeline.scaleToGeodeticHeight(h,n,i),b.set(d),b.set(h,u),s.position.values=b,u/=3,e.defined(t.offsetAttribute)){var v=new Uint8Array(2*u);if(t.offsetAttribute===f.GeometryOffsetAttribute.TOP)v=g.arrayFill(v,1,0,u);else{var m=t.offsetAttribute===f.GeometryOffsetAttribute.NONE?0:1;v=g.arrayFill(v,m)}s.applyOffset=new f.GeometryAttribute({componentDatatype:p.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:v})}var A=l.length,_=y.IndexDatatype.createTypedArray(b.length/3,2*(A+o.length));_.set(l);var E,G,T=A;for(c=0;c<A;c+=2){var w=l[c],L=l[c+1];_[T++]=w+u,_[T++]=L+u}for(c=0;c<o.length;c++)G=(E=o[c])+u,_[T++]=E,_[T++]=G;return{attributes:s,indices:_}}(b);else if((d=D(P.CorridorGeometryLibrary.computePositions(b),b.cornerType)).attributes.position.values=C.PolygonPipeline.scaleToGeodeticHeight(d.attributes.position.values,u,s),e.defined(t._offsetAttribute)){var m=d.attributes.position.values.length,A=new Uint8Array(m/3),_=t._offsetAttribute===f.GeometryOffsetAttribute.NONE?0:1;g.arrayFill(A,_),d.attributes.applyOffset=new f.GeometryAttribute({componentDatatype:p.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:A})}var E=d.attributes,G=a.BoundingSphere.fromVertices(E.position.values,void 0,3);return new f.Geometry({attributes:E,indices:d.indices,primitiveType:f.PrimitiveType.LINES,boundingSphere:G,offsetAttribute:t._offsetAttribute})}},function(t,i){return e.defined(i)&&(t=k.unpack(t,i)),t._ellipsoid=o.Ellipsoid.clone(t._ellipsoid),k.createGeometry(t)}}));
