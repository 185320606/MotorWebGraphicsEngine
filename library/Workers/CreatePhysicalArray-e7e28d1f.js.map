{"version":3,"file":"CreatePhysicalArray-e7e28d1f.js","sources":["../../../../Source/Extension/Source/Worker/CreatePhysicalArray.js"],"sourcesContent":["import defined from '../../../Core/defined.js';\r\nimport Cartesian3 from '../../../Core/Cartesian3.js';\r\nimport Matrix4 from '../../../Core/Matrix4.js';\r\nimport PrimitiveType from '../../../Core/PrimitiveType.js';\r\n\r\nexport default class CreatePhysicalArray {\r\n}\r\n\r\nvar negateRelativeToCenter = new Cartesian3();\r\nvar negateRelativeToCenterMatrix = new Matrix4();\r\nvar relativePosition = new Cartesian3();\r\n\r\nCreatePhysicalArray.createPhysicalArrayFromTerrain = function (physical, lbSpaMgr, relativeToCenter, positions, indices) {\r\n    var hasRelativeToCenter = defined(relativeToCenter);\r\n    relativeToCenter = hasRelativeToCenter ? relativeToCenter : Cartesian3.ZERO;\r\n    Cartesian3.negate(relativeToCenter, negateRelativeToCenter);\r\n    Matrix4.fromTranslation(negateRelativeToCenter, negateRelativeToCenterMatrix);\r\n\r\n    var physicalVertices = new Float32Array(positions.length * 3.0);\r\n    var indexVertices = 0;\r\n    for (var index = 0; index < positions.length; ++index) {\r\n        var position = positions[index];\r\n        Matrix4.multiplyByPoint(negateRelativeToCenterMatrix, position, relativePosition);\r\n\r\n        physicalVertices[indexVertices++] = relativePosition.x;\r\n        physicalVertices[indexVertices++] = relativePosition.y;\r\n        physicalVertices[indexVertices++] = relativePosition.z;\r\n    }\r\n\r\n    var pPrimitive = new physical.LBSpaPrimitive();\r\n    initSpaTrianglePrimitive(pPrimitive, physicalVertices, undefined, indices, undefined);\r\n    var pPrimitiveSpatial = lbSpaMgr.CreateTriangleSpatial(pPrimitive);\r\n\r\n    //serial write\r\n    var pSerialWrite = new physical.LBSpaSerial();\r\n    pSerialWrite.WriteSpatial(pPrimitiveSpatial);\r\n    var physicalArray = new Uint8Array(pSerialWrite.GetBufferSize());\r\n    for (var i = 0; i < physicalArray.length; ++i) {\r\n        physicalArray[i] = pSerialWrite.GetBufferVal(i);\r\n    }\r\n    physical.destroy(pSerialWrite);\r\n    physical.destroy(pPrimitiveSpatial);\r\n\r\n    return physicalArray;\r\n};\r\n\r\nCreatePhysicalArray.createPhysicalArrayFromModel = function (physical, lbSpaMgr, primitiveMode, isInstance, pPtAry, pBatchIdAry, pIndexAry, pEdgeCheckAry) {\r\n    var pPrimitive = new physical.LBSpaPrimitive();\r\n    var pPrimitiveSpatial;\r\n    if (PrimitiveType.LINES === primitiveMode) {\r\n        initStepLinePrimitive(pPrimitive, pPtAry, pBatchIdAry);\r\n        pPrimitiveSpatial = lbSpaMgr.CreateStepLineSpatial(pPrimitive);\r\n    } else {\r\n        initSpaTrianglePrimitive(pPrimitive, pPtAry, isInstance ? undefined : pBatchIdAry, pIndexAry, pEdgeCheckAry);\r\n        pPrimitiveSpatial = lbSpaMgr.CreateTriangleSpatial(pPrimitive);\r\n    }\r\n\r\n    //serial write\r\n    var pSerialWrite = new physical.LBSpaSerial();\r\n    pSerialWrite.WriteSpatial(pPrimitiveSpatial);\r\n    var physicalArray = new Uint8Array(pSerialWrite.GetBufferSize());\r\n    for (var index = 0; index < physicalArray.length; ++index) {\r\n        physicalArray[index] = pSerialWrite.GetBufferVal(index);\r\n    }\r\n\r\n    physical.destroy(pSerialWrite);\r\n    physical.destroy(pPrimitiveSpatial);\r\n    return physicalArray;\r\n};\r\n\r\nfunction initSpaTrianglePrimitive(pPrimitive, pPtAry, pBatchIdAry, pIndexAry, pEdgeCheckAry) {\r\n    var bBatchId = defined(pBatchIdAry);\r\n    pPrimitive.SetPtValNum(pPtAry.length, bBatchId);//true desc have batch\r\n    var i;\r\n    for (i = 0; i < pPtAry.length; ++i) {\r\n        pPrimitive.SetPtValVal(i, pPtAry[i]);\r\n    }\r\n    if (bBatchId) {\r\n        for (i = 0; i < pBatchIdAry.length; ++i) {\r\n            pPrimitive.SetBatchIdVal(i, pBatchIdAry[i]);\r\n        }\r\n    }\r\n    var bEdgeCheck = defined(pEdgeCheckAry);\r\n    pPrimitive.SetIndexNum(pIndexAry.length, bEdgeCheck);//need edge\r\n    for (i = 0; i < pIndexAry.length; ++i) {\r\n        pPrimitive.SetIndexVal(i, pIndexAry[i]);\r\n    }\r\n    if (bEdgeCheck) {\r\n        for (i = 0; i < pEdgeCheckAry.length; ++i) {\r\n            pPrimitive.SetEdgeCheckVal(i, pEdgeCheckAry[i]);\r\n        }\r\n    }\r\n}\r\n\r\nfunction initStepLinePrimitive(pPrimitive, pPtAry, pBatchIdAry) {\r\n    var i;\r\n    var bHaveBatch = defined(pBatchIdAry);\r\n    pPrimitive.SetPtValNum(pPtAry.length, bHaveBatch);//true desc have batch\r\n    for (i = 0; i < pPtAry.length; ++i) {\r\n        pPrimitive.SetPtValVal(i, pPtAry[i]);\r\n    }\r\n    if (bHaveBatch) {\r\n        for (i = 0; i < pBatchIdAry.length; ++i) {\r\n            pPrimitive.SetBatchIdVal(i, pBatchIdAry[i]);\r\n        }\r\n    }\r\n\r\n    pPrimitive.InitIndexByPt();//need cvt index structure\r\n}\r\n"],"names":["CreatePhysicalArray","negateRelativeToCenter","Cartesian3","negateRelativeToCenterMatrix","Matrix4","relativePosition","initSpaTrianglePrimitive","pPrimitive","pPtAry","pBatchIdAry","pIndexAry","pEdgeCheckAry","i","bBatchId","defined","SetPtValNum","length","SetPtValVal","SetBatchIdVal","bEdgeCheck","SetIndexNum","SetIndexVal","SetEdgeCheckVal","createPhysicalArrayFromTerrain","physical","lbSpaMgr","relativeToCenter","positions","indices","ZERO","negate","fromTranslation","physicalVertices","Float32Array","indexVertices","index","position","multiplyByPoint","x","y","z","LBSpaPrimitive","undefined","pPrimitiveSpatial","CreateTriangleSpatial","pSerialWrite","LBSpaSerial","WriteSpatial","physicalArray","Uint8Array","GetBufferSize","GetBufferVal","destroy","createPhysicalArrayFromModel","primitiveMode","isInstance","PrimitiveType","LINES","bHaveBatch","InitIndexByPt","initStepLinePrimitive","CreateStepLineSpatial"],"mappings":"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"}