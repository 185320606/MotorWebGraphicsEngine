/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2017 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["./when-4ca4e419","./Check-430b3551","./defineProperties-163ddb68","./Cartesian3-32451e63","./Ellipsoid-d2aa3b12","./Transforms-7b04d7e0","./Matrix4-33464f2b","./RuntimeError-443472b0","./Cartesian2-f49a1383","./FeatureDetection-0d4fee13","./WebGLConstants-2ddfa2f9","./ComponentDatatype-329b9462","./GeometryAttribute-b8faa946","./GeometryAttributes-614c63f8","./IndexDatatype-153fdd7f","./IntersectionTests-15d018f5","./Plane-84b14a0a","./ArcType-51c149e1","./EllipsoidRhumbLine-c004db91","./EllipsoidGeodesic-c57b5e5c","./PolylinePipeline-4ac94627","./Color-1501ed7a"],(function(e,o,r,t,a,l,i,n,d,s,p,f,c,y,u,h,C,g,T,m,v,E){"use strict";function w(e,o,r,t,a,l,i){var n,d=v.PolylinePipeline.numberOfPoints(e,o,a),s=r.red,p=r.green,f=r.blue,c=r.alpha,y=t.red,u=t.green,h=t.blue,C=t.alpha;if(E.Color.equals(r,t)){for(n=0;n<d;n++)l[i++]=E.Color.floatToByte(s),l[i++]=E.Color.floatToByte(p),l[i++]=E.Color.floatToByte(f),l[i++]=E.Color.floatToByte(c);return i}var g=(y-s)/d,T=(u-p)/d,m=(h-f)/d,w=(C-c)/d,b=i;for(n=0;n<d;n++)l[b++]=E.Color.floatToByte(s+n*g),l[b++]=E.Color.floatToByte(p+n*T),l[b++]=E.Color.floatToByte(f+n*m),l[b++]=E.Color.floatToByte(c+n*w);return b}function b(i){var n=(i=e.defaultValue(i,e.defaultValue.EMPTY_OBJECT)).positions,d=i.colors,s=e.defaultValue(i.colorsPerVertex,!1);if(!e.defined(n)||n.length<2)throw new o.DeveloperError("At least two positions are required.");if(e.defined(d)&&(s&&d.length<n.length||!s&&d.length<n.length-1))throw new o.DeveloperError("colors has an invalid length.");this._positions=n,this._colors=d,this._colorsPerVertex=s,this._followSurface=e.defaultValue(i.followSurface,!0),e.defined(i.followSurface)&&(l.deprecationWarning("PolylineGeometry.followSurface","PolylineGeometry.followSurface is deprecated and will be removed in Cesium 1.55. Use PolylineGeometry.arcType instead."),i.arcType=i.followSurface?g.ArcType.GEODESIC:g.ArcType.NONE),this._arcType=e.defaultValue(i.arcType,g.ArcType.GEODESIC),this._followSurface=this._arcType===g.ArcType.NONE,this._granularity=e.defaultValue(i.granularity,r.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=e.defaultValue(i.ellipsoid,a.Ellipsoid.WGS84),this._workerName="createSimplePolylineGeometry";var p=1+n.length*t.Cartesian3.packedLength;p+=e.defined(d)?1+d.length*E.Color.packedLength:1,this.packedLength=p+a.Ellipsoid.packedLength+3}b.pack=function(r,l,i){if(!e.defined(r))throw new o.DeveloperError("value is required");if(!e.defined(l))throw new o.DeveloperError("array is required");var n;i=e.defaultValue(i,0);var d=r._positions,s=d.length;for(l[i++]=s,n=0;n<s;++n,i+=t.Cartesian3.packedLength)t.Cartesian3.pack(d[n],l,i);var p=r._colors;for(s=e.defined(p)?p.length:0,l[i++]=s,n=0;n<s;++n,i+=E.Color.packedLength)E.Color.pack(p[n],l,i);return a.Ellipsoid.pack(r._ellipsoid,l,i),i+=a.Ellipsoid.packedLength,l[i++]=r._colorsPerVertex?1:0,l[i++]=r._arcType,l[i]=r._granularity,l},b.unpack=function(r,l,i){if(!e.defined(r))throw new o.DeveloperError("array is required");var n;l=e.defaultValue(l,0);var d=r[l++],s=new Array(d);for(n=0;n<d;++n,l+=t.Cartesian3.packedLength)s[n]=t.Cartesian3.unpack(r,l);var p=(d=r[l++])>0?new Array(d):void 0;for(n=0;n<d;++n,l+=E.Color.packedLength)p[n]=E.Color.unpack(r,l);var f=a.Ellipsoid.unpack(r,l);l+=a.Ellipsoid.packedLength;var c=1===r[l++],y=r[l++],u=r[l];return e.defined(i)?(i._positions=s,i._colors=p,i._ellipsoid=f,i._colorsPerVertex=c,i._arcType=y,i._granularity=u,i):new b({positions:s,colors:p,ellipsoid:f,colorsPerVertex:c,arcType:y,granularity:u})};var P=new Array(2),_=new Array(2),A={positions:P,height:_,ellipsoid:void 0,minDistance:void 0,granularity:void 0};return b.createGeometry=function(o){var a,i,n,d,s,p=o._positions,h=o._colors,C=o._colorsPerVertex,T=o._arcType,m=o._granularity,b=o._ellipsoid,B=r.CesiumMath.chordLength(m,b.maximumRadius),k=e.defined(h)&&!C,D=p.length,G=0;if(T===g.ArcType.GEODESIC||T===g.ArcType.RHUMB){var S,L,V;T===g.ArcType.GEODESIC?(S=r.CesiumMath.chordLength(m,b.maximumRadius),L=v.PolylinePipeline.numberOfPoints,V=v.PolylinePipeline.generateArc):(S=m,L=v.PolylinePipeline.numberOfPointsRhumbLine,V=v.PolylinePipeline.generateRhumbArc);var x=v.PolylinePipeline.extractHeights(p,b),O=A;if(T===g.ArcType.GEODESIC?O.minDistance=B:O.granularity=m,O.ellipsoid=b,k){var I=0;for(a=0;a<D-1;a++)I+=L(p[a],p[a+1],S)+1;i=new Float64Array(3*I),d=new Uint8Array(4*I),O.positions=P,O.height=_;var R=0;for(a=0;a<D-1;++a){P[0]=p[a],P[1]=p[a+1],_[0]=x[a],_[1]=x[a+1];var N=V(O);if(e.defined(h)){var U=N.length/3;s=h[a];for(var M=0;M<U;++M)d[R++]=E.Color.floatToByte(s.red),d[R++]=E.Color.floatToByte(s.green),d[R++]=E.Color.floatToByte(s.blue),d[R++]=E.Color.floatToByte(s.alpha)}i.set(N,G),G+=N.length}}else if(O.positions=p,O.height=x,i=new Float64Array(V(O)),e.defined(h)){for(d=new Uint8Array(i.length/3*4),a=0;a<D-1;++a){G=w(p[a],p[a+1],h[a],h[a+1],B,d,G)}var q=h[D-1];d[G++]=E.Color.floatToByte(q.red),d[G++]=E.Color.floatToByte(q.green),d[G++]=E.Color.floatToByte(q.blue),d[G++]=E.Color.floatToByte(q.alpha)}}else{n=k?2*D-2:D,i=new Float64Array(3*n),d=e.defined(h)?new Uint8Array(4*n):void 0;var F=0,W=0;for(a=0;a<D;++a){var H=p[a];if(k&&a>0&&(t.Cartesian3.pack(H,i,F),F+=3,s=h[a-1],d[W++]=E.Color.floatToByte(s.red),d[W++]=E.Color.floatToByte(s.green),d[W++]=E.Color.floatToByte(s.blue),d[W++]=E.Color.floatToByte(s.alpha)),k&&a===D-1)break;t.Cartesian3.pack(H,i,F),F+=3,e.defined(h)&&(s=h[a],d[W++]=E.Color.floatToByte(s.red),d[W++]=E.Color.floatToByte(s.green),d[W++]=E.Color.floatToByte(s.blue),d[W++]=E.Color.floatToByte(s.alpha))}}var Y=new y.GeometryAttributes;Y.position=new c.GeometryAttribute({componentDatatype:f.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:i}),e.defined(h)&&(Y.color=new c.GeometryAttribute({componentDatatype:f.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:d,normalize:!0}));var z=2*((n=i.length/3)-1),J=u.IndexDatatype.createTypedArray(n,z),j=0;for(a=0;a<n-1;++a)J[j++]=a,J[j++]=a+1;return new c.Geometry({attributes:Y,indices:J,primitiveType:c.PrimitiveType.LINES,boundingSphere:l.BoundingSphere.fromPoints(p)})},function(o,r){return e.defined(r)&&(o=b.unpack(o,r)),o._ellipsoid=a.Ellipsoid.clone(o._ellipsoid),b.createGeometry(o)}}));
